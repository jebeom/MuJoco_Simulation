{
    "sourceFile": "include/controller.h",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 34,
            "patches": [
                {
                    "date": 1689746947474,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1691459330778,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,10 +38,10 @@\n \t// VectorXd _qdot; // joint velocity\n \n \n     // void read_pybind(double time, std::array<double,7> qpos, std::array<double, 7> qvel);\n-    // std::vector<double> write_pybind();\n-    // std::vector<double> torque_command;\n+    std::vector<double> write_pybind();\n+    std::vector<double> torque_command;\n     double  _goal_pos_cuda[7], _returnArray[71], _q_for_cuda[7], _qdot_for_cuda[7];\n     double tmp_pos_array[35], tmp_vel_array[35];\n \n private:\n"
                },
                {
                    "date": 1691459349936,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,8 +40,12 @@\n \n     // void read_pybind(double time, std::array<double,7> qpos, std::array<double, 7> qvel);\n     std::vector<double> write_pybind();\n     std::vector<double> torque_command;\n+\n+\n+\n+    \n     double  _goal_pos_cuda[7], _returnArray[71], _q_for_cuda[7], _qdot_for_cuda[7];\n     double tmp_pos_array[35], tmp_vel_array[35];\n \n private:\n"
                },
                {
                    "date": 1691467145156,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,8 +46,9 @@\n \n     \n     double  _goal_pos_cuda[7], _returnArray[71], _q_for_cuda[7], _qdot_for_cuda[7];\n     double tmp_pos_array[35], tmp_vel_array[35];\n+    double _alpha, _beta;\n \n private:\n     void Initialize();\n     void ModelUpdate();\n"
                },
                {
                    "date": 1691468265087,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,11 +40,14 @@\n \n     // void read_pybind(double time, std::array<double,7> qpos, std::array<double, 7> qvel);\n     std::vector<double> write_pybind();\n     std::vector<double> torque_command;\n+    std::vector<double> CController::read_pybind(double t, std::array<double,15> q, std::array<double, 15> qdot, double alpha)\n \n+    // read_pybind(double t, std::array<double,15> q, std::array<double, 15> qdot, double alpha)\n \n \n+\n     \n     double  _goal_pos_cuda[7], _returnArray[71], _q_for_cuda[7], _qdot_for_cuda[7];\n     double tmp_pos_array[35], tmp_vel_array[35];\n     double _alpha, _beta;\n"
                },
                {
                    "date": 1691468278144,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,9 @@\n \n     // void read_pybind(double time, std::array<double,7> qpos, std::array<double, 7> qvel);\n     std::vector<double> write_pybind();\n     std::vector<double> torque_command;\n-    std::vector<double> CController::read_pybind(double t, std::array<double,15> q, std::array<double, 15> qdot, double alpha)\n+    std::vector<double> read_pybind(double t, std::array<double,15> q, std::array<double, 15> qdot, double alpha);\n \n     // read_pybind(double t, std::array<double,15> q, std::array<double, 15> qdot, double alpha)\n \n \n"
                },
                {
                    "date": 1691468361649,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,9 @@\n \n     // void read_pybind(double time, std::array<double,7> qpos, std::array<double, 7> qvel);\n     std::vector<double> write_pybind();\n     std::vector<double> torque_command;\n-    std::vector<double> read_pybind(double t, std::array<double,15> q, std::array<double, 15> qdot, double alpha);\n+    void read_pybind read_pybind(double t, std::array<double,15> q, std::array<double, 15> qdot, double alpha);\n \n     // read_pybind(double t, std::array<double,15> q, std::array<double, 15> qdot, double alpha)\n \n \n"
                },
                {
                    "date": 1691468479717,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,9 @@\n \n     // void read_pybind(double time, std::array<double,7> qpos, std::array<double, 7> qvel);\n     std::vector<double> write_pybind();\n     std::vector<double> torque_command;\n-    void read_pybind read_pybind(double t, std::array<double,15> q, std::array<double, 15> qdot, double alpha);\n+    void read_pybind(double t, std::array<double,15> q, std::array<double, 15> qdot, double alpha);\n \n     // read_pybind(double t, std::array<double,15> q, std::array<double, 15> qdot, double alpha)\n \n \n@@ -158,5 +158,5 @@\n     // int _nconminuscnt, _nconcnt, NconXCollO;\n \n };\n \n-#endif\n+#endif\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691472239392,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n     // void read_pybind(double time, std::array<double,7> qpos, std::array<double, 7> qvel);\n     std::vector<double> write_pybind();\n     std::vector<double> torque_command;\n     void read_pybind(double t, std::array<double,15> q, std::array<double, 15> qdot, double alpha);\n-\n+    void Initialize();\n     // read_pybind(double t, std::array<double,15> q, std::array<double, 15> qdot, double alpha)\n \n \n \n@@ -52,9 +52,9 @@\n     double tmp_pos_array[35], tmp_vel_array[35];\n     double _alpha, _beta;\n \n private:\n-    void Initialize();\n+    \n     void ModelUpdate();\n     void motionPlan();\n \n     void reset_target(double motion_time, VectorXd target_joint_position);\n"
                },
                {
                    "date": 1691473558315,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n \n #include \"robotmodel.h\"\n #include \"trajectory.h\"\n #include \"custommath.h\"\n-#include \"cuda.cuh\"\n+// #include \"cuda.cuh\"\n #include <signal.h>\n \n // #include \"mppi.h\"\n #include <fstream>\n"
                },
                {
                    "date": 1691473568709,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n \n #include \"robotmodel.h\"\n #include \"trajectory.h\"\n #include \"custommath.h\"\n-// #include \"cuda.cuh\"\n+#include \"cuda.cuh\"\n #include <signal.h>\n \n // #include \"mppi.h\"\n #include <fstream>\n"
                },
                {
                    "date": 1691473797904,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,11 +38,11 @@\n \t// VectorXd _qdot; // joint velocity\n \n \n     // void read_pybind(double time, std::array<double,7> qpos, std::array<double, 7> qvel);\n+    void read_pybind(double time, std::array<double,7> qpos, std::array<double, 7> qvel);\n     std::vector<double> write_pybind();\n     std::vector<double> torque_command;\n-    void read_pybind(double t, std::array<double,15> q, std::array<double, 15> qdot, double alpha);\n     void Initialize();\n     // read_pybind(double t, std::array<double,15> q, std::array<double, 15> qdot, double alpha)\n \n \n"
                },
                {
                    "date": 1691566216258,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,17 +9,27 @@\n \n #include \"robotmodel.h\"\n #include \"trajectory.h\"\n #include \"custommath.h\"\n-#include \"cuda.cuh\"\n+\n #include <signal.h>\n \n // #include \"mppi.h\"\n #include <fstream>\n \n using namespace std;\n using namespace Eigen;\n \n+#define _JDOF 7\n+#define OUTPUT_SIZE 1\n+#define __sampling_num 64\n+#define _time_window 32\n+#define _dt_cuda 0.003\n+#define _dt2_window 5\n+#define N __sampling_num*_JDOF*_time_window\n+#define _nodes_cuda 32\n+#define _threshold_cuda 0.001\n+#define gap_limit 0.3\n #define NECS2SEC 1000000000\n \n class CController\n {\n@@ -157,6 +167,6 @@\n     // double time_check, max_time_check[500];\n     // int _nconminuscnt, _nconcnt, NconXCollO;\n \n };\n-\n+#include \"cuda.cuh\"\n #endif\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691566249691,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,27 +9,17 @@\n \n #include \"robotmodel.h\"\n #include \"trajectory.h\"\n #include \"custommath.h\"\n-\n+#include \"cuda.cuh\"\n #include <signal.h>\n \n // #include \"mppi.h\"\n #include <fstream>\n \n using namespace std;\n using namespace Eigen;\n \n-#define _JDOF 7\n-#define OUTPUT_SIZE 1\n-#define __sampling_num 64\n-#define _time_window 32\n-#define _dt_cuda 0.003\n-#define _dt2_window 5\n-#define N __sampling_num*_JDOF*_time_window\n-#define _nodes_cuda 32\n-#define _threshold_cuda 0.001\n-#define gap_limit 0.3\n #define NECS2SEC 1000000000\n \n class CController\n {\n@@ -167,6 +157,6 @@\n     // double time_check, max_time_check[500];\n     // int _nconminuscnt, _nconcnt, NconXCollO;\n \n };\n-#include \"cuda.cuh\"\n+\n #endif\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691566705776,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n #pragma once\n #ifndef __CONTROLLER_H\n #define __CONTROLLER_H\n \n-#include <iostream>\n+// #include <iostream>\n #include <eigen3/Eigen/Dense>\n #include <rbdl/rbdl.h>\n #include <rbdl/addons/urdfreader/urdfreader.h>\n \n"
                },
                {
                    "date": 1691566717165,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n #include \"cuda.cuh\"\n #include <signal.h>\n \n // #include \"mppi.h\"\n-#include <fstream>\n+// #include <fstream>\n \n using namespace std;\n using namespace Eigen;\n \n"
                },
                {
                    "date": 1691567080152,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -155,8 +155,9 @@\n     bool nocheck;\n     // int time_cnt;\n     // double time_check, max_time_check[500];\n     // int _nconminuscnt, _nconcnt, NconXCollO;\n+    int start_signal;\n \n };\n \n #endif\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691567114303,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -155,9 +155,8 @@\n     bool nocheck;\n     // int time_cnt;\n     // double time_check, max_time_check[500];\n     // int _nconminuscnt, _nconcnt, NconXCollO;\n-    int start_signal;\n \n };\n \n #endif\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691571778869,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,8 +42,9 @@\n     void read_pybind(double time, std::array<double,7> qpos, std::array<double, 7> qvel);\n     std::vector<double> write_pybind();\n     std::vector<double> torque_command;\n     void Initialize();\n+    void reset_goal_pybind();\n     // read_pybind(double t, std::array<double,15> q, std::array<double, 15> qdot, double alpha)\n \n \n \n"
                },
                {
                    "date": 1691715363983,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,11 +38,13 @@\n \t// VectorXd _qdot; // joint velocity\n \n \n     // void read_pybind(double time, std::array<double,7> qpos, std::array<double, 7> qvel);\n-    void read_pybind(double time, std::array<double,7> qpos, std::array<double, 7> qvel);\n+    void read_pybind(double time, std::array<double,7> qpos, std::array<double, 7> qvel, std::array<double, 2> alpha);\n     std::vector<double> write_pybind();\n+    std::vector<double> state_for_pybind();\n     std::vector<double> torque_command;\n+    std::vector<double> X_data_for_pybind;\n     void Initialize();\n     void reset_goal_pybind();\n     // read_pybind(double t, std::array<double,15> q, std::array<double, 15> qdot, double alpha)\n \n@@ -50,9 +52,9 @@\n \n     \n     double  _goal_pos_cuda[7], _returnArray[71], _q_for_cuda[7], _qdot_for_cuda[7];\n     double tmp_pos_array[35], tmp_vel_array[35];\n-    double _alpha, _beta;\n+    double _alpha[1], _beta[1];\n \n private:\n     \n     void ModelUpdate();\n"
                },
                {
                    "date": 1691740290800,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,10 @@\n \t// VectorXd _qdot; // joint velocity\n \n \n     // void read_pybind(double time, std::array<double,7> qpos, std::array<double, 7> qvel);\n-    void read_pybind(double time, std::array<double,7> qpos, std::array<double, 7> qvel, std::array<double, 2> alpha);\n+    // void read_pybind(double time, std::array<double,7> qpos, std::array<double, 7> qvel, std::array<double, 2> alpha);\n+    void read_pybind(double time, std::array<double,7> qpos, std::array<double, 7> qvel, double alpha);\n     std::vector<double> write_pybind();\n     std::vector<double> state_for_pybind();\n     std::vector<double> torque_command;\n     std::vector<double> X_data_for_pybind;\n"
                },
                {
                    "date": 1693359100457,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,10 +38,10 @@\n \t// VectorXd _qdot; // joint velocity\n \n \n     // void read_pybind(double time, std::array<double,7> qpos, std::array<double, 7> qvel);\n-    // void read_pybind(double time, std::array<double,7> qpos, std::array<double, 7> qvel, std::array<double, 2> alpha);\n-    void read_pybind(double time, std::array<double,7> qpos, std::array<double, 7> qvel, double alpha);\n+    void read_pybind(double time, std::array<double,7> qpos, std::array<double, 7> qvel, std::array<double, 3> alpha);\n+    // void read_pybind(double time, std::array<double,7> qpos, std::array<double, 7> qvel, double alpha);\n     std::vector<double> write_pybind();\n     std::vector<double> state_for_pybind();\n     std::vector<double> torque_command;\n     std::vector<double> X_data_for_pybind;\n@@ -53,9 +53,9 @@\n \n     \n     double  _goal_pos_cuda[7], _returnArray[71], _q_for_cuda[7], _qdot_for_cuda[7];\n     double tmp_pos_array[35], tmp_vel_array[35];\n-    double _alpha[1], _beta[1];\n+    double _alpha[1], _beta[1], _time_rl[1];\n \n private:\n     \n     void ModelUpdate();\n@@ -63,8 +63,9 @@\n \n     void reset_target(double motion_time, VectorXd target_joint_position);\n     void reset_target(double motion_time, VectorXd target_joint_position, VectorXd target_joint_velocity);\n     void reset_target(double motion_time, Vector3d target_pos, Vector3d target_ori);\n+    void test_thread();\n \n     // void readJointState();\n     int _cnt, tmp_signal;\n \t// tmp_signal\n@@ -155,9 +156,9 @@\n     \n     int _nodes, tempcheck, NconOCollX, diff_all, clock, _nconminuscnt, _nconcnt, NconXCollO;\n     void test_LR(int check);\n \n-    bool nocheck;\n+    double sel_;\n     // int time_cnt;\n     // double time_check, max_time_check[500];\n     // int _nconminuscnt, _nconcnt, NconXCollO;\n \n"
                },
                {
                    "date": 1693359434056,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,9 +63,9 @@\n \n     void reset_target(double motion_time, VectorXd target_joint_position);\n     void reset_target(double motion_time, VectorXd target_joint_position, VectorXd target_joint_velocity);\n     void reset_target(double motion_time, Vector3d target_pos, Vector3d target_ori);\n-    void test_thread();\n+    static void test_thread();\n \n     // void readJointState();\n     int _cnt, tmp_signal;\n \t// tmp_signal\n"
                },
                {
                    "date": 1693359478217,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,9 +63,9 @@\n \n     void reset_target(double motion_time, VectorXd target_joint_position);\n     void reset_target(double motion_time, VectorXd target_joint_position, VectorXd target_joint_velocity);\n     void reset_target(double motion_time, Vector3d target_pos, Vector3d target_ori);\n-    static void test_thread();\n+    void test_thread();\n \n     // void readJointState();\n     int _cnt, tmp_signal;\n \t// tmp_signal\n"
                },
                {
                    "date": 1693359564315,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,8 +31,9 @@\n     void read(double time, double* q, double* qdot, int check, double *trans_mat_goal);\n     void control_mujoco();\n     void write(double* torque);\n     double estimate_LR(double _input[]);\n+    void test_thread();\n     double _output1;\n     VectorXd _q, _qdot, _q_order;\n     // VectorXd _q; // joint angle\n \t// VectorXd _qdot; // joint velocity\n@@ -63,9 +64,8 @@\n \n     void reset_target(double motion_time, VectorXd target_joint_position);\n     void reset_target(double motion_time, VectorXd target_joint_position, VectorXd target_joint_velocity);\n     void reset_target(double motion_time, Vector3d target_pos, Vector3d target_ori);\n-    void test_thread();\n \n     // void readJointState();\n     int _cnt, tmp_signal;\n \t// tmp_signal\n"
                },
                {
                    "date": 1693359586914,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n     void read(double time, double* q, double* qdot, int check, double *trans_mat_goal);\n     void control_mujoco();\n     void write(double* torque);\n     double estimate_LR(double _input[]);\n-    void test_thread();\n+    // void test_thread();\n     double _output1;\n     VectorXd _q, _qdot, _q_order;\n     // VectorXd _q; // joint angle\n \t// VectorXd _qdot; // joint velocity\n"
                },
                {
                    "date": 1693359606841,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n     void read(double time, double* q, double* qdot, int check, double *trans_mat_goal);\n     void control_mujoco();\n     void write(double* torque);\n     double estimate_LR(double _input[]);\n-    // void test_thread();\n+    void test_thread();\n     double _output1;\n     VectorXd _q, _qdot, _q_order;\n     // VectorXd _q; // joint angle\n \t// VectorXd _qdot; // joint velocity\n"
                },
                {
                    "date": 1693362227678,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,15 @@\n     void read(double time, double* q, double* qdot, int check, double *trans_mat_goal);\n     void control_mujoco();\n     void write(double* torque);\n     double estimate_LR(double _input[]);\n-    void test_thread();\n+    static void CController::test_thread()\n+    {\n+        while(1)\n+        {\n+            cout<<\"1\"<<endl;\n+        }\t\n+    }\n     double _output1;\n     VectorXd _q, _qdot, _q_order;\n     // VectorXd _q; // joint angle\n \t// VectorXd _qdot; // joint velocity\n"
                },
                {
                    "date": 1693362322172,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,13 +31,14 @@\n     void read(double time, double* q, double* qdot, int check, double *trans_mat_goal);\n     void control_mujoco();\n     void write(double* torque);\n     double estimate_LR(double _input[]);\n-    static void CController::test_thread()\n+    static void test_thread()\n     {\n+        cout<<\"2\"<<endl;\n         while(1)\n         {\n-            cout<<\"1\"<<endl;\n+            \n         }\t\n     }\n     double _output1;\n     VectorXd _q, _qdot, _q_order;\n"
                },
                {
                    "date": 1693362556910,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,16 +31,9 @@\n     void read(double time, double* q, double* qdot, int check, double *trans_mat_goal);\n     void control_mujoco();\n     void write(double* torque);\n     double estimate_LR(double _input[]);\n-    static void test_thread()\n-    {\n-        cout<<\"2\"<<endl;\n-        while(1)\n-        {\n-            \n-        }\t\n-    }\n+    \n     double _output1;\n     VectorXd _q, _qdot, _q_order;\n     // VectorXd _q; // joint angle\n \t// VectorXd _qdot; // joint velocity\n"
                },
                {
                    "date": 1693557909800,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,161 @@\n+#pragma once\n+#ifndef __CONTROLLER_H\n+#define __CONTROLLER_H\n+\n+// #include <iostream>\n+#include <eigen3/Eigen/Dense>\n+#include <rbdl/rbdl.h>\n+#include <rbdl/addons/urdfreader/urdfreader.h>\n+\n+#include \"robotmodel.h\"\n+#include \"trajectory.h\"\n+#include \"custommath.h\"\n+\n+using namespace std;\n+using namespace Eigen;\n+\n+#define NECS2SEC 1000000000\n+\n+class CController\n+{\n+\n+public:\n+    CController();\n+    virtual ~CController();\t\n+\n+    void read(double time, double* q, double* qdot);\n+    void control_mujoco();\n+    void write(double* torque);\n+    \n+    double _output1;\n+    VectorXd _q, _qdot, _q_order;\n+    // VectorXd _q; // joint angle\n+\t// VectorXd _qdot; // joint velocity\n+\n+\n+    // void read_pybind(double time, std::array<double,7> qpos, std::array<double, 7> qvel);\n+    void read_pybind(double time, std::array<double,7> qpos, std::array<double, 7> qvel, std::array<double, 3> alpha);\n+    // void read_pybind(double time, std::array<double,7> qpos, std::array<double, 7> qvel, double alpha);\n+    std::vector<double> write_pybind();\n+    std::vector<double> state_for_pybind();\n+    std::vector<double> torque_command;\n+    std::vector<double> X_data_for_pybind;\n+    void Initialize();\n+    void reset_goal_pybind();\n+    // read_pybind(double t, std::array<double,15> q, std::array<double, 15> qdot, double alpha)\n+\n+\n+\n+    \n+    double  _goal_pos_cuda[7], _returnArray[71], _q_for_cuda[7], _qdot_for_cuda[7];\n+    double tmp_pos_array[35], tmp_vel_array[35];\n+    double _alpha[1], _beta[1], _time_rl[1];\n+\n+private:\n+    \n+    void ModelUpdate();\n+    void motionPlan();\n+\n+    void reset_target(double motion_time, VectorXd target_joint_position);\n+    void reset_target(double motion_time, VectorXd target_joint_position, VectorXd target_joint_velocity);\n+    void reset_target(double motion_time, Vector3d target_pos, Vector3d target_ori);\n+\n+    // void readJointState();\n+    int _cnt, tmp_signal;\n+\t// tmp_signal\n+\n+\n+    \n+    VectorXd _torque, _pre_q, _pre_qdot, _pre_qdotdot_des; // joint torque\n+    VectorXd tmp_q;\n+\n+    int _k; // DOF\n+\n+    bool _bool_init;\n+    double _t;\n+    double _dt;\n+\tdouble _init_t;\n+\tdouble _pre_t;\n+\n+    //controller\n+\tdouble _kpj, _kdj; //joint P,D gain\n+    double _x_kp; // task control P gain\n+\n+    void JointControl();\n+    void CLIK();\n+\n+    // robotmodel\n+    CModel Model;\n+\n+    int _cnt_plan;\n+\tVectorXd _time_plan;\n+\tVectorXi _bool_plan;\n+\n+    int _control_mode; //1: joint space, 2: operational space\n+    VectorXd _q_home; // joint home position\n+\n+    //motion trajectory\n+\tdouble _start_time, _end_time, _motion_time;\n+\n+    CTrajectory JointTrajectory; // joint space trajectory\n+    HTrajectory HandTrajectory; // task space trajectory\n+\n+    bool _bool_joint_motion, _bool_ee_motion; // motion check\n+\n+    VectorXd _q_des, _qdot_des; \n+    VectorXd _q_goal, _qdot_goal;\n+    VectorXd _x_des_hand, _xdot_des_hand;\n+    VectorXd _x_goal_hand, _xdot_goal_hand;\n+    Vector3d _pos_goal_hand, _rpy_goal_hand;\n+\n+    MatrixXd _A_diagonal; // diagonal inertia matrix\n+    MatrixXd _J_hands; // jacobian matrix\n+    MatrixXd _J_bar_hands; // pseudo invere jacobian matrix\n+\n+    VectorXd _x_hand, _xdot_hand; // End-effector\n+\n+\n+    VectorXd _x_err_hand;\n+    Matrix3d _R_des_hand;\n+\n+    MatrixXd _I; // Identity matrix\n+\n+    ////////////////////////////////////////\n+    MatrixXd txt_position, txt_velocity;\n+    VectorXd txt_nsecs;\n+    int _size;\n+    ////////////////////////////////////////\n+    float rand_FloatRange(float a, float b);\n+    ////////////////////save_stack/////////////////\n+    void save_stack();\n+    bool check_save_log_once, save_q_once;\n+    ostringstream filename;\n+    ifstream weight0;\n+    ofstream output;\n+    VectorXd _min_joint_position, _max_joint_position, _q_home_old, _q_acc, _old_torque, _mppi, _qdotdot_des;\n+    MatrixXd _q_acc_matrix;\n+    double log_output[2000000], prevent_duplicate, _tmp;\n+    int check_7, a , cnt2, _rat, _ratt, ratrat, timestep_cnt, _cnt_mppi;\n+    ///////////////////////////////load weight////////////////\n+    void load_weight();\n+    // double _input[7]; // input node\n+\tdouble _hidden0[100]; // hidden layer 1\n+\tdouble _hidden1[100]; // hidden layer 2\t\n+\tdouble _weight0[7][100]; // weight 1\n+\tdouble _weight1[100];   // bias 1\n+\tdouble _weight2[100][100]; // weight 2\n+\tdouble _weight3[100];   // bias 2\n+\tdouble _weight4[100]; // weight 3\n+\tdouble _weight5;   // bias 3\n+    \n+    int _nodes, tempcheck, NconOCollX, diff_all, clock, _nconminuscnt, _nconcnt, NconXCollO;\n+    void test_LR(int check);\n+\n+    double sel_;\n+    // int time_cnt;\n+    // double time_check, max_time_check[500];\n+    // int _nconminuscnt, _nconcnt, NconXCollO;\n+\n+};\n+\n+#endif\n\\ No newline at end of file\n"
                },
                {
                    "date": 1693557958026,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,135 @@\n+#pragma once\n+#ifndef __CONTROLLER_H\n+#define __CONTROLLER_H\n+\n+// #include <iostream>\n+#include <eigen3/Eigen/Dense>\n+#include <rbdl/rbdl.h>\n+#include <rbdl/addons/urdfreader/urdfreader.h>\n+\n+#include \"robotmodel.h\"\n+#include \"trajectory.h\"\n+#include \"custommath.h\"\n+\n+using namespace std;\n+using namespace Eigen;\n+\n+#define NECS2SEC 1000000000\n+\n+class CController\n+{\n+\n+public:\n+    CController();\n+    virtual ~CController();\t\n+\n+    void read(double time, double* q, double* qdot);\n+    void control_mujoco();\n+    void write(double* torque);\n+\n+    VectorXd _q, _qdot, _q_order;\n+\n+    void Initialize();\n+\n+private:\n+    \n+    void ModelUpdate();\n+    void motionPlan();\n+\n+    void reset_target(double motion_time, VectorXd target_joint_position);\n+    void reset_target(double motion_time, VectorXd target_joint_position, VectorXd target_joint_velocity);\n+    void reset_target(double motion_time, Vector3d target_pos, Vector3d target_ori);\n+\n+    VectorXd _torque, _pre_q, _pre_qdot, _pre_qdotdot_des; // joint torque\n+    VectorXd tmp_q;\n+\n+    int _k; // DOF\n+\n+    bool _bool_init;\n+    double _t;\n+    double _dt;\n+\tdouble _init_t;\n+\tdouble _pre_t;\n+\n+    //controller\n+\tdouble _kpj, _kdj; //joint P,D gain\n+    double _x_kp; // task control P gain\n+\n+    void JointControl();\n+    void CLIK();\n+\n+    // robotmodel\n+    CModel Model;\n+\n+    int _cnt_plan;\n+\tVectorXd _time_plan;\n+\tVectorXi _bool_plan;\n+\n+    int _control_mode; //1: joint space, 2: operational space\n+    VectorXd _q_home; // joint home position\n+\n+    //motion trajectory\n+\tdouble _start_time, _end_time, _motion_time;\n+\n+    CTrajectory JointTrajectory; // joint space trajectory\n+    HTrajectory HandTrajectory; // task space trajectory\n+\n+    bool _bool_joint_motion, _bool_ee_motion; // motion check\n+\n+    VectorXd _q_des, _qdot_des; \n+    VectorXd _q_goal, _qdot_goal;\n+    VectorXd _x_des_hand, _xdot_des_hand;\n+    VectorXd _x_goal_hand, _xdot_goal_hand;\n+    Vector3d _pos_goal_hand, _rpy_goal_hand;\n+\n+    MatrixXd _A_diagonal; // diagonal inertia matrix\n+    MatrixXd _J_hands; // jacobian matrix\n+    MatrixXd _J_bar_hands; // pseudo invere jacobian matrix\n+\n+    VectorXd _x_hand, _xdot_hand; // End-effector\n+\n+\n+    VectorXd _x_err_hand;\n+    Matrix3d _R_des_hand;\n+\n+    MatrixXd _I; // Identity matrix\n+\n+    ////////////////////////////////////////\n+    MatrixXd txt_position, txt_velocity;\n+    VectorXd txt_nsecs;\n+    int _size;\n+    ////////////////////////////////////////\n+    float rand_FloatRange(float a, float b);\n+    ////////////////////save_stack/////////////////\n+    void save_stack();\n+    bool check_save_log_once, save_q_once;\n+    ostringstream filename;\n+    ifstream weight0;\n+    ofstream output;\n+    VectorXd _min_joint_position, _max_joint_position, _q_home_old, _q_acc, _old_torque, _mppi, _qdotdot_des;\n+    MatrixXd _q_acc_matrix;\n+    double log_output[2000000], prevent_duplicate, _tmp;\n+    int check_7, a , cnt2, _rat, _ratt, ratrat, timestep_cnt, _cnt_mppi;\n+    ///////////////////////////////load weight////////////////\n+    void load_weight();\n+    // double _input[7]; // input node\n+\tdouble _hidden0[100]; // hidden layer 1\n+\tdouble _hidden1[100]; // hidden layer 2\t\n+\tdouble _weight0[7][100]; // weight 1\n+\tdouble _weight1[100];   // bias 1\n+\tdouble _weight2[100][100]; // weight 2\n+\tdouble _weight3[100];   // bias 2\n+\tdouble _weight4[100]; // weight 3\n+\tdouble _weight5;   // bias 3\n+    \n+    int _nodes, tempcheck, NconOCollX, diff_all, clock, _nconminuscnt, _nconcnt, NconXCollO;\n+    void test_LR(int check);\n+\n+    double sel_;\n+    // int time_cnt;\n+    // double time_check, max_time_check[500];\n+    // int _nconminuscnt, _nconcnt, NconXCollO;\n+\n+};\n+\n+#endif\n\\ No newline at end of file\n"
                },
                {
                    "date": 1693557967479,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,9 @@\n     void reset_target(double motion_time, VectorXd target_joint_position);\n     void reset_target(double motion_time, VectorXd target_joint_position, VectorXd target_joint_velocity);\n     void reset_target(double motion_time, Vector3d target_pos, Vector3d target_ori);\n \n-    VectorXd _torque, _pre_q, _pre_qdot, _pre_qdotdot_des; // joint torque\n+    VectorXd _torque, _pre_q, _pre_qdot; // joint torque\n     VectorXd tmp_q;\n \n     int _k; // DOF\n \n@@ -131,333 +131,5 @@\n     // int _nconminuscnt, _nconcnt, NconXCollO;\n \n };\n \n-#endif\n-#pragma once\n-#ifndef __CONTROLLER_H\n-#define __CONTROLLER_H\n-\n-// #include <iostream>\n-#include <eigen3/Eigen/Dense>\n-#include <rbdl/rbdl.h>\n-#include <rbdl/addons/urdfreader/urdfreader.h>\n-\n-#include \"robotmodel.h\"\n-#include \"trajectory.h\"\n-#include \"custommath.h\"\n-\n-using namespace std;\n-using namespace Eigen;\n-\n-#define NECS2SEC 1000000000\n-\n-class CController\n-{\n-\n-public:\n-    CController();\n-    virtual ~CController();\t\n-\n-    void read(double time, double* q, double* qdot);\n-    void control_mujoco();\n-    void write(double* torque);\n-    \n-    double _output1;\n-    VectorXd _q, _qdot, _q_order;\n-    // VectorXd _q; // joint angle\n-\t// VectorXd _qdot; // joint velocity\n-\n-\n-    // void read_pybind(double time, std::array<double,7> qpos, std::array<double, 7> qvel);\n-    void read_pybind(double time, std::array<double,7> qpos, std::array<double, 7> qvel, std::array<double, 3> alpha);\n-    // void read_pybind(double time, std::array<double,7> qpos, std::array<double, 7> qvel, double alpha);\n-    std::vector<double> write_pybind();\n-    std::vector<double> state_for_pybind();\n-    std::vector<double> torque_command;\n-    std::vector<double> X_data_for_pybind;\n-    void Initialize();\n-    void reset_goal_pybind();\n-    // read_pybind(double t, std::array<double,15> q, std::array<double, 15> qdot, double alpha)\n-\n-\n-\n-    \n-    double  _goal_pos_cuda[7], _returnArray[71], _q_for_cuda[7], _qdot_for_cuda[7];\n-    double tmp_pos_array[35], tmp_vel_array[35];\n-    double _alpha[1], _beta[1], _time_rl[1];\n-\n-private:\n-    \n-    void ModelUpdate();\n-    void motionPlan();\n-\n-    void reset_target(double motion_time, VectorXd target_joint_position);\n-    void reset_target(double motion_time, VectorXd target_joint_position, VectorXd target_joint_velocity);\n-    void reset_target(double motion_time, Vector3d target_pos, Vector3d target_ori);\n-\n-    // void readJointState();\n-    int _cnt, tmp_signal;\n-\t// tmp_signal\n-\n-\n-    \n-    VectorXd _torque, _pre_q, _pre_qdot, _pre_qdotdot_des; // joint torque\n-    VectorXd tmp_q;\n-\n-    int _k; // DOF\n-\n-    bool _bool_init;\n-    double _t;\n-    double _dt;\n-\tdouble _init_t;\n-\tdouble _pre_t;\n-\n-    //controller\n-\tdouble _kpj, _kdj; //joint P,D gain\n-    double _x_kp; // task control P gain\n-\n-    void JointControl();\n-    void CLIK();\n-\n-    // robotmodel\n-    CModel Model;\n-\n-    int _cnt_plan;\n-\tVectorXd _time_plan;\n-\tVectorXi _bool_plan;\n-\n-    int _control_mode; //1: joint space, 2: operational space\n-    VectorXd _q_home; // joint home position\n-\n-    //motion trajectory\n-\tdouble _start_time, _end_time, _motion_time;\n-\n-    CTrajectory JointTrajectory; // joint space trajectory\n-    HTrajectory HandTrajectory; // task space trajectory\n-\n-    bool _bool_joint_motion, _bool_ee_motion; // motion check\n-\n-    VectorXd _q_des, _qdot_des; \n-    VectorXd _q_goal, _qdot_goal;\n-    VectorXd _x_des_hand, _xdot_des_hand;\n-    VectorXd _x_goal_hand, _xdot_goal_hand;\n-    Vector3d _pos_goal_hand, _rpy_goal_hand;\n-\n-    MatrixXd _A_diagonal; // diagonal inertia matrix\n-    MatrixXd _J_hands; // jacobian matrix\n-    MatrixXd _J_bar_hands; // pseudo invere jacobian matrix\n-\n-    VectorXd _x_hand, _xdot_hand; // End-effector\n-\n-\n-    VectorXd _x_err_hand;\n-    Matrix3d _R_des_hand;\n-\n-    MatrixXd _I; // Identity matrix\n-\n-    ////////////////////////////////////////\n-    MatrixXd txt_position, txt_velocity;\n-    VectorXd txt_nsecs;\n-    int _size;\n-    ////////////////////////////////////////\n-    float rand_FloatRange(float a, float b);\n-    ////////////////////save_stack/////////////////\n-    void save_stack();\n-    bool check_save_log_once, save_q_once;\n-    ostringstream filename;\n-    ifstream weight0;\n-    ofstream output;\n-    VectorXd _min_joint_position, _max_joint_position, _q_home_old, _q_acc, _old_torque, _mppi, _qdotdot_des;\n-    MatrixXd _q_acc_matrix;\n-    double log_output[2000000], prevent_duplicate, _tmp;\n-    int check_7, a , cnt2, _rat, _ratt, ratrat, timestep_cnt, _cnt_mppi;\n-    ///////////////////////////////load weight////////////////\n-    void load_weight();\n-    // double _input[7]; // input node\n-\tdouble _hidden0[100]; // hidden layer 1\n-\tdouble _hidden1[100]; // hidden layer 2\t\n-\tdouble _weight0[7][100]; // weight 1\n-\tdouble _weight1[100];   // bias 1\n-\tdouble _weight2[100][100]; // weight 2\n-\tdouble _weight3[100];   // bias 2\n-\tdouble _weight4[100]; // weight 3\n-\tdouble _weight5;   // bias 3\n-    \n-    int _nodes, tempcheck, NconOCollX, diff_all, clock, _nconminuscnt, _nconcnt, NconXCollO;\n-    void test_LR(int check);\n-\n-    double sel_;\n-    // int time_cnt;\n-    // double time_check, max_time_check[500];\n-    // int _nconminuscnt, _nconcnt, NconXCollO;\n-\n-};\n-\n-#endif\n-#pragma once\n-#ifndef __CONTROLLER_H\n-#define __CONTROLLER_H\n-\n-// #include <iostream>\n-#include <eigen3/Eigen/Dense>\n-#include <rbdl/rbdl.h>\n-#include <rbdl/addons/urdfreader/urdfreader.h>\n-\n-#include \"robotmodel.h\"\n-#include \"trajectory.h\"\n-#include \"custommath.h\"\n-#include \"cuda.cuh\"\n-#include <signal.h>\n-\n-// #include \"mppi.h\"\n-// #include <fstream>\n-\n-using namespace std;\n-using namespace Eigen;\n-\n-#define NECS2SEC 1000000000\n-\n-class CController\n-{\n-\n-public:\n-    CController();\n-    virtual ~CController();\t\n-\n-    void read(double time, double* q, double* qdot, int check, double *trans_mat_goal);\n-    void control_mujoco();\n-    void write(double* torque);\n-    double estimate_LR(double _input[]);\n-    \n-    double _output1;\n-    VectorXd _q, _qdot, _q_order;\n-    // VectorXd _q; // joint angle\n-\t// VectorXd _qdot; // joint velocity\n-\n-\n-    // void read_pybind(double time, std::array<double,7> qpos, std::array<double, 7> qvel);\n-    void read_pybind(double time, std::array<double,7> qpos, std::array<double, 7> qvel, std::array<double, 3> alpha);\n-    // void read_pybind(double time, std::array<double,7> qpos, std::array<double, 7> qvel, double alpha);\n-    std::vector<double> write_pybind();\n-    std::vector<double> state_for_pybind();\n-    std::vector<double> torque_command;\n-    std::vector<double> X_data_for_pybind;\n-    void Initialize();\n-    void reset_goal_pybind();\n-    // read_pybind(double t, std::array<double,15> q, std::array<double, 15> qdot, double alpha)\n-\n-\n-\n-    \n-    double  _goal_pos_cuda[7], _returnArray[71], _q_for_cuda[7], _qdot_for_cuda[7];\n-    double tmp_pos_array[35], tmp_vel_array[35];\n-    double _alpha[1], _beta[1], _time_rl[1];\n-\n-private:\n-    \n-    void ModelUpdate();\n-    void motionPlan();\n-\n-    void reset_target(double motion_time, VectorXd target_joint_position);\n-    void reset_target(double motion_time, VectorXd target_joint_position, VectorXd target_joint_velocity);\n-    void reset_target(double motion_time, Vector3d target_pos, Vector3d target_ori);\n-\n-    // void readJointState();\n-    int _cnt, tmp_signal;\n-\t// tmp_signal\n-\n-\n-    \n-    VectorXd _torque, _pre_q, _pre_qdot, _pre_qdotdot_des; // joint torque\n-    VectorXd tmp_q;\n-\n-    int _k; // DOF\n-\n-    bool _bool_init;\n-    double _t;\n-    double _dt;\n-\tdouble _init_t;\n-\tdouble _pre_t;\n-\n-    //controller\n-\tdouble _kpj, _kdj; //joint P,D gain\n-    double _x_kp; // task control P gain\n-\n-    void JointControl();\n-    void CLIK();\n-\n-    // robotmodel\n-    CModel Model;\n-\n-    int _cnt_plan;\n-\tVectorXd _time_plan;\n-\tVectorXi _bool_plan;\n-\n-    int _control_mode; //1: joint space, 2: operational space\n-    VectorXd _q_home; // joint home position\n-\n-    //motion trajectory\n-\tdouble _start_time, _end_time, _motion_time;\n-\n-    CTrajectory JointTrajectory; // joint space trajectory\n-    HTrajectory HandTrajectory; // task space trajectory\n-\n-    bool _bool_joint_motion, _bool_ee_motion; // motion check\n-\n-    VectorXd _q_des, _qdot_des; \n-    VectorXd _q_goal, _qdot_goal;\n-    VectorXd _x_des_hand, _xdot_des_hand;\n-    VectorXd _x_goal_hand, _xdot_goal_hand;\n-    Vector3d _pos_goal_hand, _rpy_goal_hand;\n-\n-    MatrixXd _A_diagonal; // diagonal inertia matrix\n-    MatrixXd _J_hands; // jacobian matrix\n-    MatrixXd _J_bar_hands; // pseudo invere jacobian matrix\n-\n-    VectorXd _x_hand, _xdot_hand; // End-effector\n-\n-\n-    VectorXd _x_err_hand;\n-    Matrix3d _R_des_hand;\n-\n-    MatrixXd _I; // Identity matrix\n-\n-    ////////////////////////////////////////\n-    MatrixXd txt_position, txt_velocity;\n-    VectorXd txt_nsecs;\n-    int _size;\n-    ////////////////////////////////////////\n-    float rand_FloatRange(float a, float b);\n-    ////////////////////save_stack/////////////////\n-    void save_stack();\n-    bool check_save_log_once, save_q_once;\n-    ostringstream filename;\n-    ifstream weight0;\n-    ofstream output;\n-    VectorXd _min_joint_position, _max_joint_position, _q_home_old, _q_acc, _old_torque, _mppi, _qdotdot_des;\n-    MatrixXd _q_acc_matrix;\n-    double log_output[2000000], prevent_duplicate, _tmp;\n-    int check_7, a , cnt2, _rat, _ratt, ratrat, timestep_cnt, _cnt_mppi;\n-    ///////////////////////////////load weight////////////////\n-    void load_weight();\n-    // double _input[7]; // input node\n-\tdouble _hidden0[100]; // hidden layer 1\n-\tdouble _hidden1[100]; // hidden layer 2\t\n-\tdouble _weight0[7][100]; // weight 1\n-\tdouble _weight1[100];   // bias 1\n-\tdouble _weight2[100][100]; // weight 2\n-\tdouble _weight3[100];   // bias 2\n-\tdouble _weight4[100]; // weight 3\n-\tdouble _weight5;   // bias 3\n-    \n-    int _nodes, tempcheck, NconOCollX, diff_all, clock, _nconminuscnt, _nconcnt, NconXCollO;\n-    void test_LR(int check);\n-\n-    double sel_;\n-    // int time_cnt;\n-    // double time_check, max_time_check[500];\n-    // int _nconminuscnt, _nconcnt, NconXCollO;\n-\n-};\n-\n #endif\n\\ No newline at end of file\n"
                },
                {
                    "date": 1693558015875,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,10 +40,8 @@\n     void reset_target(double motion_time, VectorXd target_joint_position, VectorXd target_joint_velocity);\n     void reset_target(double motion_time, Vector3d target_pos, Vector3d target_ori);\n \n     VectorXd _torque, _pre_q, _pre_qdot; // joint torque\n-    VectorXd tmp_q;\n-\n     int _k; // DOF\n \n     bool _bool_init;\n     double _t;\n@@ -92,44 +90,7 @@\n     VectorXd _x_err_hand;\n     Matrix3d _R_des_hand;\n \n     MatrixXd _I; // Identity matrix\n-\n-    ////////////////////////////////////////\n-    MatrixXd txt_position, txt_velocity;\n-    VectorXd txt_nsecs;\n-    int _size;\n-    ////////////////////////////////////////\n-    float rand_FloatRange(float a, float b);\n-    ////////////////////save_stack/////////////////\n-    void save_stack();\n-    bool check_save_log_once, save_q_once;\n-    ostringstream filename;\n-    ifstream weight0;\n-    ofstream output;\n-    VectorXd _min_joint_position, _max_joint_position, _q_home_old, _q_acc, _old_torque, _mppi, _qdotdot_des;\n-    MatrixXd _q_acc_matrix;\n-    double log_output[2000000], prevent_duplicate, _tmp;\n-    int check_7, a , cnt2, _rat, _ratt, ratrat, timestep_cnt, _cnt_mppi;\n-    ///////////////////////////////load weight////////////////\n-    void load_weight();\n-    // double _input[7]; // input node\n-\tdouble _hidden0[100]; // hidden layer 1\n-\tdouble _hidden1[100]; // hidden layer 2\t\n-\tdouble _weight0[7][100]; // weight 1\n-\tdouble _weight1[100];   // bias 1\n-\tdouble _weight2[100][100]; // weight 2\n-\tdouble _weight3[100];   // bias 2\n-\tdouble _weight4[100]; // weight 3\n-\tdouble _weight5;   // bias 3\n-    \n-    int _nodes, tempcheck, NconOCollX, diff_all, clock, _nconminuscnt, _nconcnt, NconXCollO;\n-    void test_LR(int check);\n-\n-    double sel_;\n-    // int time_cnt;\n-    // double time_check, max_time_check[500];\n-    // int _nconminuscnt, _nconcnt, NconXCollO;\n-\n };\n \n #endif\n\\ No newline at end of file\n"
                },
                {
                    "date": 1693558513159,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n     void read(double time, double* q, double* qdot);\n     void control_mujoco();\n     void write(double* torque);\n \n-    VectorXd _q, _qdot, _q_order;\n+    VectorXd _q, _qdot, _q_order, _qdot_order;\n \n     void Initialize();\n \n private:\n"
                }
            ],
            "date": 1689746947474,
            "name": "Commit-0",
            "content": "#pragma once\n#ifndef __CONTROLLER_H\n#define __CONTROLLER_H\n\n#include <iostream>\n#include <eigen3/Eigen/Dense>\n#include <rbdl/rbdl.h>\n#include <rbdl/addons/urdfreader/urdfreader.h>\n\n#include \"robotmodel.h\"\n#include \"trajectory.h\"\n#include \"custommath.h\"\n#include \"cuda.cuh\"\n#include <signal.h>\n\n// #include \"mppi.h\"\n#include <fstream>\n\nusing namespace std;\nusing namespace Eigen;\n\n#define NECS2SEC 1000000000\n\nclass CController\n{\n\npublic:\n    CController();\n    virtual ~CController();\t\n\n    void read(double time, double* q, double* qdot, int check, double *trans_mat_goal);\n    void control_mujoco();\n    void write(double* torque);\n    double estimate_LR(double _input[]);\n    double _output1;\n    VectorXd _q, _qdot, _q_order;\n    // VectorXd _q; // joint angle\n\t// VectorXd _qdot; // joint velocity\n\n\n    // void read_pybind(double time, std::array<double,7> qpos, std::array<double, 7> qvel);\n    // std::vector<double> write_pybind();\n    // std::vector<double> torque_command;\n    double  _goal_pos_cuda[7], _returnArray[71], _q_for_cuda[7], _qdot_for_cuda[7];\n    double tmp_pos_array[35], tmp_vel_array[35];\n\nprivate:\n    void Initialize();\n    void ModelUpdate();\n    void motionPlan();\n\n    void reset_target(double motion_time, VectorXd target_joint_position);\n    void reset_target(double motion_time, VectorXd target_joint_position, VectorXd target_joint_velocity);\n    void reset_target(double motion_time, Vector3d target_pos, Vector3d target_ori);\n\n    // void readJointState();\n    int _cnt, tmp_signal;\n\t// tmp_signal\n\n\n    \n    VectorXd _torque, _pre_q, _pre_qdot, _pre_qdotdot_des; // joint torque\n    VectorXd tmp_q;\n\n    int _k; // DOF\n\n    bool _bool_init;\n    double _t;\n    double _dt;\n\tdouble _init_t;\n\tdouble _pre_t;\n\n    //controller\n\tdouble _kpj, _kdj; //joint P,D gain\n    double _x_kp; // task control P gain\n\n    void JointControl();\n    void CLIK();\n\n    // robotmodel\n    CModel Model;\n\n    int _cnt_plan;\n\tVectorXd _time_plan;\n\tVectorXi _bool_plan;\n\n    int _control_mode; //1: joint space, 2: operational space\n    VectorXd _q_home; // joint home position\n\n    //motion trajectory\n\tdouble _start_time, _end_time, _motion_time;\n\n    CTrajectory JointTrajectory; // joint space trajectory\n    HTrajectory HandTrajectory; // task space trajectory\n\n    bool _bool_joint_motion, _bool_ee_motion; // motion check\n\n    VectorXd _q_des, _qdot_des; \n    VectorXd _q_goal, _qdot_goal;\n    VectorXd _x_des_hand, _xdot_des_hand;\n    VectorXd _x_goal_hand, _xdot_goal_hand;\n    Vector3d _pos_goal_hand, _rpy_goal_hand;\n\n    MatrixXd _A_diagonal; // diagonal inertia matrix\n    MatrixXd _J_hands; // jacobian matrix\n    MatrixXd _J_bar_hands; // pseudo invere jacobian matrix\n\n    VectorXd _x_hand, _xdot_hand; // End-effector\n\n\n    VectorXd _x_err_hand;\n    Matrix3d _R_des_hand;\n\n    MatrixXd _I; // Identity matrix\n\n    ////////////////////////////////////////\n    MatrixXd txt_position, txt_velocity;\n    VectorXd txt_nsecs;\n    int _size;\n    ////////////////////////////////////////\n    float rand_FloatRange(float a, float b);\n    ////////////////////save_stack/////////////////\n    void save_stack();\n    bool check_save_log_once, save_q_once;\n    ostringstream filename;\n    ifstream weight0;\n    ofstream output;\n    VectorXd _min_joint_position, _max_joint_position, _q_home_old, _q_acc, _old_torque, _mppi, _qdotdot_des;\n    MatrixXd _q_acc_matrix;\n    double log_output[2000000], prevent_duplicate, _tmp;\n    int check_7, a , cnt2, _rat, _ratt, ratrat, timestep_cnt, _cnt_mppi;\n    ///////////////////////////////load weight////////////////\n    void load_weight();\n    // double _input[7]; // input node\n\tdouble _hidden0[100]; // hidden layer 1\n\tdouble _hidden1[100]; // hidden layer 2\t\n\tdouble _weight0[7][100]; // weight 1\n\tdouble _weight1[100];   // bias 1\n\tdouble _weight2[100][100]; // weight 2\n\tdouble _weight3[100];   // bias 2\n\tdouble _weight4[100]; // weight 3\n\tdouble _weight5;   // bias 3\n    \n    int _nodes, tempcheck, NconOCollX, diff_all, clock, _nconminuscnt, _nconcnt, NconXCollO;\n    void test_LR(int check);\n\n    bool nocheck;\n    // int time_cnt;\n    // double time_check, max_time_check[500];\n    // int _nconminuscnt, _nconcnt, NconXCollO;\n\n};\n\n#endif\n"
        }
    ]
}