{
    "sourceFile": "pybind11/tools/pybind11Tools.cmake",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1691477874365,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1691477879437,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,33 +19,33 @@\n   set(_pybind11_quiet \"\")\n endif()\n \n # If this is the first run, PYTHON_VERSION can stand in for PYBIND11_PYTHON_VERSION\n-# if(NOT DEFINED PYBIND11_PYTHON_VERSION AND DEFINED PYTHON_VERSION)\n-#   message(WARNING \"Set PYBIND11_PYTHON_VERSION to search for a specific version, not \"\n-#                   \"PYTHON_VERSION (which is an output). Assuming that is what you \"\n-#                   \"meant to do and continuing anyway.\")\n-#   set(PYBIND11_PYTHON_VERSION\n-#       \"${PYTHON_VERSION}\"\n-#       CACHE STRING \"Python version to use for compiling modules\")\n-#   unset(PYTHON_VERSION)\n-#   unset(PYTHON_VERSION CACHE)\n-# elseif(DEFINED PYBIND11_PYTHON_VERSION)\n-#   # If this is set as a normal variable, promote it\n-#   set(PYBIND11_PYTHON_VERSION\n-#       \"${PYBIND11_PYTHON_VERSION}\"\n-#       CACHE STRING \"Python version to use for compiling modules\")\n-# else()\n-#   # Make an empty cache variable.\n-#   set(PYBIND11_PYTHON_VERSION\n-#       \"\"\n-#       CACHE STRING \"Python version to use for compiling modules\")\n-# endif()\n+if(NOT DEFINED PYBIND11_PYTHON_VERSION AND DEFINED PYTHON_VERSION)\n+  message(WARNING \"Set PYBIND11_PYTHON_VERSION to search for a specific version, not \"\n+                  \"PYTHON_VERSION (which is an output). Assuming that is what you \"\n+                  \"meant to do and continuing anyway.\")\n+  set(PYBIND11_PYTHON_VERSION\n+      \"${PYTHON_VERSION}\"\n+      CACHE STRING \"Python version to use for compiling modules\")\n+  unset(PYTHON_VERSION)\n+  unset(PYTHON_VERSION CACHE)\n+elseif(DEFINED PYBIND11_PYTHON_VERSION)\n+  # If this is set as a normal variable, promote it\n+  set(PYBIND11_PYTHON_VERSION\n+      \"${PYBIND11_PYTHON_VERSION}\"\n+      CACHE STRING \"Python version to use for compiling modules\")\n+else()\n+  # Make an empty cache variable.\n+  set(PYBIND11_PYTHON_VERSION\n+      \"\"\n+      CACHE STRING \"Python version to use for compiling modules\")\n+endif()\n \n-# # A user can set versions manually too\n-# set(Python_ADDITIONAL_VERSIONS\n-#     \"3.11;3.10;3.9;3.8;3.7;3.6\"\n-#     CACHE INTERNAL \"\")\n+# A user can set versions manually too\n+set(Python_ADDITIONAL_VERSIONS\n+    \"3.11;3.10;3.9;3.8;3.7;3.6\"\n+    CACHE INTERNAL \"\")\n \n list(APPEND CMAKE_MODULE_PATH \"${CMAKE_CURRENT_LIST_DIR}\")\n find_package(PythonLibsNew ${PYBIND11_PYTHON_VERSION} MODULE REQUIRED ${_pybind11_quiet})\n list(REMOVE_AT CMAKE_MODULE_PATH -1)\n"
                },
                {
                    "date": 1691478050900,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,11 +41,11 @@\n       CACHE STRING \"Python version to use for compiling modules\")\n endif()\n \n # A user can set versions manually too\n-set(Python_ADDITIONAL_VERSIONS\n-    \"3.11;3.10;3.9;3.8;3.7;3.6\"\n-    CACHE INTERNAL \"\")\n+# set(Python_ADDITIONAL_VERSIONS\n+#     \"3.11;3.10;3.9;3.8;3.7;3.6\"\n+#     CACHE INTERNAL \"\")\n \n list(APPEND CMAKE_MODULE_PATH \"${CMAKE_CURRENT_LIST_DIR}\")\n find_package(PythonLibsNew ${PYBIND11_PYTHON_VERSION} MODULE REQUIRED ${_pybind11_quiet})\n list(REMOVE_AT CMAKE_MODULE_PATH -1)\n"
                },
                {
                    "date": 1691478073395,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,28 +19,28 @@\n   set(_pybind11_quiet \"\")\n endif()\n \n # If this is the first run, PYTHON_VERSION can stand in for PYBIND11_PYTHON_VERSION\n-if(NOT DEFINED PYBIND11_PYTHON_VERSION AND DEFINED PYTHON_VERSION)\n-  message(WARNING \"Set PYBIND11_PYTHON_VERSION to search for a specific version, not \"\n-                  \"PYTHON_VERSION (which is an output). Assuming that is what you \"\n-                  \"meant to do and continuing anyway.\")\n-  set(PYBIND11_PYTHON_VERSION\n-      \"${PYTHON_VERSION}\"\n-      CACHE STRING \"Python version to use for compiling modules\")\n-  unset(PYTHON_VERSION)\n-  unset(PYTHON_VERSION CACHE)\n-elseif(DEFINED PYBIND11_PYTHON_VERSION)\n-  # If this is set as a normal variable, promote it\n-  set(PYBIND11_PYTHON_VERSION\n-      \"${PYBIND11_PYTHON_VERSION}\"\n-      CACHE STRING \"Python version to use for compiling modules\")\n-else()\n-  # Make an empty cache variable.\n-  set(PYBIND11_PYTHON_VERSION\n-      \"\"\n-      CACHE STRING \"Python version to use for compiling modules\")\n-endif()\n+# if(NOT DEFINED PYBIND11_PYTHON_VERSION AND DEFINED PYTHON_VERSION)\n+#   message(WARNING \"Set PYBIND11_PYTHON_VERSION to search for a specific version, not \"\n+#                   \"PYTHON_VERSION (which is an output). Assuming that is what you \"\n+#                   \"meant to do and continuing anyway.\")\n+#   set(PYBIND11_PYTHON_VERSION\n+#       \"${PYTHON_VERSION}\"\n+#       CACHE STRING \"Python version to use for compiling modules\")\n+#   unset(PYTHON_VERSION)\n+#   unset(PYTHON_VERSION CACHE)\n+# elseif(DEFINED PYBIND11_PYTHON_VERSION)\n+#   # If this is set as a normal variable, promote it\n+#   set(PYBIND11_PYTHON_VERSION\n+#       \"${PYBIND11_PYTHON_VERSION}\"\n+#       CACHE STRING \"Python version to use for compiling modules\")\n+# else()\n+#   # Make an empty cache variable.\n+#   set(PYBIND11_PYTHON_VERSION\n+#       \"\"\n+#       CACHE STRING \"Python version to use for compiling modules\")\n+# endif()\n \n # A user can set versions manually too\n # set(Python_ADDITIONAL_VERSIONS\n #     \"3.11;3.10;3.9;3.8;3.7;3.6\"\n"
                },
                {
                    "date": 1691478090823,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,33 +19,33 @@\n   set(_pybind11_quiet \"\")\n endif()\n \n # If this is the first run, PYTHON_VERSION can stand in for PYBIND11_PYTHON_VERSION\n-# if(NOT DEFINED PYBIND11_PYTHON_VERSION AND DEFINED PYTHON_VERSION)\n-#   message(WARNING \"Set PYBIND11_PYTHON_VERSION to search for a specific version, not \"\n-#                   \"PYTHON_VERSION (which is an output). Assuming that is what you \"\n-#                   \"meant to do and continuing anyway.\")\n-#   set(PYBIND11_PYTHON_VERSION\n-#       \"${PYTHON_VERSION}\"\n-#       CACHE STRING \"Python version to use for compiling modules\")\n-#   unset(PYTHON_VERSION)\n-#   unset(PYTHON_VERSION CACHE)\n-# elseif(DEFINED PYBIND11_PYTHON_VERSION)\n-#   # If this is set as a normal variable, promote it\n-#   set(PYBIND11_PYTHON_VERSION\n-#       \"${PYBIND11_PYTHON_VERSION}\"\n-#       CACHE STRING \"Python version to use for compiling modules\")\n-# else()\n-#   # Make an empty cache variable.\n-#   set(PYBIND11_PYTHON_VERSION\n-#       \"\"\n-#       CACHE STRING \"Python version to use for compiling modules\")\n-# endif()\n+if(NOT DEFINED PYBIND11_PYTHON_VERSION AND DEFINED PYTHON_VERSION)\n+  message(WARNING \"Set PYBIND11_PYTHON_VERSION to search for a specific version, not \"\n+                  \"PYTHON_VERSION (which is an output). Assuming that is what you \"\n+                  \"meant to do and continuing anyway.\")\n+  set(PYBIND11_PYTHON_VERSION\n+      \"${PYTHON_VERSION}\"\n+      CACHE STRING \"Python version to use for compiling modules\")\n+  unset(PYTHON_VERSION)\n+  unset(PYTHON_VERSION CACHE)\n+elseif(DEFINED PYBIND11_PYTHON_VERSION)\n+  # If this is set as a normal variable, promote it\n+  set(PYBIND11_PYTHON_VERSION\n+      \"${PYBIND11_PYTHON_VERSION}\"\n+      CACHE STRING \"Python version to use for compiling modules\")\n+else()\n+  # Make an empty cache variable.\n+  set(PYBIND11_PYTHON_VERSION\n+      \"\"\n+      CACHE STRING \"Python version to use for compiling modules\")\n+endif()\n \n # A user can set versions manually too\n-# set(Python_ADDITIONAL_VERSIONS\n-#     \"3.11;3.10;3.9;3.8;3.7;3.6\"\n-#     CACHE INTERNAL \"\")\n+set(Python_ADDITIONAL_VERSIONS\n+    \"3.11;3.10;3.9;3.8;3.7;3.6\"\n+    CACHE INTERNAL \"\")\n \n list(APPEND CMAKE_MODULE_PATH \"${CMAKE_CURRENT_LIST_DIR}\")\n find_package(PythonLibsNew ${PYBIND11_PYTHON_VERSION} MODULE REQUIRED ${_pybind11_quiet})\n list(REMOVE_AT CMAKE_MODULE_PATH -1)\n@@ -82,9 +82,9 @@\n           CACHE INTERNAL \"\")\n     endif()\n     message(STATUS \"PYPY ${PYPY_VERSION} (Py ${PYTHON_VERSION})\")\n   else()\n-    message(STATUS \"PYTHON ${PYTHON_VERSION}\")\n+    # message(STATUS \"PYTHON ${PYTHON_VERSION}\")\n   endif()\n endif()\n \n # Only add Python for build - must be added during the import for config since\n"
                }
            ],
            "date": 1691477874365,
            "name": "Commit-0",
            "content": "# tools/pybind11Tools.cmake -- Build system for the pybind11 modules\n#\n# Copyright (c) 2020 Wenzel Jakob <wenzel.jakob@epfl.ch>\n#\n# All rights reserved. Use of this source code is governed by a\n# BSD-style license that can be found in the LICENSE file.\n\n# include_guard(global) (pre-CMake 3.10)\nif(TARGET pybind11::python_headers)\n  return()\nendif()\n\n# Built-in in CMake 3.5+\ninclude(CMakeParseArguments)\n\nif(pybind11_FIND_QUIETLY)\n  set(_pybind11_quiet QUIET)\nelse()\n  set(_pybind11_quiet \"\")\nendif()\n\n# If this is the first run, PYTHON_VERSION can stand in for PYBIND11_PYTHON_VERSION\n# if(NOT DEFINED PYBIND11_PYTHON_VERSION AND DEFINED PYTHON_VERSION)\n#   message(WARNING \"Set PYBIND11_PYTHON_VERSION to search for a specific version, not \"\n#                   \"PYTHON_VERSION (which is an output). Assuming that is what you \"\n#                   \"meant to do and continuing anyway.\")\n#   set(PYBIND11_PYTHON_VERSION\n#       \"${PYTHON_VERSION}\"\n#       CACHE STRING \"Python version to use for compiling modules\")\n#   unset(PYTHON_VERSION)\n#   unset(PYTHON_VERSION CACHE)\n# elseif(DEFINED PYBIND11_PYTHON_VERSION)\n#   # If this is set as a normal variable, promote it\n#   set(PYBIND11_PYTHON_VERSION\n#       \"${PYBIND11_PYTHON_VERSION}\"\n#       CACHE STRING \"Python version to use for compiling modules\")\n# else()\n#   # Make an empty cache variable.\n#   set(PYBIND11_PYTHON_VERSION\n#       \"\"\n#       CACHE STRING \"Python version to use for compiling modules\")\n# endif()\n\n# # A user can set versions manually too\n# set(Python_ADDITIONAL_VERSIONS\n#     \"3.11;3.10;3.9;3.8;3.7;3.6\"\n#     CACHE INTERNAL \"\")\n\nlist(APPEND CMAKE_MODULE_PATH \"${CMAKE_CURRENT_LIST_DIR}\")\nfind_package(PythonLibsNew ${PYBIND11_PYTHON_VERSION} MODULE REQUIRED ${_pybind11_quiet})\nlist(REMOVE_AT CMAKE_MODULE_PATH -1)\n\n# Makes a normal variable a cached variable\nmacro(_PYBIND11_PROMOTE_TO_CACHE NAME)\n  set(_tmp_ptc \"${${NAME}}\")\n  # CMake 3.21 complains if a cached variable is shadowed by a normal one\n  unset(${NAME})\n  set(${NAME}\n      \"${_tmp_ptc}\"\n      CACHE INTERNAL \"\")\nendmacro()\n\n# Cache variables so pybind11_add_module can be used in parent projects\n_pybind11_promote_to_cache(PYTHON_INCLUDE_DIRS)\n_pybind11_promote_to_cache(PYTHON_LIBRARIES)\n_pybind11_promote_to_cache(PYTHON_MODULE_PREFIX)\n_pybind11_promote_to_cache(PYTHON_MODULE_EXTENSION)\n_pybind11_promote_to_cache(PYTHON_VERSION_MAJOR)\n_pybind11_promote_to_cache(PYTHON_VERSION_MINOR)\n_pybind11_promote_to_cache(PYTHON_VERSION)\n_pybind11_promote_to_cache(PYTHON_IS_DEBUG)\n\nif(PYBIND11_MASTER_PROJECT)\n  if(PYTHON_MODULE_EXTENSION MATCHES \"pypy\")\n    if(NOT DEFINED PYPY_VERSION)\n      execute_process(\n        COMMAND ${PYTHON_EXECUTABLE} -c\n                [=[import sys; sys.stdout.write(\".\".join(map(str, sys.pypy_version_info[:3])))]=]\n        OUTPUT_VARIABLE pypy_version)\n      set(PYPY_VERSION\n          ${pypy_version}\n          CACHE INTERNAL \"\")\n    endif()\n    message(STATUS \"PYPY ${PYPY_VERSION} (Py ${PYTHON_VERSION})\")\n  else()\n    message(STATUS \"PYTHON ${PYTHON_VERSION}\")\n  endif()\nendif()\n\n# Only add Python for build - must be added during the import for config since\n# it has to be re-discovered.\n#\n# This needs to be an target to it is included after the local pybind11\n# directory, just in case there are multiple versions of pybind11, we want the\n# one we expect.\nadd_library(pybind11::python_headers INTERFACE IMPORTED)\nset_property(TARGET pybind11::python_headers PROPERTY INTERFACE_INCLUDE_DIRECTORIES\n                                                      \"$<BUILD_INTERFACE:${PYTHON_INCLUDE_DIRS}>\")\nset_property(\n  TARGET pybind11::pybind11\n  APPEND\n  PROPERTY INTERFACE_LINK_LIBRARIES pybind11::python_headers)\n\nset(pybind11_INCLUDE_DIRS\n    \"${pybind11_INCLUDE_DIR}\" \"${PYTHON_INCLUDE_DIRS}\"\n    CACHE INTERNAL \"Directories where pybind11 and possibly Python headers are located\")\n\n# Python debug libraries expose slightly different objects before 3.8\n# https://docs.python.org/3.6/c-api/intro.html#debugging-builds\n# https://stackoverflow.com/questions/39161202/how-to-work-around-missing-pymodule-create2-in-amd64-win-python35-d-lib\nif(PYTHON_IS_DEBUG)\n  set_property(\n    TARGET pybind11::pybind11\n    APPEND\n    PROPERTY INTERFACE_COMPILE_DEFINITIONS Py_DEBUG)\nendif()\n\n# The <3.11 code here does not support release/debug builds at the same time, like on vcpkg\nif(CMAKE_VERSION VERSION_LESS 3.11)\n  set_property(\n    TARGET pybind11::module\n    APPEND\n    PROPERTY\n      INTERFACE_LINK_LIBRARIES\n      pybind11::python_link_helper\n      \"$<$<OR:$<PLATFORM_ID:Windows>,$<PLATFORM_ID:Cygwin>>:$<BUILD_INTERFACE:${PYTHON_LIBRARIES}>>\"\n  )\n\n  set_property(\n    TARGET pybind11::embed\n    APPEND\n    PROPERTY INTERFACE_LINK_LIBRARIES pybind11::pybind11 $<BUILD_INTERFACE:${PYTHON_LIBRARIES}>)\nelse()\n  # The IMPORTED INTERFACE library here is to ensure that \"debug\" and \"release\" get processed outside\n  # of a generator expression - https://gitlab.kitware.com/cmake/cmake/-/issues/18424, as they are\n  # target_link_library keywords rather than real libraries.\n  add_library(pybind11::_ClassicPythonLibraries IMPORTED INTERFACE)\n  target_link_libraries(pybind11::_ClassicPythonLibraries INTERFACE ${PYTHON_LIBRARIES})\n  target_link_libraries(\n    pybind11::module\n    INTERFACE\n      pybind11::python_link_helper\n      \"$<$<OR:$<PLATFORM_ID:Windows>,$<PLATFORM_ID:Cygwin>>:pybind11::_ClassicPythonLibraries>\")\n\n  target_link_libraries(pybind11::embed INTERFACE pybind11::pybind11\n                                                  pybind11::_ClassicPythonLibraries)\nendif()\n\nfunction(pybind11_extension name)\n  # The prefix and extension are provided by FindPythonLibsNew.cmake\n  set_target_properties(${name} PROPERTIES PREFIX \"${PYTHON_MODULE_PREFIX}\"\n                                           SUFFIX \"${PYTHON_MODULE_EXTENSION}\")\nendfunction()\n\n# Build a Python extension module:\n# pybind11_add_module(<name> [MODULE | SHARED] [EXCLUDE_FROM_ALL]\n#                     [NO_EXTRAS] [THIN_LTO] [OPT_SIZE] source1 [source2 ...])\n#\nfunction(pybind11_add_module target_name)\n  set(options \"MODULE;SHARED;EXCLUDE_FROM_ALL;NO_EXTRAS;SYSTEM;THIN_LTO;OPT_SIZE\")\n  cmake_parse_arguments(ARG \"${options}\" \"\" \"\" ${ARGN})\n\n  if(ARG_MODULE AND ARG_SHARED)\n    message(FATAL_ERROR \"Can't be both MODULE and SHARED\")\n  elseif(ARG_SHARED)\n    set(lib_type SHARED)\n  else()\n    set(lib_type MODULE)\n  endif()\n\n  if(ARG_EXCLUDE_FROM_ALL)\n    set(exclude_from_all EXCLUDE_FROM_ALL)\n  else()\n    set(exclude_from_all \"\")\n  endif()\n\n  add_library(${target_name} ${lib_type} ${exclude_from_all} ${ARG_UNPARSED_ARGUMENTS})\n\n  target_link_libraries(${target_name} PRIVATE pybind11::module)\n\n  if(ARG_SYSTEM)\n    message(\n      STATUS\n        \"Warning: this does not have an effect - use NO_SYSTEM_FROM_IMPORTED if using imported targets\"\n    )\n  endif()\n\n  pybind11_extension(${target_name})\n\n  # -fvisibility=hidden is required to allow multiple modules compiled against\n  # different pybind versions to work properly, and for some features (e.g.\n  # py::module_local).  We force it on everything inside the `pybind11`\n  # namespace; also turning it on for a pybind module compilation here avoids\n  # potential warnings or issues from having mixed hidden/non-hidden types.\n  if(NOT DEFINED CMAKE_CXX_VISIBILITY_PRESET)\n    set_target_properties(${target_name} PROPERTIES CXX_VISIBILITY_PRESET \"hidden\")\n  endif()\n\n  if(NOT DEFINED CMAKE_CUDA_VISIBILITY_PRESET)\n    set_target_properties(${target_name} PROPERTIES CUDA_VISIBILITY_PRESET \"hidden\")\n  endif()\n\n  if(ARG_NO_EXTRAS)\n    return()\n  endif()\n\n  if(NOT DEFINED CMAKE_INTERPROCEDURAL_OPTIMIZATION)\n    if(ARG_THIN_LTO)\n      target_link_libraries(${target_name} PRIVATE pybind11::thin_lto)\n    else()\n      target_link_libraries(${target_name} PRIVATE pybind11::lto)\n    endif()\n  endif()\n\n  # Use case-insensitive comparison to match the result of $<CONFIG:cfgs>\n  string(TOUPPER \"${CMAKE_BUILD_TYPE}\" uppercase_CMAKE_BUILD_TYPE)\n  if(NOT MSVC AND NOT \"${uppercase_CMAKE_BUILD_TYPE}\" MATCHES DEBUG|RELWITHDEBINFO)\n    pybind11_strip(${target_name})\n  endif()\n\n  if(MSVC)\n    target_link_libraries(${target_name} PRIVATE pybind11::windows_extras)\n  endif()\n\n  if(ARG_OPT_SIZE)\n    target_link_libraries(${target_name} PRIVATE pybind11::opt_size)\n  endif()\nendfunction()\n\n# Provide general way to call common Python commands in \"common\" file.\nset(_Python\n    PYTHON\n    CACHE INTERNAL \"\" FORCE)\n"
        }
    ]
}