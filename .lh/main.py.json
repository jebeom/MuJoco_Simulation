{
    "sourceFile": "main.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1691627723551,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1691627723551,
            "name": "Commit-0",
            "content": "from keras.models import Sequential, load_model\nfrom keras.layers import Dense, SimpleRNN, LSTM, GRU\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom keras.callbacks import EarlyStopping\nfrom keras.callbacks import ModelCheckpoint, ReduceLROnPlateau\nfrom sklearn.preprocessing import StandardScaler\n\nimport time\nimport os\nimport numpy as np\nimport pandas as pd\nimport tensorflow as tf\nimport matplotlib.pyplot as plt\n\nprint(tf.config.list_physical_devices(\"GPU\"))\nos.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'\nos.environ[\"CUDA_VISIBLE_DEVICES\"] = '0'\n\ndf = pd.read_csv(\"save_data/panda_0427.csv\", header=None)\n\ndataset = df.values\nX = dataset[:, 0:7]\nY = dataset[:, 7]\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=2)\n\nmodel = Sequential()\nmodel.add(Dense(32, input_dim=7, activation='relu'))\nmodel.add(Dense(32, activation='relu'))\n# model.add(Dense(100, activation='relu'))\n# model.add(Dense(100, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\nmodel.compile(loss='binary_crossentropy', metrics=['binary_accuracy'],optimizer='adam')\n\nmc = ModelCheckpoint('best_model_panda_mppi_0810.h5', monitor='loss', mode='min', save_best_only=True)\nes = EarlyStopping(monitor='loss', mode='auto', patience=100)\nmodel.fit(X_train, Y_train, epochs=3000, batch_size=4096, callbacks=[mc, es])\nmodel1 = load_model('best_model_panda_mppi_0810.h5')\n# Y_prediction1 = model1.predict(X_test).flatten()\n# Y_prediction2 = model1.predict(X).flatten()\n\n# print(\"binary test_collision_acc : \")\n# print(tf.keras.metrics.BinaryAccuracy()(Y_test, Y_prediction1)) # 1.0\n# print(\"binary total_collision_acc : \")\n# print(tf.keras.metrics.BinaryAccuracy()(Y, Y_prediction2)) # 1.0\n\nweights = model1.get_weights()\n\nnp.savetxt('weight/best_model_panda_mppi_0810[0].txt', weights[0]) # 7 - 32 - 32 - 1\nnp.savetxt('weight/best_model_panda_mppi_0810[1].txt', weights[1]) # 7 - 32 - 32 - 1\nnp.savetxt('weight/best_model_panda_mppi_0810[2].txt', weights[2]) # 7 - 32 - 32 - 1\nnp.savetxt('weight/best_model_panda_mppi_0810[3].txt', weights[3]) # 7 - 32 - 32 - 1\nnp.savetxt('weight/best_model_panda_mppi_0810[4].txt', weights[4]) # 7 - 32 - 32 - 1\nnp.savetxt('weight/best_model_panda_mppi_0810[5].txt', weights[5]) # 7 - 32 - 32 - 1\n\n#np.savetxt('weight/best_model_panda_0427_3[0].txt', weights[0]) # 7 - 64 - 64 - 1\n#np.savetxt('weight/best_model_panda_0427_3[1].txt', weights[1]) # 7 - 64 - 64 - 1\n#np.savetxt('weight/best_model_panda_0427_3[2].txt', weights[2]) # 7 - 64 - 64 - 1\n#np.savetxt('weight/best_model_panda_0427_3[3].txt', weights[3]) # 7 - 64 - 64 - 1\n#np.savetxt('weight/best_model_panda_0427_3[4].txt', weights[4]) # 7 - 64 - 64 - 1\n#np.savetxt('weight/best_model_panda_0427_3[5].txt', weights[5]) # 7 - 64 - 64 - 1\n\n\n# np.savetxt('weight/best_model_panda_0427_2[0].txt', weights[0]) # 7 - 100 - 100 - 1\n# np.savetxt('weight/best_model_panda_0427_2[1].txt', weights[1]) # 7 - 100 - 100 - 1\n# np.savetxt('weight/best_model_panda_0427_2[2].txt', weights[2]) # 7 - 100 - 100 - 1\n# np.savetxt('weight/best_model_panda_0427_2[3].txt', weights[3]) # 7 - 100 - 100 - 1\n# np.savetxt('weight/best_model_panda_0427_2[4].txt', weights[4]) # 7 - 100 - 100 - 1\n# np.savetxt('weight/best_model_panda_0427_2[5].txt', weights[5]) # 7 - 100 - 100 - 1\n# np.savetxt('weight/best_model_0417[6].txt', weights[6])\n# np.savetxt('weight/best_model_0417[7].txt', weights[7])\n# np.savetxt('weight/best_model_0417[8].txt', weights[8])\n# np.savetxt('weight/best_model_0417[9].txt', weights[9])"
        }
    ]
}