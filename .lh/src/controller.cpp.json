{
    "sourceFile": "src/controller.cpp",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 82,
            "patches": [
                {
                    "date": 1689728609049,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1689728719010,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -506,9 +506,9 @@\n \t\t\t\t// tmp_pos_array[i] = _returnArray[i+1];\n \t\t\t\t// tmp_vel_array[i]\n \n \t\t\t\t_q_des(i) = tmp_pos_array[_cnt+i*10];\n-\t\t\t\t_qdot_des(i) = 0.0;\n+\t\t\t\t_qdot_des(i) = tmp_vel_array[_cnt+i*10];\n \t\t\t\t// _qdotdot_des(i) = _returnArray[i+15];\n \t\t\t}\n \t\t\t// cout<<\"time\t\t\t:   \"<<_t<<endl<<endl;\n \t\t\t// // cout<<\"_q_order     :   \"<<_q_order.transpose()<<endl;\n"
                },
                {
                    "date": 1689746997115,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -412,15 +412,15 @@\n \t\t// time_cnt += 1;\n \n \t\t_torque.setZero();\n \t\t// cout<<\"1\"<<endl;\n-\t\tif(_cnt == 0 || _cnt>=10)\n+\t\tif(_cnt == 0 || _cnt>=5)\n \t\t{\n \t\t\tgpuacc.cuda_cal(_q_for_cuda,_qdot_for_cuda, _goal_pos_cuda, 1, _returnArray); // goal, control_mode, return // control_mode = 0 : Joint Space Control, control_mode = 1 : Task Space Control\n \t\t\ttmp_signal = _returnArray[0];\n \t\t\tif(tmp_signal == 0)\n \t\t\t{\n-\t\t\t\tfor(int i = 0; i<70; i++)\n+\t\t\t\tfor(int i = 0; i<35; i++)\n \t\t\t\t{\n \t\t\t\t\ttmp_pos_array[i] = 0;\n \t\t\t\t\ttmp_vel_array[i] = 0;\n \t\t\t\t}\n@@ -428,12 +428,12 @@\n \t\t\telse\n \t\t\t{\n \t\t\t\tfor(int i = 0; i<7; i++)\n \t\t\t\t{\n-\t\t\t\t\tfor(int j = 0; j<10; j++)\n+\t\t\t\t\tfor(int j = 0; j<5; j++)\n \t\t\t\t\t{\n-\t\t\t\t\t\ttmp_pos_array[i*10+j] = _returnArray[j+1+i*10];\n-\t\t\t\t\t\ttmp_vel_array[i*10+j] = _returnArray[j+1+70+i*10];\n+\t\t\t\t\t\ttmp_pos_array[i*5+j] = _returnArray[j+1+i*5];\n+\t\t\t\t\t\ttmp_vel_array[i*5+j] = _returnArray[j+1+35+i*5];\n \t\t\t\t\t}\t\t\t\t\n \t\t\t\t}\n \t\t\t}\t\t\t\n \t\t}\n@@ -505,10 +505,10 @@\n \t\t\t\t_A_diagonal(i, i) = Model._A(i,i);\n \t\t\t\t// tmp_pos_array[i] = _returnArray[i+1];\n \t\t\t\t// tmp_vel_array[i]\n \n-\t\t\t\t_q_des(i) = tmp_pos_array[_cnt+i*10];\n-\t\t\t\t_qdot_des(i) = tmp_vel_array[_cnt+i*10];\n+\t\t\t\t_q_des(i) = tmp_pos_array[_cnt+i*5];\n+\t\t\t\t_qdot_des(i) = tmp_vel_array[_cnt+i*5];\n \t\t\t\t// _qdotdot_des(i) = _returnArray[i+15];\n \t\t\t}\n \t\t\t// cout<<\"time\t\t\t:   \"<<_t<<endl<<endl;\n \t\t\t// // cout<<\"_q_order     :   \"<<_q_order.transpose()<<endl;\n"
                },
                {
                    "date": 1689747012460,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -557,9 +557,9 @@\n \t\t\t\t_bool_plan(_cnt_plan) = 1;\n \t\t\t\t_bool_init = true;\n \t\t\t}\n \t\t\t_cnt++;\n-\t\t\tif(_cnt>=10)\n+\t\t\tif(_cnt>=5)\n \t\t\t{\n \t\t\t\t_cnt = 0;\n \t\t\t}\n \t\t}\n"
                },
                {
                    "date": 1689747140074,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -506,9 +506,9 @@\n \t\t\t\t// tmp_pos_array[i] = _returnArray[i+1];\n \t\t\t\t// tmp_vel_array[i]\n \n \t\t\t\t_q_des(i) = tmp_pos_array[_cnt+i*5];\n-\t\t\t\t_qdot_des(i) = tmp_vel_array[_cnt+i*5];\n+\t\t\t\t_qdot_des(i) = 0;\n \t\t\t\t// _qdotdot_des(i) = _returnArray[i+15];\n \t\t\t}\n \t\t\t// cout<<\"time\t\t\t:   \"<<_t<<endl<<endl;\n \t\t\t// // cout<<\"_q_order     :   \"<<_q_order.transpose()<<endl;\n"
                },
                {
                    "date": 1689747149733,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -506,9 +506,10 @@\n \t\t\t\t// tmp_pos_array[i] = _returnArray[i+1];\n \t\t\t\t// tmp_vel_array[i]\n \n \t\t\t\t_q_des(i) = tmp_pos_array[_cnt+i*5];\n-\t\t\t\t_qdot_des(i) = 0;\n+\t\t\t\t// _qdot_des(i) = tmp_vel_array[_cnt+i*5];\n+\t\t\t\t_qdot_des(i) = 0.0;\n \t\t\t\t// _qdotdot_des(i) = _returnArray[i+15];\n \t\t\t}\n \t\t\t// cout<<\"time\t\t\t:   \"<<_t<<endl<<endl;\n \t\t\t// // cout<<\"_q_order     :   \"<<_q_order.transpose()<<endl;\n"
                },
                {
                    "date": 1689747449033,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -384,15 +384,15 @@\n \t\t{\n \t\t\ttmp_q(i) = _goal_pos_cuda[i];\n \t\t}\n \n-\t\t// std::chrono::steady_clock::time_point st_start_time;\n-\t\t// st_start_time = std::chrono::steady_clock::now();\n-\t\t// double control_time_real_ = 0.0;\n-\t\t// gpuacc.cuda_cal(_q_for_cuda,_qdot_for_cuda, _goal_pos_cuda, 1, _returnArray); // goal, control_mode, return // control_mode = 0 : Joint Space Control, control_mode = 1 : Task Space Control\n-\t\t// control_time_real_ = std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::steady_clock::now() - st_start_time).count();\n-\t\t// control_time_real_ = control_time_real_ / 1000;\n-\t\t// cout<<\"all : \"<<control_time_real_<<\"ms\"<<endl<<endl;\n+\t\tstd::chrono::steady_clock::time_point st_start_time;\n+\t\tst_start_time = std::chrono::steady_clock::now();\n+\t\tdouble control_time_real_ = 0.0;\n+\t\tgpuacc.cuda_cal(_q_for_cuda,_qdot_for_cuda, _goal_pos_cuda, 1, _returnArray); // goal, control_mode, return // control_mode = 0 : Joint Space Control, control_mode = 1 : Task Space Control\n+\t\tcontrol_time_real_ = std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::steady_clock::now() - st_start_time).count();\n+\t\tcontrol_time_real_ = control_time_real_ / 1000;\n+\t\tcout<<\"all : \"<<control_time_real_<<\"ms\"<<endl<<endl;\n \t\t// time_check += control_time_real_;\n \t\t// for(int i = 0 ; i<500; i++)\n \t\t// {\n \t\t// \tif(max_time_check[i] < control_time_real_)\n@@ -411,160 +411,63 @@\n \t\t// }\n \t\t// time_cnt += 1;\n \n \t\t_torque.setZero();\n-\t\t// cout<<\"1\"<<endl;\n-\t\tif(_cnt == 0 || _cnt>=5)\n+\t\tfor(int i = 0; i < 7; i++)\n \t\t{\n-\t\t\tgpuacc.cuda_cal(_q_for_cuda,_qdot_for_cuda, _goal_pos_cuda, 1, _returnArray); // goal, control_mode, return // control_mode = 0 : Joint Space Control, control_mode = 1 : Task Space Control\n-\t\t\ttmp_signal = _returnArray[0];\n-\t\t\tif(tmp_signal == 0)\n-\t\t\t{\n-\t\t\t\tfor(int i = 0; i<35; i++)\n-\t\t\t\t{\n-\t\t\t\t\ttmp_pos_array[i] = 0;\n-\t\t\t\t\ttmp_vel_array[i] = 0;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\telse\n-\t\t\t{\n-\t\t\t\tfor(int i = 0; i<7; i++)\n-\t\t\t\t{\n-\t\t\t\t\tfor(int j = 0; j<5; j++)\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttmp_pos_array[i*5+j] = _returnArray[j+1+i*5];\n-\t\t\t\t\t\ttmp_vel_array[i*5+j] = _returnArray[j+1+35+i*5];\n-\t\t\t\t\t}\t\t\t\t\n-\t\t\t\t}\n-\t\t\t}\t\t\t\n+\t\t\t_A_diagonal(i, i) = Model._A(i,i);\n+\t\t\t_q_des(i) = _returnArray[i];\n+\t\t\t_qdot_des(i) = _returnArray[i+7];\n+\t\t\t_qdotdot_des(i) = _returnArray[i+14];\n \t\t}\n-\t\t// cout<<\"2\"<<endl;\n+\n+\n+\t\t// cout<<\"time\t\t\t:   \"<<_t<<endl<<endl;\n+\t\t// // cout<<\"_q_order     :   \"<<_q_order.transpose()<<endl;\n+\t\tcout<<\"_goal_pos_cuda\t\t:   \"<<tmp_q.transpose()<<endl;\n+\t\tcout<<\"_x_hand.transpose()\t:   \"<<_x_hand.transpose()<<endl;\n+\t\tcout<<\"_q_des       \t\t:   \"<<_q_des.transpose()<<endl;\n+\t\tcout<<\"_q           \t\t:   \"<<_q.transpose()<<endl;\n+\t\tcout<<\"_qdot_des    \t\t:   \"<<_qdot_des.transpose()<<endl;\n+\t\tcout<<\"_qdot        \t\t:   \"<<_qdot.transpose()<<endl;\n+\t\tcout<<\"_qdotdot_des \t\t:   \"<<_qdotdot_des.transpose()<<endl<<endl;\n \t\t\n-\t\tif(tmp_signal == 0)\n+\t\tfor(int i= 0; i<7; i++)\n \t\t{\n-\t\t\tfor(int i = 0; i < 7; i++)\n+\t\t\tif(_qdot_des(i) < -0.8)\n \t\t\t{\n-\t\t\t\t_A_diagonal(i, i) = Model._A(i,i);\n-\t\t\t\t_q_des(i) = _returnArray[i+1];\n-\t\t\t\t_qdot_des(i) = _returnArray[i+8];\n-\t\t\t\t_qdotdot_des(i) = _returnArray[i+15];\n+\t\t\t\t_qdot_des(i) = -0.8;\n \t\t\t}\n-\n-\n-\t\t\t// cout<<\"time\t\t\t:   \"<<_t<<endl<<endl;\n-\t\t\t// // cout<<\"_q_order     :   \"<<_q_order.transpose()<<endl;\n-\t\t\t// cout<<\"_goal_pos_cuda\t\t:   \"<<tmp_q.transpose()<<endl;\n-\t\t\t// cout<<\"_x_hand.transpose()\t:   \"<<_x_hand.transpose()<<endl;\n-\t\t\t// cout<<\"_q_des       \t\t:   \"<<_q_des.transpose()<<endl;\n-\t\t\t// cout<<\"_q           \t\t:   \"<<_q.transpose()<<endl;\n-\t\t\t// cout<<\"_qdot_des    \t\t:   \"<<_qdot_des.transpose()<<endl;\n-\t\t\t// cout<<\"_qdot        \t\t:   \"<<_qdot.transpose()<<endl;\n-\t\t\t// cout<<\"_qdotdot_des \t\t:   \"<<_qdotdot_des.transpose()<<endl<<endl;\n-\t\t\t\n-\t\t\tfor(int i= 0; i<7; i++)\n+\t\t\telse if(_qdot_des(i) > 0.8)\n \t\t\t{\n-\t\t\t\tif(_qdot_des(i) < -0.8)\n-\t\t\t\t{\n-\t\t\t\t\t_qdot_des(i) = -0.8;\n-\t\t\t\t}\n-\t\t\t\telse if(_qdot_des(i) > 0.8)\n-\t\t\t\t{\n-\t\t\t\t\t_qdot_des(i) = 0.8;\n-\t\t\t\t}\n-\t\t\t\tif(i<4)\n-\t\t\t\t{\n-\t\t\t\t\tif(i == 1)\n-\t\t\t\t\t{\n-\t\t\t\t\t\t_torque(i) = 2000 * (_q_des(i) - _q(i)) + 50 * (_qdot_des(i) - _qdot(i)) + Model._bg(i);\t\n-\t\t\t\t\t}\n-\t\t\t\t\telse\n-\t\t\t\t\t{\n-\t\t\t\t\t\t_torque(i) = 1200 * (_q_des(i) - _q(i)) + 20 * (_qdot_des(i) - _qdot(i)) + Model._bg(i);\n-\t\t\t\t\t}\t\t\t\t\n-\t\t\t\t}\n-\t\t\t\telse\n-\t\t\t\t{\n-\t\t\t\t\t_torque(i) = 200 * (_q_des(i) - _q(i)) + 10 * (_qdot_des(i) - _qdot(i)) + Model._bg(i);\n-\t\t\t\t}\n-\t\t\t\t// 400 2500 1500 1700 700 500 520\n+\t\t\t\t_qdot_des(i) = 0.8;\n \t\t\t}\n-\t\t\t\n-\t\t\t// _torque = 200 * (_q_des - _q) + 1 * (_qdot_des - _qdot) + Model._bg;\n-\t\t\t// _torque = Model._A * (400 * (_q_des - _q) + 40 * (_qdot_des - _qdot) )+ Model._bg;\n-\t\t\t\n-\t\t\tif (JointTrajectory.check_trajectory_complete() == 1)\n+\t\t\tif(i<4)\n \t\t\t{\n-\t\t\t\t_bool_plan(_cnt_plan) = 1;\n-\t\t\t\t_bool_init = true;\n-\t\t\t}\n-\t\t\t_cnt = 0;\n-\t\t}\n-\t\telse\n-\t\t{\n-\t\t\tfor(int i = 0; i < 7; i++)\n-\t\t\t{\n-\t\t\t\t_A_diagonal(i, i) = Model._A(i,i);\n-\t\t\t\t// tmp_pos_array[i] = _returnArray[i+1];\n-\t\t\t\t// tmp_vel_array[i]\n-\n-\t\t\t\t_q_des(i) = tmp_pos_array[_cnt+i*5];\n-\t\t\t\t// _qdot_des(i) = tmp_vel_array[_cnt+i*5];\n-\t\t\t\t_qdot_des(i) = 0.0;\n-\t\t\t\t// _qdotdot_des(i) = _returnArray[i+15];\n-\t\t\t}\n-\t\t\t// cout<<\"time\t\t\t:   \"<<_t<<endl<<endl;\n-\t\t\t// // cout<<\"_q_order     :   \"<<_q_order.transpose()<<endl;\n-\t\t\tcout<<\"_cnt\t\t\t\t\t:   \"<<_cnt<<endl;\n-\t\t\tcout<<\"_goal_pos_cuda\t\t:   \"<<tmp_q.transpose()<<endl;\n-\t\t\tcout<<\"_x_hand.transpose()\t:   \"<<_x_hand.transpose()<<endl;\n-\t\t\tcout<<\"_q_des       \t\t:   \"<<_q_des.transpose()<<endl;\n-\t\t\tcout<<\"_q           \t\t:   \"<<_q.transpose()<<endl;\n-\t\t\tcout<<\"_qdot_des    \t\t:   \"<<_qdot_des.transpose()<<endl;\n-\t\t\tcout<<\"_qdot        \t\t:   \"<<_qdot.transpose()<<endl<<endl;\n-\t\t\t// cout<<\"_qdotdot_des \t\t:   \"<<_qdotdot_des.transpose()<<endl<<endl;\n-\t\t\t\n-\t\t\tfor(int i= 0; i<7; i++)\n-\t\t\t{\n-\t\t\t\tif(_qdot_des(i) < -0.8)\n+\t\t\t\tif(i == 1)\n \t\t\t\t{\n-\t\t\t\t\t_qdot_des(i) = -0.8;\n+\t\t\t\t\t_torque(i) = 2000 * (_q_des(i) - _q(i)) + 50 * (_qdot_des(i) - _qdot(i)) + Model._bg(i);\t\n \t\t\t\t}\n-\t\t\t\telse if(_qdot_des(i) > 0.8)\n-\t\t\t\t{\n-\t\t\t\t\t_qdot_des(i) = 0.8;\n-\t\t\t\t}\n-\t\t\t\tif(i<4)\n-\t\t\t\t{\n-\t\t\t\t\tif(i == 1)\n-\t\t\t\t\t{\n-\t\t\t\t\t\t_torque(i) = 2000 * (_q_des(i) - _q(i)) + 50 * (_qdot_des(i) - _qdot(i)) + Model._bg(i);\t\n-\t\t\t\t\t}\n-\t\t\t\t\telse\n-\t\t\t\t\t{\n-\t\t\t\t\t\t_torque(i) = 1200 * (_q_des(i) - _q(i)) + 20 * (_qdot_des(i) - _qdot(i)) + Model._bg(i);\n-\t\t\t\t\t}\t\t\t\t\n-\t\t\t\t}\n \t\t\t\telse\n \t\t\t\t{\n-\t\t\t\t\t_torque(i) = 200 * (_q_des(i) - _q(i)) + 10 * (_qdot_des(i) - _qdot(i)) + Model._bg(i);\n-\t\t\t\t}\n-\t\t\t\t// 400 2500 1500 1700 700 500 520\n+\t\t\t\t\t_torque(i) = 1200 * (_q_des(i) - _q(i)) + 20 * (_qdot_des(i) - _qdot(i)) + Model._bg(i);\n+\t\t\t\t}\t\t\t\t\n \t\t\t}\n-\t\t\t\n-\t\t\t// _torque = 200 * (_q_des - _q) + 1 * (_qdot_des - _qdot) + Model._bg;\n-\t\t\t// _torque = Model._A * (400 * (_q_des - _q) + 40 * (_qdot_des - _qdot) )+ Model._bg;\n-\t\t\t\n-\t\t\tif (JointTrajectory.check_trajectory_complete() == 1)\n+\t\t\telse\n \t\t\t{\n-\t\t\t\t_bool_plan(_cnt_plan) = 1;\n-\t\t\t\t_bool_init = true;\n+\t\t\t\t_torque(i) = 200 * (_q_des(i) - _q(i)) + 10 * (_qdot_des(i) - _qdot(i)) + Model._bg(i);\n \t\t\t}\n-\t\t\t_cnt++;\n-\t\t\tif(_cnt>=5)\n-\t\t\t{\n-\t\t\t\t_cnt = 0;\n-\t\t\t}\n+\t\t\t// 400 2500 1500 1700 700 500 520\n \t\t}\n+\t\t\n+\t\t// _torque = 200 * (_q_des - _q) + 1 * (_qdot_des - _qdot) + Model._bg;\n+\t\t// _torque = Model._A * (400 * (_q_des - _q) + 40 * (_qdot_des - _qdot) )+ Model._bg;\n+\t\t\n+\t\tif (JointTrajectory.check_trajectory_complete() == 1)\n+\t\t{\n+\t\t\t_bool_plan(_cnt_plan) = 1;\n+\t\t\t_bool_init = true;\n+\t\t}\n \t}\n }\n \n void CController::ModelUpdate()\n@@ -745,10 +648,8 @@\n void CController::Initialize()\n {\n \tmemset(_q_for_cuda, 0, _JDOF * sizeof(double));\n \tmemset(_qdot_for_cuda, 0, _JDOF * sizeof(double));\n-\t_cnt = 0;\n-\ttmp_signal = 0;\n \n \t// time_cnt = 1;\n \t// time_check = 0.0;\n \t// max_time_check = 0.0;\n"
                },
                {
                    "date": 1689748036735,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -457,9 +457,33 @@\n \t\t\t\t_torque(i) = 200 * (_q_des(i) - _q(i)) + 10 * (_qdot_des(i) - _qdot(i)) + Model._bg(i);\n \t\t\t}\n \t\t\t// 400 2500 1500 1700 700 500 520\n \t\t}\n+\t\tdouble tmp_abs = 0.0;\n+\t\tfor(int i = 0; i<3; i++)\n+\t\t{\n+\t\t\ttmp_abs += abs(tmp_q(i)-_x_hand(i));\n+\t\t}\n \t\t\n+\t\tif(tmp_abs<=0.03)\n+\t\t{\n+\t\t\tx_err_hand.segment(0,3) = tmp_q.head(3) - _x_hand.head(3);\n+\t\t\t_x_err_hand.segment(3,3) = -CustomMath::getPhi(Model._R_hand, _R_des_hand);\n+\n+\t\t\t_J_bar_hands = CustomMath::pseudoInverseQR(_J_hands);\n+\t\t\t// _J_bar_hands = CustomMath::DampedWeightedPseudoInverse(_J_hands,_I*0.01,true);\n+\n+\n+\t\t\t_qdot_des = _J_bar_hands*(_xdot_des_hand + _x_kp*(_x_err_hand));\n+\t\t\t_q_des = _q + _dt*_qdot_des;\n+\n+\n+\t\t\tfor(int i = 0; i < 7; i++){\n+\t\t\t\t_A_diagonal(i,i) = Model._A(i,i);\n+\t\t\t}\n+\n+\t\t\t_torque = _A_diagonal*(_kpj*(_q_des - _q) + _kdj*(_qdot_des - _qdot)) + Model._bg;\n+\t\t}\n \t\t// _torque = 200 * (_q_des - _q) + 1 * (_qdot_des - _qdot) + Model._bg;\n \t\t// _torque = Model._A * (400 * (_q_des - _q) + 40 * (_qdot_des - _qdot) )+ Model._bg;\n \t\t\n \t\tif (JointTrajectory.check_trajectory_complete() == 1)\n"
                },
                {
                    "date": 1689748103314,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -462,9 +462,9 @@\n \t\tfor(int i = 0; i<3; i++)\n \t\t{\n \t\t\ttmp_abs += abs(tmp_q(i)-_x_hand(i));\n \t\t}\n-\t\t\n+\t\t_R_des_hand = GetBodyRotationMatrix(tmp_q(3),tmp_q(4),tmp_q(5));\n \t\tif(tmp_abs<=0.03)\n \t\t{\n \t\t\tx_err_hand.segment(0,3) = tmp_q.head(3) - _x_hand.head(3);\n \t\t\t_x_err_hand.segment(3,3) = -CustomMath::getPhi(Model._R_hand, _R_des_hand);\n"
                },
                {
                    "date": 1689748114130,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -462,9 +462,9 @@\n \t\tfor(int i = 0; i<3; i++)\n \t\t{\n \t\t\ttmp_abs += abs(tmp_q(i)-_x_hand(i));\n \t\t}\n-\t\t_R_des_hand = GetBodyRotationMatrix(tmp_q(3),tmp_q(4),tmp_q(5));\n+\t\t_R_des_hand = CustomMath::GetBodyRotationMatrix(tmp_q(3),tmp_q(4),tmp_q(5));\n \t\tif(tmp_abs<=0.03)\n \t\t{\n \t\t\tx_err_hand.segment(0,3) = tmp_q.head(3) - _x_hand.head(3);\n \t\t\t_x_err_hand.segment(3,3) = -CustomMath::getPhi(Model._R_hand, _R_des_hand);\n"
                },
                {
                    "date": 1689748135625,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -465,9 +465,9 @@\n \t\t}\n \t\t_R_des_hand = CustomMath::GetBodyRotationMatrix(tmp_q(3),tmp_q(4),tmp_q(5));\n \t\tif(tmp_abs<=0.03)\n \t\t{\n-\t\t\tx_err_hand.segment(0,3) = tmp_q.head(3) - _x_hand.head(3);\n+\t\t\t_x_err_hand.segment(0,3) = tmp_q.head(3) - _x_hand.head(3);\n \t\t\t_x_err_hand.segment(3,3) = -CustomMath::getPhi(Model._R_hand, _R_des_hand);\n \n \t\t\t_J_bar_hands = CustomMath::pseudoInverseQR(_J_hands);\n \t\t\t// _J_bar_hands = CustomMath::DampedWeightedPseudoInverse(_J_hands,_I*0.01,true);\n"
                },
                {
                    "date": 1689748299748,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -200,8 +200,13 @@\n \tsignal(SIGINT, signalHandler);\n \n     ModelUpdate();\n     motionPlan();\n+\t\t\tdouble tmp_abs = 0.0;\n+\t\tfor(int i = 0; i<3; i++)\n+\t\t{\n+\t\t\ttmp_abs += abs(tmp_q(i)-_x_hand(i));\n+\t\t}\n \tif(_control_mode == 1) //joint space control\n \t{\n \t\tif (_t - _init_t < 0.1 && _bool_joint_motion == false)\n \t\t{\n@@ -457,33 +462,33 @@\n \t\t\t\t_torque(i) = 200 * (_q_des(i) - _q(i)) + 10 * (_qdot_des(i) - _qdot(i)) + Model._bg(i);\n \t\t\t}\n \t\t\t// 400 2500 1500 1700 700 500 520\n \t\t}\n-\t\tdouble tmp_abs = 0.0;\n-\t\tfor(int i = 0; i<3; i++)\n-\t\t{\n-\t\t\ttmp_abs += abs(tmp_q(i)-_x_hand(i));\n-\t\t}\n-\t\t_R_des_hand = CustomMath::GetBodyRotationMatrix(tmp_q(3),tmp_q(4),tmp_q(5));\n-\t\tif(tmp_abs<=0.03)\n-\t\t{\n-\t\t\t_x_err_hand.segment(0,3) = tmp_q.head(3) - _x_hand.head(3);\n-\t\t\t_x_err_hand.segment(3,3) = -CustomMath::getPhi(Model._R_hand, _R_des_hand);\n+\t\t// double tmp_abs = 0.0;\n+\t\t// for(int i = 0; i<3; i++)\n+\t\t// {\n+\t\t// \ttmp_abs += abs(tmp_q(i)-_x_hand(i));\n+\t\t// }\n+\t\t// _R_des_hand = CustomMath::GetBodyRotationMatrix(tmp_q(3),tmp_q(4),tmp_q(5));\n+\t\t// if(tmp_abs<=0.03)\n+\t\t// {\n+\t\t// \t_x_err_hand.segment(0,3) = tmp_q.head(3) - _x_hand.head(3);\n+\t\t// \t_x_err_hand.segment(3,3) = -CustomMath::getPhi(Model._R_hand, _R_des_hand);\n \n-\t\t\t_J_bar_hands = CustomMath::pseudoInverseQR(_J_hands);\n-\t\t\t// _J_bar_hands = CustomMath::DampedWeightedPseudoInverse(_J_hands,_I*0.01,true);\n+\t\t// \t_J_bar_hands = CustomMath::pseudoInverseQR(_J_hands);\n+\t\t// \t// _J_bar_hands = CustomMath::DampedWeightedPseudoInverse(_J_hands,_I*0.01,true);\n \n \n-\t\t\t_qdot_des = _J_bar_hands*(_xdot_des_hand + _x_kp*(_x_err_hand));\n-\t\t\t_q_des = _q + _dt*_qdot_des;\n+\t\t// \t_qdot_des = _J_bar_hands*(_xdot_des_hand + _x_kp*(_x_err_hand));\n+\t\t// \t_q_des = _q + _dt*_qdot_des;\n \n \n-\t\t\tfor(int i = 0; i < 7; i++){\n-\t\t\t\t_A_diagonal(i,i) = Model._A(i,i);\n-\t\t\t}\n+\t\t// \tfor(int i = 0; i < 7; i++){\n+\t\t// \t\t_A_diagonal(i,i) = Model._A(i,i);\n+\t\t// \t}\n \n-\t\t\t_torque = _A_diagonal*(_kpj*(_q_des - _q) + _kdj*(_qdot_des - _qdot)) + Model._bg;\n-\t\t}\n+\t\t// \t_torque = _A_diagonal*(_kpj*(_q_des - _q) + _kdj*(_qdot_des - _qdot)) + Model._bg;\n+\t\t// }\n \t\t// _torque = 200 * (_q_des - _q) + 1 * (_qdot_des - _qdot) + Model._bg;\n \t\t// _torque = Model._A * (400 * (_q_des - _q) + 40 * (_qdot_des - _qdot) )+ Model._bg;\n \t\t\n \t\tif (JointTrajectory.check_trajectory_complete() == 1)\n"
                },
                {
                    "date": 1689748329968,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -200,13 +200,23 @@\n \tsignal(SIGINT, signalHandler);\n \n     ModelUpdate();\n     motionPlan();\n-\t\t\tdouble tmp_abs = 0.0;\n-\t\tfor(int i = 0; i<3; i++)\n-\t\t{\n-\t\t\ttmp_abs += abs(tmp_q(i)-_x_hand(i));\n-\t\t}\n+\tdouble tmp_abs = 0.0;\n+\tfor(int i = 0; i<3; i++)\n+\t{\n+\t\ttmp_abs += abs(tmp_q(i)-_x_hand(i));\n+\t}\n+\n+\tif(tmp_abs<=0.03)\n+\t{\n+\t\t_control_mode = 2;\n+\t}\n+\telse\n+\t{\n+\t\t_control_mode = 3;\n+\t}\n+\n \tif(_control_mode == 1) //joint space control\n \t{\n \t\tif (_t - _init_t < 0.1 && _bool_joint_motion == false)\n \t\t{\n"
                },
                {
                    "date": 1689748407527,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -203,14 +203,21 @@\n     motionPlan();\n \tdouble tmp_abs = 0.0;\n \tfor(int i = 0; i<3; i++)\n \t{\n-\t\ttmp_abs += abs(tmp_q(i)-_x_hand(i));\n+\t\ttmp_abs += abs(_goal_pos_cuda[i]-_x_hand(i));\n \t}\n \n \tif(tmp_abs<=0.03)\n \t{\n \t\t_control_mode = 2;\n+\t\tfor(int i = 0; i<6; i++)\n+\t\t{\n+\t\t\t_x_goal_hand(i) = _goal_pos_cuda[i];\n+\t\t\t_xdot_goal_hand(i) = 0.0;\n+\t\t}\n+\t\t\n+\t\tHandTrajectory.update_goal(_x_goal_hand, _xdot_goal_hand, _end_time);\n \t}\n \telse\n \t{\n \t\t_control_mode = 3;\n"
                },
                {
                    "date": 1689748423393,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -213,11 +213,10 @@\n \t\tfor(int i = 0; i<6; i++)\n \t\t{\n \t\t\t_x_goal_hand(i) = _goal_pos_cuda[i];\n \t\t\t_xdot_goal_hand(i) = 0.0;\n+\t\t\t_end_time = _t+1.0;\n \t\t}\n-\t\t\n-\t\tHandTrajectory.update_goal(_x_goal_hand, _xdot_goal_hand, _end_time);\n \t}\n \telse\n \t{\n \t\t_control_mode = 3;\n"
                },
                {
                    "date": 1689748514878,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -412,26 +412,8 @@\n \t\tgpuacc.cuda_cal(_q_for_cuda,_qdot_for_cuda, _goal_pos_cuda, 1, _returnArray); // goal, control_mode, return // control_mode = 0 : Joint Space Control, control_mode = 1 : Task Space Control\n \t\tcontrol_time_real_ = std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::steady_clock::now() - st_start_time).count();\n \t\tcontrol_time_real_ = control_time_real_ / 1000;\n \t\tcout<<\"all : \"<<control_time_real_<<\"ms\"<<endl<<endl;\n-\t\t// time_check += control_time_real_;\n-\t\t// for(int i = 0 ; i<500; i++)\n-\t\t// {\n-\t\t// \tif(max_time_check[i] < control_time_real_)\n-\t\t// \t{\n-\t\t// \t\tif(i == 499)\n-\t\t// \t\t{\n-\t\t// \t\t\tmax_time_check[i] = control_time_real_;\t\t\t\t\n-\t\t// \t\t}\n-\t\t// \t\telse\n-\t\t// \t\t{\n-\t\t// \t\t\tmax_time_check[i+1] = max_time_check[i];\n-\t\t// \t\t\tmax_time_check[i] = control_time_real_;\t\t\t\t\n-\t\t// \t\t}\n-\t\t// \t\tbreak;\n-\t\t// \t}\t\t\t\n-\t\t// }\n-\t\t// time_cnt += 1;\n \n \t\t_torque.setZero();\n \t\tfor(int i = 0; i < 7; i++)\n \t\t{\n@@ -440,11 +422,8 @@\n \t\t\t_qdot_des(i) = _returnArray[i+7];\n \t\t\t_qdotdot_des(i) = _returnArray[i+14];\n \t\t}\n \n-\n-\t\t// cout<<\"time\t\t\t:   \"<<_t<<endl<<endl;\n-\t\t// // cout<<\"_q_order     :   \"<<_q_order.transpose()<<endl;\n \t\tcout<<\"_goal_pos_cuda\t\t:   \"<<tmp_q.transpose()<<endl;\n \t\tcout<<\"_x_hand.transpose()\t:   \"<<_x_hand.transpose()<<endl;\n \t\tcout<<\"_q_des       \t\t:   \"<<_q_des.transpose()<<endl;\n \t\tcout<<\"_q           \t\t:   \"<<_q.transpose()<<endl;\n"
                },
                {
                    "date": 1689748521387,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -455,37 +455,9 @@\n \t\t\telse\n \t\t\t{\n \t\t\t\t_torque(i) = 200 * (_q_des(i) - _q(i)) + 10 * (_qdot_des(i) - _qdot(i)) + Model._bg(i);\n \t\t\t}\n-\t\t\t// 400 2500 1500 1700 700 500 520\n \t\t}\n-\t\t// double tmp_abs = 0.0;\n-\t\t// for(int i = 0; i<3; i++)\n-\t\t// {\n-\t\t// \ttmp_abs += abs(tmp_q(i)-_x_hand(i));\n-\t\t// }\n-\t\t// _R_des_hand = CustomMath::GetBodyRotationMatrix(tmp_q(3),tmp_q(4),tmp_q(5));\n-\t\t// if(tmp_abs<=0.03)\n-\t\t// {\n-\t\t// \t_x_err_hand.segment(0,3) = tmp_q.head(3) - _x_hand.head(3);\n-\t\t// \t_x_err_hand.segment(3,3) = -CustomMath::getPhi(Model._R_hand, _R_des_hand);\n-\n-\t\t// \t_J_bar_hands = CustomMath::pseudoInverseQR(_J_hands);\n-\t\t// \t// _J_bar_hands = CustomMath::DampedWeightedPseudoInverse(_J_hands,_I*0.01,true);\n-\n-\n-\t\t// \t_qdot_des = _J_bar_hands*(_xdot_des_hand + _x_kp*(_x_err_hand));\n-\t\t// \t_q_des = _q + _dt*_qdot_des;\n-\n-\n-\t\t// \tfor(int i = 0; i < 7; i++){\n-\t\t// \t\t_A_diagonal(i,i) = Model._A(i,i);\n-\t\t// \t}\n-\n-\t\t// \t_torque = _A_diagonal*(_kpj*(_q_des - _q) + _kdj*(_qdot_des - _qdot)) + Model._bg;\n-\t\t// }\n-\t\t// _torque = 200 * (_q_des - _q) + 1 * (_qdot_des - _qdot) + Model._bg;\n-\t\t// _torque = Model._A * (400 * (_q_des - _q) + 40 * (_qdot_des - _qdot) )+ Model._bg;\n \t\t\n \t\tif (JointTrajectory.check_trajectory_complete() == 1)\n \t\t{\n \t\t\t_bool_plan(_cnt_plan) = 1;\n"
                },
                {
                    "date": 1689748530847,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -457,13 +457,13 @@\n \t\t\t\t_torque(i) = 200 * (_q_des(i) - _q(i)) + 10 * (_qdot_des(i) - _qdot(i)) + Model._bg(i);\n \t\t\t}\n \t\t}\n \t\t\n-\t\tif (JointTrajectory.check_trajectory_complete() == 1)\n-\t\t{\n-\t\t\t_bool_plan(_cnt_plan) = 1;\n-\t\t\t_bool_init = true;\n-\t\t}\n+\t\t// if (JointTrajectory.check_trajectory_complete() == 1)\n+\t\t// {\n+\t\t// \t_bool_plan(_cnt_plan) = 1;\n+\t\t// \t_bool_init = true;\n+\t\t// }\n \t}\n }\n \n void CController::ModelUpdate()\n"
                },
                {
                    "date": 1689748547119,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -283,124 +283,21 @@\n \t\tCLIK();\n \t}\n \telse if(_control_mode == 3) //MPPI\n \t{\n-\t\tif (_t - _init_t < 0.1 && _bool_joint_motion == false)\n-\t\t{\n-\t\t\t_start_time = _init_t;\n-\t\t\t_end_time = _start_time + _motion_time;\n-\t\t\tJointTrajectory.reset_initial(_start_time, _q, _qdot);\n-\t\t\tJointTrajectory.update_goal(_q_goal, _qdot_goal, _end_time);\n-\t\t\t_bool_joint_motion = true;\n-\t\t\t_bool_plan(_cnt_plan) = 0;\n-\t\t\t// Mppi.Trajectory_init(_q_order);\n-\t\t\t// _cnt_mppi = 20;\n-\t\t}\n-\n-\t\tJointTrajectory.update_time(_t);\n-\t\t\n-\n-\t\t// if(_cnt_mppi == 20)\n+\t\t// if (_t - _init_t < 0.1 && _bool_joint_motion == false)\n \t\t// {\n-\t\t\t\n-\n-\t\t// \t_q_acc_matrix = Mppi.MPPI_mat(_q,_qdot);\n-\t\t// \t_cnt_mppi = 0;\n-\t\t// \t// _mppi = Mppi.MPPI_vec(_q,_qdot);\n-\n-\t\t\t\n-\t\t\n-\t\t\t\n+\t\t// \t_start_time = _init_t;\n+\t\t// \t_end_time = _start_time + _motion_time;\n+\t\t// \tJointTrajectory.reset_initial(_start_time, _q, _qdot);\n+\t\t// \tJointTrajectory.update_goal(_q_goal, _qdot_goal, _end_time);\n+\t\t// \t_bool_joint_motion = true;\n+\t\t// \t_bool_plan(_cnt_plan) = 0;\n+\t\t// \t// Mppi.Trajectory_init(_q_order);\n+\t\t// \t// _cnt_mppi = 20;\n \t\t// }\n-\t\t// cout<<\"??\"<<endl;\n-\t\t\n-\t\t////////////////////////////////////////////////////////////////////////////////////////////\n-\t\t\n-\t\t// _mppi = Mppi.MPPI_vec(_q,_qdot);\n-\t\t\n \n-\t\t// double tmp_q[7];\n-\t\t// for(int i = 0; i<6; i++)\n-\t\t// {\n-\t\t// \t_goal_pos_cuda[i] = _q_order(i);\n-\t\t// \t// tmp_q[i] = _q(i);\n-\t\t// }\n-\n-\t\t// if(_t<10.0)\n-\t\t// {\n-\t\t// \t_goal_pos_cuda[0] = 0.309;\n-\t\t// \t_goal_pos_cuda[1] = -0.115;\n-\t\t// \t_goal_pos_cuda[2] = 0.325;\n-\t\t// \t_goal_pos_cuda[3] = 0.148;\n-\t\t// \t_goal_pos_cuda[4] = 0.400;\n-\t\t// \t_goal_pos_cuda[5] = -1.392;\n-\t\t// }\n-\t\t// else if(_t>=10.0 & _t< 20.0)\n-\t\t// {\n-\t\t// \t_goal_pos_cuda[0] = -0.240;\n-\t\t// \t_goal_pos_cuda[1] = 0.171;\n-\t\t// \t_goal_pos_cuda[2] = 0.667;\n-\t\t// \t_goal_pos_cuda[3] = 0.960;\n-\t\t// \t_goal_pos_cuda[4] = -0.400;\n-\t\t// \t_goal_pos_cuda[5] = 1.717;\n-\n-\t\t// }\n-\n-\t\t// else if(_t>=20.0 & _t< 30.0)\n-\t\t// {\n-\t\t\t\n-\t\t// \t_goal_pos_cuda[0] = 0.318;\n-\t\t// \t_goal_pos_cuda[1] = -0.118;\n-\t\t// \t_goal_pos_cuda[2] = 1.053;\n-\t\t// \t_goal_pos_cuda[3] = 0.372;\n-\t\t// \t_goal_pos_cuda[4] = -0.950;\n-\t\t// \t_goal_pos_cuda[5] = -0.186;\t\n-\t\t// }\n-\n-\t\t// else if(_t>=30.0 & _t< 40.0)\n-\t\t// {\n-\t\t// \t_goal_pos_cuda[0] = -0.565;\n-\t\t// \t_goal_pos_cuda[1] = -0.364;\n-\t\t// \t_goal_pos_cuda[2] = 0.262;\n-\t\t// \t_goal_pos_cuda[3] = 0.488;\n-\t\t// \t_goal_pos_cuda[4] = 0.769;\n-\t\t// \t_goal_pos_cuda[5] = -2.487;\t\t\t\n-\t\t// }\n-\n-\t\t// else if(_t>=40.0 & _t< 50.0)\n-\t\t// {\n-\t\t// \t_goal_pos_cuda[0] = -0.240;\n-\t\t// \t_goal_pos_cuda[1] = 0.171;\n-\t\t// \t_goal_pos_cuda[2] = 0.667;\n-\t\t// \t_goal_pos_cuda[3] = 0.960;\n-\t\t// \t_goal_pos_cuda[4] = -0.400;\n-\t\t// \t_goal_pos_cuda[5] = 1.717;\t\t\t\n-\t\t// }\n-\t\t// else\n-\t\t// {\n-\t\t// \t_goal_pos_cuda[0] = 0.291;\n-\t\t// \t_goal_pos_cuda[1] = 0.203;\n-\t\t// \t_goal_pos_cuda[2] = 0.564;\n-\t\t// \t_goal_pos_cuda[3] = 0.541;\n-\t\t// \t_goal_pos_cuda[4] = -0.455;\n-\t\t// \t_goal_pos_cuda[5] = -0.248;\n-\t\t// }\n-\n-\t\t// double _tmp_qdot_des = 0.0;\n-\t\t// double _tmp_x_err = 0.0;\n-\t\t// for(int i  = 0; i<7; i++)\n-\t\t// {\n-\t\t// \t_tmp_qdot_des += _qdot_des(i);\n-\t\t// }\n-\t\t// for(int i  = 0; i<3; i++)\n-\t\t// {\n-\t\t// \t_tmp_x_err += abs(tmp_q(i)-_x_hand(i));\n-\t\t// }\n-\t\t// if(_tmp_x_err > 0.5)\n-\t\t// {\n-\t\t// \tfor(int i = 0; i<)\n-\t\t// \t_q_des\n-\t\t// }\n+\t\t// JointTrajectory.update_time(_t);\n \t\t\n \t\tfor(int i = 0; i<6; i++)\n \t\t{\n \t\t\ttmp_q(i) = _goal_pos_cuda[i];\n"
                },
                {
                    "date": 1689748607349,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -256,22 +256,28 @@\n \t\t}\n \t}\n \telse if(_control_mode == 2)\n \t{\n+\t\tcout<<\"1\"<<endl;\n \t\tif (_t - _init_t < 0.1 && _bool_ee_motion == false)\n \t\t{\n \t\t\t_start_time = _init_t;\n \t\t\t_end_time = _start_time + _motion_time;\n \t\t\tHandTrajectory.reset_initial(_start_time, _x_hand, _xdot_hand);\n \t\t\tHandTrajectory.update_goal(_x_goal_hand, _xdot_goal_hand, _end_time);\n \t\t\t_bool_ee_motion = true;\n+\t\t\tcout<<\"1_1\"<<endl;\n \t\t}\n+\t\tcout<<\"2\"<<endl;\n \n \t\tHandTrajectory.update_time(_t);\n-\n+\t\tcout<<\"3\"<<endl;\n \t\t_x_des_hand.head(3) = HandTrajectory.position_cubicSpline();\n+\t\tcout<<\"4\"<<endl;\n \t\t_R_des_hand = HandTrajectory.rotationCubic();\n+\t\tcout<<\"5\"<<endl;\n \t\t_x_des_hand.segment<3>(3) = CustomMath::GetBodyRotationAngle(_R_des_hand);\n+\t\tcout<<\"6\"<<endl;\n \n \t\t_xdot_des_hand.head(3) = HandTrajectory.velocity_cubicSpline();\n \t\t_xdot_des_hand.segment<3>(3) = HandTrajectory.rotationCubicDot();\n \n"
                },
                {
                    "date": 1689748665914,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -257,8 +257,10 @@\n \t}\n \telse if(_control_mode == 2)\n \t{\n \t\tcout<<\"1\"<<endl;\n+\t\tcout<<\"_init_t\"<<_init_t<<endl;\n+\t\t\n \t\tif (_t - _init_t < 0.1 && _bool_ee_motion == false)\n \t\t{\n \t\t\t_start_time = _init_t;\n \t\t\t_end_time = _start_time + _motion_time;\n"
                },
                {
                    "date": 1689748693799,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -213,9 +213,9 @@\n \t\tfor(int i = 0; i<6; i++)\n \t\t{\n \t\t\t_x_goal_hand(i) = _goal_pos_cuda[i];\n \t\t\t_xdot_goal_hand(i) = 0.0;\n-\t\t\t_end_time = _t+1.0;\n+\t\t\t_motion_time = 1.0;\n \t\t}\n \t}\n \telse\n \t{\n"
                },
                {
                    "date": 1689748766230,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -280,16 +280,21 @@\n \t\t_x_des_hand.segment<3>(3) = CustomMath::GetBodyRotationAngle(_R_des_hand);\n \t\tcout<<\"6\"<<endl;\n \n \t\t_xdot_des_hand.head(3) = HandTrajectory.velocity_cubicSpline();\n+\t\tcout<<\"7\"<<endl;\n \t\t_xdot_des_hand.segment<3>(3) = HandTrajectory.rotationCubicDot();\n+\t\tcout<<\"8\"<<endl;\n \n \t\tif (HandTrajectory.check_trajectory_complete() == 1)\n \t\t{\n \t\t\t_bool_plan(_cnt_plan) = 1;\n \t\t\t_bool_init = true;\n+\t\t\tcout<<\"8_1\"<<endl;\n \t\t}\n+\t\tcout<<\"9\"<<endl;\n \t\tCLIK();\n+\t\tcout<<\"10\"<<endl;\n \t}\n \telse if(_control_mode == 3) //MPPI\n \t{\n \t\t// if (_t - _init_t < 0.1 && _bool_joint_motion == false)\n"
                },
                {
                    "date": 1689748811966,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -199,9 +199,9 @@\n {\n \tsignal(SIGINT, signalHandler);\n \n     ModelUpdate();\n-    motionPlan();\n+    // motionPlan();\n \tdouble tmp_abs = 0.0;\n \tfor(int i = 0; i<3; i++)\n \t{\n \t\ttmp_abs += abs(_goal_pos_cuda[i]-_x_hand(i));\n"
                },
                {
                    "date": 1689749111894,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -204,8 +204,9 @@\n \tdouble tmp_abs = 0.0;\n \tfor(int i = 0; i<3; i++)\n \t{\n \t\ttmp_abs += abs(_goal_pos_cuda[i]-_x_hand(i));\n+\t\t_init_t = _t;\n \t}\n \n \tif(tmp_abs<=0.03)\n \t{\n"
                },
                {
                    "date": 1689749149025,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -204,9 +204,8 @@\n \tdouble tmp_abs = 0.0;\n \tfor(int i = 0; i<3; i++)\n \t{\n \t\ttmp_abs += abs(_goal_pos_cuda[i]-_x_hand(i));\n-\t\t_init_t = _t;\n \t}\n \n \tif(tmp_abs<=0.03)\n \t{\n"
                },
                {
                    "date": 1689749157762,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -209,8 +209,9 @@\n \n \tif(tmp_abs<=0.03)\n \t{\n \t\t_control_mode = 2;\n+\t\t_init_t = _t;\n \t\tfor(int i = 0; i<6; i++)\n \t\t{\n \t\t\t_x_goal_hand(i) = _goal_pos_cuda[i];\n \t\t\t_xdot_goal_hand(i) = 0.0;\n"
                },
                {
                    "date": 1689749181814,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -256,46 +256,31 @@\n \t\t\t_bool_init = true;\n \t\t}\n \t}\n \telse if(_control_mode == 2)\n-\t{\n-\t\tcout<<\"1\"<<endl;\n-\t\tcout<<\"_init_t\"<<_init_t<<endl;\n-\t\t\n+\t{\t\t\n \t\tif (_t - _init_t < 0.1 && _bool_ee_motion == false)\n \t\t{\n \t\t\t_start_time = _init_t;\n \t\t\t_end_time = _start_time + _motion_time;\n \t\t\tHandTrajectory.reset_initial(_start_time, _x_hand, _xdot_hand);\n \t\t\tHandTrajectory.update_goal(_x_goal_hand, _xdot_goal_hand, _end_time);\n \t\t\t_bool_ee_motion = true;\n-\t\t\tcout<<\"1_1\"<<endl;\n \t\t}\n-\t\tcout<<\"2\"<<endl;\n \n \t\tHandTrajectory.update_time(_t);\n-\t\tcout<<\"3\"<<endl;\n \t\t_x_des_hand.head(3) = HandTrajectory.position_cubicSpline();\n-\t\tcout<<\"4\"<<endl;\n \t\t_R_des_hand = HandTrajectory.rotationCubic();\n-\t\tcout<<\"5\"<<endl;\n \t\t_x_des_hand.segment<3>(3) = CustomMath::GetBodyRotationAngle(_R_des_hand);\n-\t\tcout<<\"6\"<<endl;\n-\n \t\t_xdot_des_hand.head(3) = HandTrajectory.velocity_cubicSpline();\n-\t\tcout<<\"7\"<<endl;\n \t\t_xdot_des_hand.segment<3>(3) = HandTrajectory.rotationCubicDot();\n-\t\tcout<<\"8\"<<endl;\n \n \t\tif (HandTrajectory.check_trajectory_complete() == 1)\n \t\t{\n \t\t\t_bool_plan(_cnt_plan) = 1;\n \t\t\t_bool_init = true;\n-\t\t\tcout<<\"8_1\"<<endl;\n \t\t}\n-\t\tcout<<\"9\"<<endl;\n \t\tCLIK();\n-\t\tcout<<\"10\"<<endl;\n \t}\n \telse if(_control_mode == 3) //MPPI\n \t{\n \t\t// if (_t - _init_t < 0.1 && _bool_joint_motion == false)\n"
                },
                {
                    "date": 1689749209842,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -353,13 +353,13 @@\n \t\t\t\t_torque(i) = 200 * (_q_des(i) - _q(i)) + 10 * (_qdot_des(i) - _qdot(i)) + Model._bg(i);\n \t\t\t}\n \t\t}\n \t\t\n-\t\t// if (JointTrajectory.check_trajectory_complete() == 1)\n-\t\t// {\n-\t\t// \t_bool_plan(_cnt_plan) = 1;\n-\t\t// \t_bool_init = true;\n-\t\t// }\n+\t\tif (JointTrajectory.check_trajectory_complete() == 1)\n+\t\t{\n+\t\t\t_bool_plan(_cnt_plan) = 1;\n+\t\t\t_bool_init = true;\n+\t\t}\n \t}\n }\n \n void CController::ModelUpdate()\n"
                },
                {
                    "date": 1689749229092,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -355,9 +355,9 @@\n \t\t}\n \t\t\n \t\tif (JointTrajectory.check_trajectory_complete() == 1)\n \t\t{\n-\t\t\t_bool_plan(_cnt_plan) = 1;\n+\t\t\t// _bool_plan(_cnt_plan) = 1;\n \t\t\t_bool_init = true;\n \t\t}\n \t}\n }\n"
                },
                {
                    "date": 1689749333142,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -563,11 +563,17 @@\n \t_init_t = 0.0;\n \t_pre_t = 0.0;\n \t_dt = 0.0;\n \n-\t_kpj = 400.0;\n-\t_kdj = 40.0;\n+\t// _kpj = 400.0;\n+\t// _kdj = 40.0;\n \n+\t_kpj_diagonal.setZero(_k, _k);\n+\t//\t\t\t\t\t\t\t0 \t\t1\t2\t\t3\t   4\t5 \t6\n+\t_kpj_diagonal.diagonal() << 400., 2500., 1500., 1700., 700., 500., 520.;\n+\t_kdj_diagonal.setZero(_k, _k);\n+\t_kdj_diagonal.diagonal() << 20., 250., 170., 320., 70., 50., 15.;\n+\n \t_x_kp = 20.0;\n \n     _q.setZero(_k);\n \t_qdot.setZero(_k);\n"
                },
                {
                    "date": 1689749340191,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -571,11 +571,11 @@\n \t//\t\t\t\t\t\t\t0 \t\t1\t2\t\t3\t   4\t5 \t6\n \t_kpj_diagonal.diagonal() << 400., 2500., 1500., 1700., 700., 500., 520.;\n \t_kdj_diagonal.setZero(_k, _k);\n \t_kdj_diagonal.diagonal() << 20., 250., 170., 320., 70., 50., 15.;\n+\t_x_kp =1;//작게 0.1\n+\t// _x_kp = 20.0;\n \n-\t_x_kp = 20.0;\n-\n     _q.setZero(_k);\n \t_qdot.setZero(_k);\n \t_torque.setZero(_k);\n \n"
                },
                {
                    "date": 1689749562909,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -530,10 +530,25 @@\n \tfor(int i = 0; i < 7; i++){\n \t\t_A_diagonal(i,i) = Model._A(i,i);\n \t}\n \n-\t_torque = _A_diagonal*(_kpj*(_q_des - _q) + _kdj*(_qdot_des - _qdot)) + Model._bg;\n+\t// _torque = _A_diagonal*(_kpj*(_q_des - _q) + _kdj*(_qdot_des - _qdot)) + Model._bg;\n \n+\t\t_kpj_diagonal.setZero(_k, _k);\n+\t//\t\t\t\t\t\t\t0 \t\t1\t2\t\t3\t   4\t5 \t6\n+\t_kpj_diagonal.diagonal() << 400., 2500., 1500., 1700., 700., 500., 520.;\n+\t_kdj_diagonal.setZero(_k, _k);\n+\t_kdj_diagonal.diagonal() << 20., 250., 170., 320., 70., 50., 15.;\n+\n+\n+\t_torque(0) = 400*(_q_des(0)-_q(0)) + 20*(_qdot_des(0)-_qdot(0)) + Model._bg(0);\n+\t_torque(1) = 2500*(_q_des(1)-_q(1)) + 250*(_qdot_des(1)-_qdot(1)) + Model._bg(1);\n+\t_torque(2) = 1500*(_q_des(2)-_q(2)) + 170*(_qdot_des(2)-_qdot(2)) + Model._bg(2);\n+\t_torque(3) = 1700*(_q_des(3)-_q(3)) + 320*(_qdot_des(3)-_qdot(3)) + Model._bg(3);\n+\t_torque(4) = 700*(_q_des(4)-_q(4)) + 70*(_qdot_des(4)-_qdot(4)) + Model._bg(4);\n+\t_torque(5) = 500*(_q_des(5)-_q(5)) + 50*(_qdot_des(5)-_qdot(5)) + Model._bg(5);\n+\t_torque(6) = 520*(_q_des(6)-_q(6)) + 15*(_qdot_des(6)-_qdot(6)) + Model._bg(6);\n+\n \t// cout << _torque.transpose() << endl;\n \t// _torque =  Model._A*(_kp*(_q_des - _q) + _kd*(_qdot_des - _qdot)) + Model._bg;\n }\n \n"
                },
                {
                    "date": 1689749569602,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -532,13 +532,13 @@\n \t}\n \n \t// _torque = _A_diagonal*(_kpj*(_q_des - _q) + _kdj*(_qdot_des - _qdot)) + Model._bg;\n \n-\t\t_kpj_diagonal.setZero(_k, _k);\n-\t//\t\t\t\t\t\t\t0 \t\t1\t2\t\t3\t   4\t5 \t6\n-\t_kpj_diagonal.diagonal() << 400., 2500., 1500., 1700., 700., 500., 520.;\n-\t_kdj_diagonal.setZero(_k, _k);\n-\t_kdj_diagonal.diagonal() << 20., 250., 170., 320., 70., 50., 15.;\n+\t// \t_kpj_diagonal.setZero(_k, _k);\n+\t// //\t\t\t\t\t\t\t0 \t\t1\t2\t\t3\t   4\t5 \t6\n+\t// _kpj_diagonal.diagonal() << 400., 2500., 1500., 1700., 700., 500., 520.;\n+\t// _kdj_diagonal.setZero(_k, _k);\n+\t// _kdj_diagonal.diagonal() << 20., 250., 170., 320., 70., 50., 15.;\n \n \n \t_torque(0) = 400*(_q_des(0)-_q(0)) + 20*(_qdot_des(0)-_qdot(0)) + Model._bg(0);\n \t_torque(1) = 2500*(_q_des(1)-_q(1)) + 250*(_qdot_des(1)-_qdot(1)) + Model._bg(1);\n"
                },
                {
                    "date": 1689749578855,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -581,13 +581,13 @@\n \n \t// _kpj = 400.0;\n \t// _kdj = 40.0;\n \n-\t_kpj_diagonal.setZero(_k, _k);\n-\t//\t\t\t\t\t\t\t0 \t\t1\t2\t\t3\t   4\t5 \t6\n-\t_kpj_diagonal.diagonal() << 400., 2500., 1500., 1700., 700., 500., 520.;\n-\t_kdj_diagonal.setZero(_k, _k);\n-\t_kdj_diagonal.diagonal() << 20., 250., 170., 320., 70., 50., 15.;\n+\t// _kpj_diagonal.setZero(_k, _k);\n+\t// //\t\t\t\t\t\t\t0 \t\t1\t2\t\t3\t   4\t5 \t6\n+\t// _kpj_diagonal.diagonal() << 400., 2500., 1500., 1700., 700., 500., 520.;\n+\t// _kdj_diagonal.setZero(_k, _k);\n+\t// _kdj_diagonal.diagonal() << 20., 250., 170., 320., 70., 50., 15.;\n \t_x_kp =1;//작게 0.1\n \t// _x_kp = 20.0;\n \n     _q.setZero(_k);\n"
                },
                {
                    "date": 1689749682940,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -578,10 +578,10 @@\n \t_init_t = 0.0;\n \t_pre_t = 0.0;\n \t_dt = 0.0;\n \n-\t// _kpj = 400.0;\n-\t// _kdj = 40.0;\n+\t_kpj = 400.0;\n+\t_kdj = 40.0;\n \n \t// _kpj_diagonal.setZero(_k, _k);\n \t// //\t\t\t\t\t\t\t0 \t\t1\t2\t\t3\t   4\t5 \t6\n \t// _kpj_diagonal.diagonal() << 400., 2500., 1500., 1700., 700., 500., 520.;\n"
                },
                {
                    "date": 1689749693927,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -214,9 +214,9 @@\n \t\tfor(int i = 0; i<6; i++)\n \t\t{\n \t\t\t_x_goal_hand(i) = _goal_pos_cuda[i];\n \t\t\t_xdot_goal_hand(i) = 0.0;\n-\t\t\t_motion_time = 1.0;\n+\t\t\t_motion_time = 5.0;\n \t\t}\n \t}\n \telse\n \t{\n"
                },
                {
                    "date": 1689749727290,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -264,8 +264,9 @@\n \t\t\t_end_time = _start_time + _motion_time;\n \t\t\tHandTrajectory.reset_initial(_start_time, _x_hand, _xdot_hand);\n \t\t\tHandTrajectory.update_goal(_x_goal_hand, _xdot_goal_hand, _end_time);\n \t\t\t_bool_ee_motion = true;\n+\t\t\tcout<<\"??\"<<endl;\n \t\t}\n \n \t\tHandTrajectory.update_time(_t);\n \t\t_x_des_hand.head(3) = HandTrajectory.position_cubicSpline();\n"
                },
                {
                    "date": 1689749811365,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -265,8 +265,9 @@\n \t\t\tHandTrajectory.reset_initial(_start_time, _x_hand, _xdot_hand);\n \t\t\tHandTrajectory.update_goal(_x_goal_hand, _xdot_goal_hand, _end_time);\n \t\t\t_bool_ee_motion = true;\n \t\t\tcout<<\"??\"<<endl;\n+\t\t\tcout<<\"_t : \"<<_t<<endl;\n \t\t}\n \n \t\tHandTrajectory.update_time(_t);\n \t\t_x_des_hand.head(3) = HandTrajectory.position_cubicSpline();\n"
                },
                {
                    "date": 1689749817412,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -264,9 +264,9 @@\n \t\t\t_end_time = _start_time + _motion_time;\n \t\t\tHandTrajectory.reset_initial(_start_time, _x_hand, _xdot_hand);\n \t\t\tHandTrajectory.update_goal(_x_goal_hand, _xdot_goal_hand, _end_time);\n \t\t\t_bool_ee_motion = true;\n-\t\t\tcout<<\"??\"<<endl;\n+\t\t\tcout<<\"??\";\n \t\t\tcout<<\"_t : \"<<_t<<endl;\n \t\t}\n \n \t\tHandTrajectory.update_time(_t);\n"
                },
                {
                    "date": 1689749827888,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -320,15 +320,15 @@\n \t\t\t_qdot_des(i) = _returnArray[i+7];\n \t\t\t_qdotdot_des(i) = _returnArray[i+14];\n \t\t}\n \n-\t\tcout<<\"_goal_pos_cuda\t\t:   \"<<tmp_q.transpose()<<endl;\n-\t\tcout<<\"_x_hand.transpose()\t:   \"<<_x_hand.transpose()<<endl;\n-\t\tcout<<\"_q_des       \t\t:   \"<<_q_des.transpose()<<endl;\n-\t\tcout<<\"_q           \t\t:   \"<<_q.transpose()<<endl;\n-\t\tcout<<\"_qdot_des    \t\t:   \"<<_qdot_des.transpose()<<endl;\n-\t\tcout<<\"_qdot        \t\t:   \"<<_qdot.transpose()<<endl;\n-\t\tcout<<\"_qdotdot_des \t\t:   \"<<_qdotdot_des.transpose()<<endl<<endl;\n+\t\t// cout<<\"_goal_pos_cuda\t\t:   \"<<tmp_q.transpose()<<endl;\n+\t\t// cout<<\"_x_hand.transpose()\t:   \"<<_x_hand.transpose()<<endl;\n+\t\t// cout<<\"_q_des       \t\t:   \"<<_q_des.transpose()<<endl;\n+\t\t// cout<<\"_q           \t\t:   \"<<_q.transpose()<<endl;\n+\t\t// cout<<\"_qdot_des    \t\t:   \"<<_qdot_des.transpose()<<endl;\n+\t\t// cout<<\"_qdot        \t\t:   \"<<_qdot.transpose()<<endl;\n+\t\t// cout<<\"_qdotdot_des \t\t:   \"<<_qdotdot_des.transpose()<<endl<<endl;\n \t\t\n \t\tfor(int i= 0; i<7; i++)\n \t\t{\n \t\t\tif(_qdot_des(i) < -0.8)\n"
                },
                {
                    "date": 1689749962168,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -208,16 +208,22 @@\n \t}\n \n \tif(tmp_abs<=0.03)\n \t{\n-\t\t_control_mode = 2;\n-\t\t_init_t = _t;\n-\t\tfor(int i = 0; i<6; i++)\n+\t\tif(_bool_init == true)\n \t\t{\n-\t\t\t_x_goal_hand(i) = _goal_pos_cuda[i];\n-\t\t\t_xdot_goal_hand(i) = 0.0;\n-\t\t\t_motion_time = 5.0;\n+\t\t\t_control_mode = 2;\n+\t\t\n+\t\t\t_init_t = _t;\n+\t\t\tfor(int i = 0; i<6; i++)\n+\t\t\t{\n+\t\t\t\t_x_goal_hand(i) = _goal_pos_cuda[i];\n+\t\t\t\t_xdot_goal_hand(i) = 0.0;\n+\t\t\t\t_motion_time = 5.0;\n+\t\t\t}\n+\t\t\t_bool_init = false;\n \t\t}\n+\t\t\n \t}\n \telse\n \t{\n \t\t_control_mode = 3;\n@@ -309,9 +315,9 @@\n \t\tdouble control_time_real_ = 0.0;\n \t\tgpuacc.cuda_cal(_q_for_cuda,_qdot_for_cuda, _goal_pos_cuda, 1, _returnArray); // goal, control_mode, return // control_mode = 0 : Joint Space Control, control_mode = 1 : Task Space Control\n \t\tcontrol_time_real_ = std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::steady_clock::now() - st_start_time).count();\n \t\tcontrol_time_real_ = control_time_real_ / 1000;\n-\t\tcout<<\"all : \"<<control_time_real_<<\"ms\"<<endl<<endl;\n+\t\t// cout<<\"all : \"<<control_time_real_<<\"ms\"<<endl<<endl;\n \n \t\t_torque.setZero();\n \t\tfor(int i = 0; i < 7; i++)\n \t\t{\n"
                },
                {
                    "date": 1689750043779,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -219,9 +219,10 @@\n \t\t\t\t_x_goal_hand(i) = _goal_pos_cuda[i];\n \t\t\t\t_xdot_goal_hand(i) = 0.0;\n \t\t\t\t_motion_time = 5.0;\n \t\t\t}\n-\t\t\t_bool_init = false;\n+\t\t\t_bool_joint_motion = false;\n+\t\t\t_bool_ee_motion = false;\n \t\t}\n \t\t\n \t}\n \telse\n"
                },
                {
                    "date": 1689750058785,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -208,23 +208,18 @@\n \t}\n \n \tif(tmp_abs<=0.03)\n \t{\n-\t\tif(_bool_init == true)\n+\t\t_control_mode = 2;\n+\t\t_init_t = _t;\n+\t\tfor(int i = 0; i<6; i++)\n \t\t{\n-\t\t\t_control_mode = 2;\n-\t\t\n-\t\t\t_init_t = _t;\n-\t\t\tfor(int i = 0; i<6; i++)\n-\t\t\t{\n-\t\t\t\t_x_goal_hand(i) = _goal_pos_cuda[i];\n-\t\t\t\t_xdot_goal_hand(i) = 0.0;\n-\t\t\t\t_motion_time = 5.0;\n-\t\t\t}\n-\t\t\t_bool_joint_motion = false;\n-\t\t\t_bool_ee_motion = false;\n+\t\t\t_x_goal_hand(i) = _goal_pos_cuda[i];\n+\t\t\t_xdot_goal_hand(i) = 0.0;\n+\t\t\t_motion_time = 5.0;\n \t\t}\n-\t\t\n+\t\t_bool_joint_motion = false;\n+\t\t_bool_ee_motion = false;\n \t}\n \telse\n \t{\n \t\t_control_mode = 3;\n"
                },
                {
                    "date": 1689750092172,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -208,8 +208,9 @@\n \t}\n \n \tif(tmp_abs<=0.03)\n \t{\n+\n \t\t_control_mode = 2;\n \t\t_init_t = _t;\n \t\tfor(int i = 0; i<6; i++)\n \t\t{\n@@ -218,8 +219,9 @@\n \t\t\t_motion_time = 5.0;\n \t\t}\n \t\t_bool_joint_motion = false;\n \t\t_bool_ee_motion = false;\n+\t\t\n \t}\n \telse\n \t{\n \t\t_control_mode = 3;\n"
                },
                {
                    "date": 1689750147159,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -219,9 +219,9 @@\n \t\t\t_motion_time = 5.0;\n \t\t}\n \t\t_bool_joint_motion = false;\n \t\t_bool_ee_motion = false;\n-\t\t\n+\n \t}\n \telse\n \t{\n \t\t_control_mode = 3;\n@@ -236,18 +236,8 @@\n \t\t\tJointTrajectory.reset_initial(_start_time, _q, _qdot);\n \t\t\tJointTrajectory.update_goal(_q_goal, _qdot_goal, _end_time);\n \t\t\t_bool_joint_motion = true;\n \t\t}\n-\n-\t\t// 여기서 예측을 한다면?\n-\t\t// _start_time ~ _end_time 사이 시간마다 찍고 q를 받아서 적용하고 만약에 문제가 있다면?\n-\t\t// 피하면서 다시 trajec 어떻게 뽑지?\n-\n-\t\t// -->> sampling기반으로 경로를 정해줘야함.\n-\n-\n-\n-\n \t\t\n \t\tJointTrajectory.update_time(_t);\n \t\t_q_des = JointTrajectory.position_cubicSpline();\n \t\t_qdot_des = JointTrajectory.velocity_cubicSpline();\n"
                },
                {
                    "date": 1689750153239,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -217,9 +217,9 @@\n \t\t\t_x_goal_hand(i) = _goal_pos_cuda[i];\n \t\t\t_xdot_goal_hand(i) = 0.0;\n \t\t\t_motion_time = 5.0;\n \t\t}\n-\t\t_bool_joint_motion = false;\n+\t\t// _bool_joint_motion = false;\n \t\t_bool_ee_motion = false;\n \n \t}\n \telse\n"
                },
                {
                    "date": 1689750300362,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -208,19 +208,21 @@\n \t}\n \n \tif(tmp_abs<=0.03)\n \t{\n-\n-\t\t_control_mode = 2;\n-\t\t_init_t = _t;\n-\t\tfor(int i = 0; i<6; i++)\n+\t\tif (_bool_plan(_cnt_plan) == 1)\n \t\t{\n-\t\t\t_x_goal_hand(i) = _goal_pos_cuda[i];\n-\t\t\t_xdot_goal_hand(i) = 0.0;\n-\t\t\t_motion_time = 5.0;\n+\t\t\t_control_mode = 2;\n+\t\t\t_init_t = _t;\n+\t\t\tfor(int i = 0; i<6; i++)\n+\t\t\t{\n+\t\t\t\t_x_goal_hand(i) = _goal_pos_cuda[i];\n+\t\t\t\t_xdot_goal_hand(i) = 0.0;\n+\t\t\t\t_motion_time = 5.0;\n+\t\t\t}\n+\t\t\t// _bool_joint_motion = false;\n+\t\t\t_bool_ee_motion = false;\n \t\t}\n-\t\t// _bool_joint_motion = false;\n-\t\t_bool_ee_motion = false;\n \n \t}\n \telse\n \t{\n"
                },
                {
                    "date": 1689750309618,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -220,10 +220,10 @@\n \t\t\t\t_motion_time = 5.0;\n \t\t\t}\n \t\t\t// _bool_joint_motion = false;\n \t\t\t_bool_ee_motion = false;\n+\t\t\t_bool_plan(_cnt_plan) = 0;\n \t\t}\n-\n \t}\n \telse\n \t{\n \t\t_control_mode = 3;\n"
                },
                {
                    "date": 1689750396384,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -553,9 +553,11 @@\n void CController::Initialize()\n {\n \tmemset(_q_for_cuda, 0, _JDOF * sizeof(double));\n \tmemset(_qdot_for_cuda, 0, _JDOF * sizeof(double));\n+\t\n \n+\n \t// time_cnt = 1;\n \t// time_check = 0.0;\n \t// max_time_check = 0.0;\n \t// memset(max_time_check, 0, 500 * sizeof(double));\n@@ -703,8 +705,10 @@\n \tcout << fixed;\n \tcout.precision(3);\n \t_pre_qdotdot_des.setZero(7);\n \ttmp_q.setZero(6);\n+\t_cnt_plan = 0;\n+\t_bool_plan(_cnt_plan) = 1;\n }\n \n double CController::estimate_LR(double _input[])\n {\n"
                },
                {
                    "date": 1689750499775,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -262,8 +262,10 @@\n \t\t\tHandTrajectory.update_goal(_x_goal_hand, _xdot_goal_hand, _end_time);\n \t\t\t_bool_ee_motion = true;\n \t\t\tcout<<\"??\";\n \t\t\tcout<<\"_t : \"<<_t<<endl;\n+\t\t\tcout<<\"_start_time : \"<<_start_time<<endl;\n+\t\t\tcout<<\"_end_time : \"<<_end_time<<endl;\n \t\t}\n \n \t\tHandTrajectory.update_time(_t);\n \t\t_x_des_hand.head(3) = HandTrajectory.position_cubicSpline();\n"
                },
                {
                    "date": 1689750563026,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -227,8 +227,9 @@\n \telse\n \t{\n \t\t_control_mode = 3;\n \t}\n+\tcout<<\"_control_mode : \" <<_control_mode<<endl;\n \n \tif(_control_mode == 1) //joint space control\n \t{\n \t\tif (_t - _init_t < 0.1 && _bool_joint_motion == false)\n"
                },
                {
                    "date": 1689750570290,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -262,11 +262,11 @@\n \t\t\tHandTrajectory.reset_initial(_start_time, _x_hand, _xdot_hand);\n \t\t\tHandTrajectory.update_goal(_x_goal_hand, _xdot_goal_hand, _end_time);\n \t\t\t_bool_ee_motion = true;\n \t\t\tcout<<\"??\";\n-\t\t\tcout<<\"_t : \"<<_t<<endl;\n-\t\t\tcout<<\"_start_time : \"<<_start_time<<endl;\n-\t\t\tcout<<\"_end_time : \"<<_end_time<<endl;\n+\t\t\t// cout<<\"_t : \"<<_t<<endl;\n+\t\t\t// cout<<\"_start_time : \"<<_start_time<<endl;\n+\t\t\t// cout<<\"_end_time : \"<<_end_time<<endl;\n \t\t}\n \n \t\tHandTrajectory.update_time(_t);\n \t\t_x_des_hand.head(3) = HandTrajectory.position_cubicSpline();\n"
                },
                {
                    "date": 1689750712850,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -227,8 +227,10 @@\n \telse\n \t{\n \t\t_control_mode = 3;\n \t}\n+\t\n+\tcout<<\"tmp_abs : \" <<tmp_abs<<endl;\n \tcout<<\"_control_mode : \" <<_control_mode<<endl;\n \n \tif(_control_mode == 1) //joint space control\n \t{\n"
                },
                {
                    "date": 1689750749344,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -208,11 +208,11 @@\n \t}\n \n \tif(tmp_abs<=0.03)\n \t{\n+\t\t_control_mode = 2;\n \t\tif (_bool_plan(_cnt_plan) == 1)\n \t\t{\n-\t\t\t_control_mode = 2;\n \t\t\t_init_t = _t;\n \t\t\tfor(int i = 0; i<6; i++)\n \t\t\t{\n \t\t\t\t_x_goal_hand(i) = _goal_pos_cuda[i];\n"
                },
                {
                    "date": 1689750787890,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -227,11 +227,8 @@\n \telse\n \t{\n \t\t_control_mode = 3;\n \t}\n-\t\n-\tcout<<\"tmp_abs : \" <<tmp_abs<<endl;\n-\tcout<<\"_control_mode : \" <<_control_mode<<endl;\n \n \tif(_control_mode == 1) //joint space control\n \t{\n \t\tif (_t - _init_t < 0.1 && _bool_joint_motion == false)\n"
                },
                {
                    "date": 1689750848351,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -206,9 +206,9 @@\n \t{\n \t\ttmp_abs += abs(_goal_pos_cuda[i]-_x_hand(i));\n \t}\n \n-\tif(tmp_abs<=0.03)\n+\tif(tmp_abs<=0.1)\n \t{\n \t\t_control_mode = 2;\n \t\tif (_bool_plan(_cnt_plan) == 1)\n \t\t{\n@@ -260,10 +260,10 @@\n \t\t\t_end_time = _start_time + _motion_time;\n \t\t\tHandTrajectory.reset_initial(_start_time, _x_hand, _xdot_hand);\n \t\t\tHandTrajectory.update_goal(_x_goal_hand, _xdot_goal_hand, _end_time);\n \t\t\t_bool_ee_motion = true;\n-\t\t\tcout<<\"??\";\n-\t\t\t// cout<<\"_t : \"<<_t<<endl;\n+\t\t\t// cout<<\"??\";\n+\t\t\tcout<<\"_t : \"<<_t<<endl;\n \t\t\t// cout<<\"_start_time : \"<<_start_time<<endl;\n \t\t\t// cout<<\"_end_time : \"<<_end_time<<endl;\n \t\t}\n \n"
                },
                {
                    "date": 1689750935494,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -209,8 +209,9 @@\n \n \tif(tmp_abs<=0.1)\n \t{\n \t\t_control_mode = 2;\n+\t\tcout<<\"Control Mode : CLIK\"<<endl;\n \t\tif (_bool_plan(_cnt_plan) == 1)\n \t\t{\n \t\t\t_init_t = _t;\n \t\t\tfor(int i = 0; i<6; i++)\n@@ -226,8 +227,9 @@\n \t}\n \telse\n \t{\n \t\t_control_mode = 3;\n+\t\tcout<<\"Control Mode : MPPI\"<<endl;\n \t}\n \n \tif(_control_mode == 1) //joint space control\n \t{\n"
                },
                {
                    "date": 1689750949841,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -263,9 +263,9 @@\n \t\t\tHandTrajectory.reset_initial(_start_time, _x_hand, _xdot_hand);\n \t\t\tHandTrajectory.update_goal(_x_goal_hand, _xdot_goal_hand, _end_time);\n \t\t\t_bool_ee_motion = true;\n \t\t\t// cout<<\"??\";\n-\t\t\tcout<<\"_t : \"<<_t<<endl;\n+\t\t\t// cout<<\"_t : \"<<_t<<endl;\n \t\t\t// cout<<\"_start_time : \"<<_start_time<<endl;\n \t\t\t// cout<<\"_end_time : \"<<_end_time<<endl;\n \t\t}\n \n@@ -532,24 +532,24 @@\n \tfor(int i = 0; i < 7; i++){\n \t\t_A_diagonal(i,i) = Model._A(i,i);\n \t}\n \n-\t// _torque = _A_diagonal*(_kpj*(_q_des - _q) + _kdj*(_qdot_des - _qdot)) + Model._bg;\n+\t_torque = _A_diagonal*(_kpj*(_q_des - _q) + _kdj*(_qdot_des - _qdot)) + Model._bg;\n \n \t// \t_kpj_diagonal.setZero(_k, _k);\n \t// //\t\t\t\t\t\t\t0 \t\t1\t2\t\t3\t   4\t5 \t6\n \t// _kpj_diagonal.diagonal() << 400., 2500., 1500., 1700., 700., 500., 520.;\n \t// _kdj_diagonal.setZero(_k, _k);\n \t// _kdj_diagonal.diagonal() << 20., 250., 170., 320., 70., 50., 15.;\n \n \n-\t_torque(0) = 400*(_q_des(0)-_q(0)) + 20*(_qdot_des(0)-_qdot(0)) + Model._bg(0);\n-\t_torque(1) = 2500*(_q_des(1)-_q(1)) + 250*(_qdot_des(1)-_qdot(1)) + Model._bg(1);\n-\t_torque(2) = 1500*(_q_des(2)-_q(2)) + 170*(_qdot_des(2)-_qdot(2)) + Model._bg(2);\n-\t_torque(3) = 1700*(_q_des(3)-_q(3)) + 320*(_qdot_des(3)-_qdot(3)) + Model._bg(3);\n-\t_torque(4) = 700*(_q_des(4)-_q(4)) + 70*(_qdot_des(4)-_qdot(4)) + Model._bg(4);\n-\t_torque(5) = 500*(_q_des(5)-_q(5)) + 50*(_qdot_des(5)-_qdot(5)) + Model._bg(5);\n-\t_torque(6) = 520*(_q_des(6)-_q(6)) + 15*(_qdot_des(6)-_qdot(6)) + Model._bg(6);\n+\t// _torque(0) = 400*(_q_des(0)-_q(0)) + 20*(_qdot_des(0)-_qdot(0)) + Model._bg(0);\n+\t// _torque(1) = 2500*(_q_des(1)-_q(1)) + 250*(_qdot_des(1)-_qdot(1)) + Model._bg(1);\n+\t// _torque(2) = 1500*(_q_des(2)-_q(2)) + 170*(_qdot_des(2)-_qdot(2)) + Model._bg(2);\n+\t// _torque(3) = 1700*(_q_des(3)-_q(3)) + 320*(_qdot_des(3)-_qdot(3)) + Model._bg(3);\n+\t// _torque(4) = 700*(_q_des(4)-_q(4)) + 70*(_qdot_des(4)-_qdot(4)) + Model._bg(4);\n+\t// _torque(5) = 500*(_q_des(5)-_q(5)) + 50*(_qdot_des(5)-_qdot(5)) + Model._bg(5);\n+\t// _torque(6) = 520*(_q_des(6)-_q(6)) + 15*(_qdot_des(6)-_qdot(6)) + Model._bg(6);\n \n \t// cout << _torque.transpose() << endl;\n \t// _torque =  Model._A*(_kp*(_q_des - _q) + _kd*(_qdot_des - _qdot)) + Model._bg;\n }\n"
                },
                {
                    "date": 1689751001282,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -226,10 +226,13 @@\n \t\t}\n \t}\n \telse\n \t{\n-\t\t_control_mode = 3;\n-\t\tcout<<\"Control Mode : MPPI\"<<endl;\n+\t\tif(_bool_plan(_cnt_plan) == 1)\n+\t\t{\n+\t\t\t_control_mode = 3;\n+\t\t\tcout<<\"Control Mode : MPPI\"<<endl;\n+\t\t}\t\t\n \t}\n \n \tif(_control_mode == 1) //joint space control\n \t{\n"
                },
                {
                    "date": 1689751055057,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -217,9 +217,9 @@\n \t\t\tfor(int i = 0; i<6; i++)\n \t\t\t{\n \t\t\t\t_x_goal_hand(i) = _goal_pos_cuda[i];\n \t\t\t\t_xdot_goal_hand(i) = 0.0;\n-\t\t\t\t_motion_time = 5.0;\n+\t\t\t\t_motion_time = 3.0;\n \t\t\t}\n \t\t\t// _bool_joint_motion = false;\n \t\t\t_bool_ee_motion = false;\n \t\t\t_bool_plan(_cnt_plan) = 0;\n"
                },
                {
                    "date": 1689751211596,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -277,8 +277,9 @@\n \t\t_R_des_hand = HandTrajectory.rotationCubic();\n \t\t_x_des_hand.segment<3>(3) = CustomMath::GetBodyRotationAngle(_R_des_hand);\n \t\t_xdot_des_hand.head(3) = HandTrajectory.velocity_cubicSpline();\n \t\t_xdot_des_hand.segment<3>(3) = HandTrajectory.rotationCubicDot();\n+\t\tcout<<\"_x_des_hand : \"<<_x_des_hand.transpose()<<endl;\n \n \t\tif (HandTrajectory.check_trajectory_complete() == 1)\n \t\t{\n \t\t\t_bool_plan(_cnt_plan) = 1;\n"
                },
                {
                    "date": 1689751224624,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -265,12 +265,8 @@\n \t\t\t_end_time = _start_time + _motion_time;\n \t\t\tHandTrajectory.reset_initial(_start_time, _x_hand, _xdot_hand);\n \t\t\tHandTrajectory.update_goal(_x_goal_hand, _xdot_goal_hand, _end_time);\n \t\t\t_bool_ee_motion = true;\n-\t\t\t// cout<<\"??\";\n-\t\t\t// cout<<\"_t : \"<<_t<<endl;\n-\t\t\t// cout<<\"_start_time : \"<<_start_time<<endl;\n-\t\t\t// cout<<\"_end_time : \"<<_end_time<<endl;\n \t\t}\n \n \t\tHandTrajectory.update_time(_t);\n \t\t_x_des_hand.head(3) = HandTrajectory.position_cubicSpline();\n"
                },
                {
                    "date": 1689751271127,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -274,8 +274,10 @@\n \t\t_x_des_hand.segment<3>(3) = CustomMath::GetBodyRotationAngle(_R_des_hand);\n \t\t_xdot_des_hand.head(3) = HandTrajectory.velocity_cubicSpline();\n \t\t_xdot_des_hand.segment<3>(3) = HandTrajectory.rotationCubicDot();\n \t\tcout<<\"_x_des_hand : \"<<_x_des_hand.transpose()<<endl;\n+\t\tcout<<\"_x_hand : \"<<_x_hand.transpose()<<endl;\n+\t\t\n \n \t\tif (HandTrajectory.check_trajectory_complete() == 1)\n \t\t{\n \t\t\t_bool_plan(_cnt_plan) = 1;\n"
                },
                {
                    "date": 1689751282104,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -275,9 +275,8 @@\n \t\t_xdot_des_hand.head(3) = HandTrajectory.velocity_cubicSpline();\n \t\t_xdot_des_hand.segment<3>(3) = HandTrajectory.rotationCubicDot();\n \t\tcout<<\"_x_des_hand : \"<<_x_des_hand.transpose()<<endl;\n \t\tcout<<\"_x_hand : \"<<_x_hand.transpose()<<endl;\n-\t\t\n \n \t\tif (HandTrajectory.check_trajectory_complete() == 1)\n \t\t{\n \t\t\t_bool_plan(_cnt_plan) = 1;\n"
                },
                {
                    "date": 1689751316829,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -273,11 +273,12 @@\n \t\t_R_des_hand = HandTrajectory.rotationCubic();\n \t\t_x_des_hand.segment<3>(3) = CustomMath::GetBodyRotationAngle(_R_des_hand);\n \t\t_xdot_des_hand.head(3) = HandTrajectory.velocity_cubicSpline();\n \t\t_xdot_des_hand.segment<3>(3) = HandTrajectory.rotationCubicDot();\n-\t\tcout<<\"_x_des_hand : \"<<_x_des_hand.transpose()<<endl;\n-\t\tcout<<\"_x_hand : \"<<_x_hand.transpose()<<endl;\n \n+\t\tcout<<\"_x_des_hand \t: \"<<_x_des_hand.transpose()<<endl;\n+\t\tcout<<\"_x_hand \t\t: \"<<_x_hand.transpose()<<endl;\n+\n \t\tif (HandTrajectory.check_trajectory_complete() == 1)\n \t\t{\n \t\t\t_bool_plan(_cnt_plan) = 1;\n \t\t\t_bool_init = true;\n"
                },
                {
                    "date": 1689751363093,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -275,9 +275,9 @@\n \t\t_xdot_des_hand.head(3) = HandTrajectory.velocity_cubicSpline();\n \t\t_xdot_des_hand.segment<3>(3) = HandTrajectory.rotationCubicDot();\n \n \t\tcout<<\"_x_des_hand \t: \"<<_x_des_hand.transpose()<<endl;\n-\t\tcout<<\"_x_hand \t\t: \"<<_x_hand.transpose()<<endl;\n+\t\tcout<<\"_x_hand \t: \"<<_x_hand.transpose()<<endl;\n \n \t\tif (HandTrajectory.check_trajectory_complete() == 1)\n \t\t{\n \t\t\t_bool_plan(_cnt_plan) = 1;\n"
                },
                {
                    "date": 1689751395058,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -592,10 +592,10 @@\n \t// //\t\t\t\t\t\t\t0 \t\t1\t2\t\t3\t   4\t5 \t6\n \t// _kpj_diagonal.diagonal() << 400., 2500., 1500., 1700., 700., 500., 520.;\n \t// _kdj_diagonal.setZero(_k, _k);\n \t// _kdj_diagonal.diagonal() << 20., 250., 170., 320., 70., 50., 15.;\n-\t_x_kp =1;//작게 0.1\n-\t// _x_kp = 20.0;\n+\t// _x_kp =1;//작게 0.1\n+\t_x_kp = 20.0;\n \n     _q.setZero(_k);\n \t_qdot.setZero(_k);\n \t_torque.setZero(_k);\n"
                },
                {
                    "date": 1689751508217,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -265,8 +265,9 @@\n \t\t\t_end_time = _start_time + _motion_time;\n \t\t\tHandTrajectory.reset_initial(_start_time, _x_hand, _xdot_hand);\n \t\t\tHandTrajectory.update_goal(_x_goal_hand, _xdot_goal_hand, _end_time);\n \t\t\t_bool_ee_motion = true;\n+\t\t\tcout<<\"_t : \"<<_t<<endl;\n \t\t}\n \n \t\tHandTrajectory.update_time(_t);\n \t\t_x_des_hand.head(3) = HandTrajectory.position_cubicSpline();\n"
                },
                {
                    "date": 1689751595062,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -275,10 +275,10 @@\n \t\t_x_des_hand.segment<3>(3) = CustomMath::GetBodyRotationAngle(_R_des_hand);\n \t\t_xdot_des_hand.head(3) = HandTrajectory.velocity_cubicSpline();\n \t\t_xdot_des_hand.segment<3>(3) = HandTrajectory.rotationCubicDot();\n \n-\t\tcout<<\"_x_des_hand \t: \"<<_x_des_hand.transpose()<<endl;\n-\t\tcout<<\"_x_hand \t: \"<<_x_hand.transpose()<<endl;\n+\t\t// cout<<\"_x_des_hand \t: \"<<_x_des_hand.transpose()<<endl;\n+\t\t// cout<<\"_x_hand \t: \"<<_x_hand.transpose()<<endl;\n \n \t\tif (HandTrajectory.check_trajectory_complete() == 1)\n \t\t{\n \t\t\t_bool_plan(_cnt_plan) = 1;\n"
                },
                {
                    "date": 1689751608761,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -529,10 +529,10 @@\n \n \n \t_qdot_des = _J_bar_hands*(_xdot_des_hand + _x_kp*(_x_err_hand));\n \t_q_des = _q + _dt*_qdot_des;\n+\tcout<<\"_dt : \"<<_dt<<endl;\n \n-\n \tfor(int i = 0; i < 7; i++){\n \t\t_A_diagonal(i,i) = Model._A(i,i);\n \t}\n \n"
                },
                {
                    "date": 1689751653449,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -535,9 +535,27 @@\n \tfor(int i = 0; i < 7; i++){\n \t\t_A_diagonal(i,i) = Model._A(i,i);\n \t}\n \n-\t_torque = _A_diagonal*(_kpj*(_q_des - _q) + _kdj*(_qdot_des - _qdot)) + Model._bg;\n+\t// _torque = _A_diagonal*(_kpj*(_q_des - _q) + _kdj*(_qdot_des - _qdot)) + Model._bg;\n+\t\tfor(int i= 0; i<7; i++)\n+\t\t{\n+\t\t\tif(i<4)\n+\t\t\t{\n+\t\t\t\tif(i == 1)\n+\t\t\t\t{\n+\t\t\t\t\t_torque(i) = 2000 * (_q_des(i) - _q(i)) + 50 * (_qdot_des(i) - _qdot(i)) + Model._bg(i);\t\n+\t\t\t\t}\n+\t\t\t\telse\n+\t\t\t\t{\n+\t\t\t\t\t_torque(i) = 1200 * (_q_des(i) - _q(i)) + 20 * (_qdot_des(i) - _qdot(i)) + Model._bg(i);\n+\t\t\t\t}\t\t\t\t\n+\t\t\t}\n+\t\t\telse\n+\t\t\t{\n+\t\t\t\t_torque(i) = 200 * (_q_des(i) - _q(i)) + 10 * (_qdot_des(i) - _qdot(i)) + Model._bg(i);\n+\t\t\t}\n+\t\t}\n \n \t// \t_kpj_diagonal.setZero(_k, _k);\n \t// //\t\t\t\t\t\t\t0 \t\t1\t2\t\t3\t   4\t5 \t6\n \t// _kpj_diagonal.diagonal() << 400., 2500., 1500., 1700., 700., 500., 520.;\n"
                },
                {
                    "date": 1689751682931,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -529,9 +529,9 @@\n \n \n \t_qdot_des = _J_bar_hands*(_xdot_des_hand + _x_kp*(_x_err_hand));\n \t_q_des = _q + _dt*_qdot_des;\n-\tcout<<\"_dt : \"<<_dt<<endl;\n+\t// cout<<\"_dt : \"<<_dt<<endl;\n \n \tfor(int i = 0; i < 7; i++){\n \t\t_A_diagonal(i,i) = Model._A(i,i);\n \t}\n"
                },
                {
                    "date": 1689751706362,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -530,8 +530,10 @@\n \n \t_qdot_des = _J_bar_hands*(_xdot_des_hand + _x_kp*(_x_err_hand));\n \t_q_des = _q + _dt*_qdot_des;\n \t// cout<<\"_dt : \"<<_dt<<endl;\n+\tcout<<\"_q_des \t: \"<<_q_des.transpose()<<endl;\n+\t// cout<<\"_x_hand \t: \"<<_x_hand.transpose()<<endl;\n \n \tfor(int i = 0; i < 7; i++){\n \t\t_A_diagonal(i,i) = Model._A(i,i);\n \t}\n"
                },
                {
                    "date": 1689751767823,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -529,10 +529,10 @@\n \n \n \t_qdot_des = _J_bar_hands*(_xdot_des_hand + _x_kp*(_x_err_hand));\n \t_q_des = _q + _dt*_qdot_des;\n-\t// cout<<\"_dt : \"<<_dt<<endl;\n-\tcout<<\"_q_des \t: \"<<_q_des.transpose()<<endl;\n+\tcout<<\"_dt : \"<<_dt<<endl;\n+\t// cout<<\"_q_des \t: \"<<_q_des.transpose()<<endl;\n \t// cout<<\"_x_hand \t: \"<<_x_hand.transpose()<<endl;\n \n \tfor(int i = 0; i < 7; i++){\n \t\t_A_diagonal(i,i) = Model._A(i,i);\n"
                },
                {
                    "date": 1689751799533,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -529,9 +529,9 @@\n \n \n \t_qdot_des = _J_bar_hands*(_xdot_des_hand + _x_kp*(_x_err_hand));\n \t_q_des = _q + _dt*_qdot_des;\n-\tcout<<\"_dt : \"<<_dt<<endl;\n+\t\n \t// cout<<\"_q_des \t: \"<<_q_des.transpose()<<endl;\n \t// cout<<\"_x_hand \t: \"<<_x_hand.transpose()<<endl;\n \n \tfor(int i = 0; i < 7; i++){\n"
                },
                {
                    "date": 1689751812956,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,8 +83,9 @@\n \t\t_bool_init = false;\n \t}\n \n \t_dt = t - _pre_t;\n+\tcout<<\"_dt : \"<<_dt<<endl;\n \t_pre_t = t;\n \n \tfor (int i = 0; i < _k; i++)\n \t{\n"
                },
                {
                    "date": 1689751921718,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -284,9 +284,12 @@\n \t\t{\n \t\t\t_bool_plan(_cnt_plan) = 1;\n \t\t\t_bool_init = true;\n \t\t}\n-\t\tCLIK();\n+\t\tif(_dt >= 0.003-0.0001 && _dt <= 0.003+0.0001)\n+\t\t{\n+\t\t\tCLIK();\n+\t\t}\t\t\n \t}\n \telse if(_control_mode == 3) //MPPI\n \t{\n \t\t// if (_t - _init_t < 0.1 && _bool_joint_motion == false)\n"
                },
                {
                    "date": 1689751942748,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -287,9 +287,13 @@\n \t\t}\n \t\tif(_dt >= 0.003-0.0001 && _dt <= 0.003+0.0001)\n \t\t{\n \t\t\tCLIK();\n-\t\t}\t\t\n+\t\t}\n+\t\telse\n+\t\t{\n+\t\t\t_torque = Model._bg;\n+\t\t}\n \t}\n \telse if(_control_mode == 3) //MPPI\n \t{\n \t\t// if (_t - _init_t < 0.1 && _bool_joint_motion == false)\n"
                },
                {
                    "date": 1689751981116,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -284,16 +284,9 @@\n \t\t{\n \t\t\t_bool_plan(_cnt_plan) = 1;\n \t\t\t_bool_init = true;\n \t\t}\n-\t\tif(_dt >= 0.003-0.0001 && _dt <= 0.003+0.0001)\n-\t\t{\n-\t\t\tCLIK();\n-\t\t}\n-\t\telse\n-\t\t{\n-\t\t\t_torque = Model._bg;\n-\t\t}\n+\t\tCLIK();\n \t}\n \telse if(_control_mode == 3) //MPPI\n \t{\n \t\t// if (_t - _init_t < 0.1 && _bool_joint_motion == false)\n"
                },
                {
                    "date": 1689751988001,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -527,9 +527,9 @@\n \n \t_J_bar_hands = CustomMath::pseudoInverseQR(_J_hands);\n \t// _J_bar_hands = CustomMath::DampedWeightedPseudoInverse(_J_hands,_I*0.01,true);\n \n-\n+\t_dt = 0.003;\n \t_qdot_des = _J_bar_hands*(_xdot_des_hand + _x_kp*(_x_err_hand));\n \t_q_des = _q + _dt*_qdot_des;\n \t\n \t// cout<<\"_q_des \t: \"<<_q_des.transpose()<<endl;\n"
                },
                {
                    "date": 1689752031105,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -176,5 +176,761 @@\n // \tfor (int i = 0; i < _k; i++)\n // \t{\n // \t\t_q(i) = q[i];\n // \t\t_qdot(i) = qdot[i];\t\t\n-// \t\n\\ No newline at end of file\n+// \t}\n+// }\n+\n+// std::vector<double> CController::write_pybind()\n+// {\n+// \ttorque_command.clear();\n+\n+// \tfor (int i = 0; i < _k; i++)\n+// \t{\n+// \t\ttorque_command.push_back(_torque(i));\n+// \t}\n+\n+// \treturn torque_command;\n+// }\n+////////////////////////////////////////////////////////////////////////////////////////////////\n+////////////////////////////////////////////////////////////////////////////////////////////////\n+\n+\n+\n+void CController::control_mujoco()\n+{\n+\tsignal(SIGINT, signalHandler);\n+\n+    ModelUpdate();\n+    // motionPlan();\n+\tdouble tmp_abs = 0.0;\n+\tfor(int i = 0; i<3; i++)\n+\t{\n+\t\ttmp_abs += abs(_goal_pos_cuda[i]-_x_hand(i));\n+\t}\n+\n+\tif(tmp_abs<=0.1)\n+\t{\n+\t\t_control_mode = 2;\n+\t\tcout<<\"Control Mode : CLIK\"<<endl;\n+\t\tif (_bool_plan(_cnt_plan) == 1)\n+\t\t{\n+\t\t\t_init_t = _t;\n+\t\t\tfor(int i = 0; i<6; i++)\n+\t\t\t{\n+\t\t\t\t_x_goal_hand(i) = _goal_pos_cuda[i];\n+\t\t\t\t_xdot_goal_hand(i) = 0.0;\n+\t\t\t\t_motion_time = 3.0;\n+\t\t\t}\n+\t\t\t// _bool_joint_motion = false;\n+\t\t\t_bool_ee_motion = false;\n+\t\t\t_bool_plan(_cnt_plan) = 0;\n+\t\t}\n+\t}\n+\telse\n+\t{\n+\t\tif(_bool_plan(_cnt_plan) == 1)\n+\t\t{\n+\t\t\t_control_mode = 3;\n+\t\t\tcout<<\"Control Mode : MPPI\"<<endl;\n+\t\t}\t\t\n+\t}\n+\n+\tif(_control_mode == 1) //joint space control\n+\t{\n+\t\tif (_t - _init_t < 0.1 && _bool_joint_motion == false)\n+\t\t{\n+\t\t\t_start_time = _init_t;\n+\t\t\t_end_time = _start_time + _motion_time;\n+\t\t\tJointTrajectory.reset_initial(_start_time, _q, _qdot);\n+\t\t\tJointTrajectory.update_goal(_q_goal, _qdot_goal, _end_time);\n+\t\t\t_bool_joint_motion = true;\n+\t\t}\n+\t\t\n+\t\tJointTrajectory.update_time(_t);\n+\t\t_q_des = JointTrajectory.position_cubicSpline();\n+\t\t_qdot_des = JointTrajectory.velocity_cubicSpline();\n+\n+\t\tJointControl();\n+\n+\t\tif (JointTrajectory.check_trajectory_complete() == 1)\n+\t\t{\n+\t\t\t_bool_plan(_cnt_plan) = 1;\n+\t\t\t_bool_init = true;\n+\t\t}\n+\t}\n+\telse if(_control_mode == 2)\n+\t{\t\t\n+\t\tif (_t - _init_t < 0.1 && _bool_ee_motion == false)\n+\t\t{\n+\t\t\t_start_time = _init_t;\n+\t\t\t_end_time = _start_time + _motion_time;\n+\t\t\tHandTrajectory.reset_initial(_start_time, _x_hand, _xdot_hand);\n+\t\t\tHandTrajectory.update_goal(_x_goal_hand, _xdot_goal_hand, _end_time);\n+\t\t\t_bool_ee_motion = true;\n+\t\t\tcout<<\"_t : \"<<_t<<endl;\n+\t\t}\n+\n+\t\tHandTrajectory.update_time(_t);\n+\t\t_x_des_hand.head(3) = HandTrajectory.position_cubicSpline();\n+\t\t_R_des_hand = HandTrajectory.rotationCubic();\n+\t\t_x_des_hand.segment<3>(3) = CustomMath::GetBodyRotationAngle(_R_des_hand);\n+\t\t_xdot_des_hand.head(3) = HandTrajectory.velocity_cubicSpline();\n+\t\t_xdot_des_hand.segment<3>(3) = HandTrajectory.rotationCubicDot();\n+\n+\t\t// cout<<\"_x_des_hand \t: \"<<_x_des_hand.transpose()<<endl;\n+\t\t// cout<<\"_x_hand \t: \"<<_x_hand.transpose()<<endl;\n+\n+\t\tif (HandTrajectory.check_trajectory_complete() == 1)\n+\t\t{\n+\t\t\t_bool_plan(_cnt_plan) = 1;\n+\t\t\t_bool_init = true;\n+\t\t}\n+\t\tCLIK();\n+\t}\n+\telse if(_control_mode == 3) //MPPI\n+\t{\n+\t\t// if (_t - _init_t < 0.1 && _bool_joint_motion == false)\n+\t\t// {\n+\t\t// \t_start_time = _init_t;\n+\t\t// \t_end_time = _start_time + _motion_time;\n+\t\t// \tJointTrajectory.reset_initial(_start_time, _q, _qdot);\n+\t\t// \tJointTrajectory.update_goal(_q_goal, _qdot_goal, _end_time);\n+\t\t// \t_bool_joint_motion = true;\n+\t\t// \t_bool_plan(_cnt_plan) = 0;\n+\t\t// \t// Mppi.Trajectory_init(_q_order);\n+\t\t// \t// _cnt_mppi = 20;\n+\t\t// }\n+\n+\t\t// JointTrajectory.update_time(_t);\n+\t\t\n+\t\tfor(int i = 0; i<6; i++)\n+\t\t{\n+\t\t\ttmp_q(i) = _goal_pos_cuda[i];\n+\t\t}\n+\n+\t\tstd::chrono::steady_clock::time_point st_start_time;\n+\t\tst_start_time = std::chrono::steady_clock::now();\n+\t\tdouble control_time_real_ = 0.0;\n+\t\tgpuacc.cuda_cal(_q_for_cuda,_qdot_for_cuda, _goal_pos_cuda, 1, _returnArray); // goal, control_mode, return // control_mode = 0 : Joint Space Control, control_mode = 1 : Task Space Control\n+\t\tcontrol_time_real_ = std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::steady_clock::now() - st_start_time).count();\n+\t\tcontrol_time_real_ = control_time_real_ / 1000;\n+\t\t// cout<<\"all : \"<<control_time_real_<<\"ms\"<<endl<<endl;\n+\n+\t\t_torque.setZero();\n+\t\tfor(int i = 0; i < 7; i++)\n+\t\t{\n+\t\t\t_A_diagonal(i, i) = Model._A(i,i);\n+\t\t\t_q_des(i) = _returnArray[i];\n+\t\t\t_qdot_des(i) = _returnArray[i+7];\n+\t\t\t_qdotdot_des(i) = _returnArray[i+14];\n+\t\t}\n+\n+\t\t// cout<<\"_goal_pos_cuda\t\t:   \"<<tmp_q.transpose()<<endl;\n+\t\t// cout<<\"_x_hand.transpose()\t:   \"<<_x_hand.transpose()<<endl;\n+\t\t// cout<<\"_q_des       \t\t:   \"<<_q_des.transpose()<<endl;\n+\t\t// cout<<\"_q           \t\t:   \"<<_q.transpose()<<endl;\n+\t\t// cout<<\"_qdot_des    \t\t:   \"<<_qdot_des.transpose()<<endl;\n+\t\t// cout<<\"_qdot        \t\t:   \"<<_qdot.transpose()<<endl;\n+\t\t// cout<<\"_qdotdot_des \t\t:   \"<<_qdotdot_des.transpose()<<endl<<endl;\n+\t\t\n+\t\tfor(int i= 0; i<7; i++)\n+\t\t{\n+\t\t\tif(_qdot_des(i) < -0.8)\n+\t\t\t{\n+\t\t\t\t_qdot_des(i) = -0.8;\n+\t\t\t}\n+\t\t\telse if(_qdot_des(i) > 0.8)\n+\t\t\t{\n+\t\t\t\t_qdot_des(i) = 0.8;\n+\t\t\t}\n+\t\t\tif(i<4)\n+\t\t\t{\n+\t\t\t\tif(i == 1)\n+\t\t\t\t{\n+\t\t\t\t\t_torque(i) = 2000 * (_q_des(i) - _q(i)) + 50 * (_qdot_des(i) - _qdot(i)) + Model._bg(i);\t\n+\t\t\t\t}\n+\t\t\t\telse\n+\t\t\t\t{\n+\t\t\t\t\t_torque(i) = 1200 * (_q_des(i) - _q(i)) + 20 * (_qdot_des(i) - _qdot(i)) + Model._bg(i);\n+\t\t\t\t}\t\t\t\t\n+\t\t\t}\n+\t\t\telse\n+\t\t\t{\n+\t\t\t\t_torque(i) = 200 * (_q_des(i) - _q(i)) + 10 * (_qdot_des(i) - _qdot(i)) + Model._bg(i);\n+\t\t\t}\n+\t\t}\n+\t\t\n+\t\tif (JointTrajectory.check_trajectory_complete() == 1)\n+\t\t{\n+\t\t\t// _bool_plan(_cnt_plan) = 1;\n+\t\t\t_bool_init = true;\n+\t\t}\n+\t}\n+}\n+\n+void CController::ModelUpdate()\n+{\n+    Model.update_kinematics(_q, _qdot);\n+\tModel.update_dynamics();\n+    Model.calculate_EE_Jacobians();\n+\tModel.calculate_EE_positions_orientations();\n+\tModel.calculate_EE_velocity();\n+\n+\t_J_hands = Model._J_hand;\n+\n+\t_x_hand.head(3) = Model._x_hand;\n+\t_x_hand.tail(3) = CustomMath::GetBodyRotationAngle(Model._R_hand);\n+\t// cout<<\"_x_hand : \"<<_x_hand.transpose()<<endl;\n+\t// cout<<\"Model._J_hands : \"<<endl<<Model._J_hand<<endl;\n+\n+\t_xdot_hand = Model._xdot_hand;\n+}\t\n+\n+void CController::motionPlan()\n+{\t\n+\tif (_bool_plan(_cnt_plan) == 1)\n+\t{\n+\t\t// save_stack();\n+\t\t// _q_order.setZero(7);\n+\t\t// for(int i = 0; i< 7; i++)\n+\t\t// {\n+\t\t// \t_q_order(i) =rand_FloatRange(_min_joint_position(i),_max_joint_position(i));\n+\t\t// }\n+\t\t// reset_target(5.0, _q_order);\n+\n+\t\t////////////////////////////////////////////////////////\n+\t\t////////////////////////////////////////////////////////\n+\t\tif(_cnt_plan == 0)\n+\t\t{\n+\t\t\t_q_order(0) = 0.742;\n+\t\t\t_q_order(1) = -1.83;\n+\t\t\t_q_order(2) = -2.97;\n+\t\t\t_q_order(3) = -3.14;\n+\t\t\t_q_order(4) = -2.79;\n+\t\t\t_q_order(5) = 0.478;\n+\t\t\t_q_order(6) = 0.565;\n+\t\t\treset_target(10.0, _q_order);\n+\t\t\t_cnt_plan++;\n+\t\t}\n+\n+\t\telse if(_cnt_plan == 1)\n+\t\t{\n+\t\t\t_q_order(0) = -1.87;\n+\t\t\t_q_order(1) = -1.83;\n+\t\t\t_q_order(2) = -2.55;\n+\t\t\t_q_order(3) = -2.8;\n+\t\t\t_q_order(4) = 0.623;\n+\t\t\t_q_order(5) = 0.48;\n+\t\t\t_q_order(6) = 0.564;\t\t                    \n+\t\t\treset_target(10.0, _q_order);\n+\t\t\t_cnt_plan++;\n+\t\t}\n+\t\telse if(_cnt_plan == 2)\n+\t\t{\n+\t\t\t_q_order(0) = -1.87;\n+\t\t\t_q_order(1) = -1.1;\n+\t\t\t_q_order(2) = -1.16;\n+\t\t\t_q_order(3) = -2.1;\n+\t\t\t_q_order(4) = 0.89;\n+\t\t\t_q_order(5) = 0.44;\n+\t\t\t_q_order(6) = -0.386;\t\t                    \n+\t\t\treset_target(10.0, _q_order);\n+\t\t\t_cnt_plan++;\t\t\t\n+\t\t}\n+\t\telse if(_cnt_plan == 3)\n+\t\t{\n+\t\t\t_q_order(0) = -1.47;\n+\t\t\t_q_order(1) = -0.5;\n+\t\t\t_q_order(2) = -0.4;\n+\t\t\t_q_order(3) = -1.3;\n+\t\t\t_q_order(4) = 0.3;\n+\t\t\t_q_order(5) = 0.1;\n+\t\t\t_q_order(6) = -0.1;\t\t                    \n+\t\t\treset_target(10.0, _q_order);\n+\t\t\t_cnt_plan++;\t\t\t\n+\t\t}\n+\t\t////////////////////////////////////////////////////////\n+\t\t////////////////////////////////////////////////////////\n+\n+\t\t// if(_cnt_plan == 3)\n+\t\t// {\n+\t\t// \tsave_stack();\n+\t\t// \t_cnt_plan++;\n+\t\t// }\n+\t\t// for(int i = 0; i< 7; i++)\n+\t\t// {\n+\t\t// \t_q_order(i) =rand_FloatRange(_min_joint_position(i),_max_joint_position(i));\n+\t\t// }\n+\t\t// cout<<\"_q_result : \"<<_q.transpose()<<endl<<endl;\n+\t\t// cout<<\"_q_order : \"<<_q_order.transpose()<<endl;\n+\t\t// _q_order(0) = 0.742;\n+\t\t// _q_order(1) = -0.733;\n+\t\t// _q_order(2) = 1.19;\n+\t\t// _q_order(3) = -1.9;\n+\t\t// _q_order(4) = 1.1;\n+\t\t// _q_order(5) = 2.24;\n+\t\t// _q_order(6) = -0.475;\t\t                    \n+\t\t\n+\t}\n+}\n+\n+void CController::reset_target(double motion_time, VectorXd target_joint_position)\n+{\n+\t_control_mode = 3;\n+\t_motion_time = motion_time;\n+\t_bool_joint_motion = false;\n+\t_bool_ee_motion = false;\n+\n+\t// _q_goal = target_joint_position.head(7);\n+\t// _qdot_goal.setZero();\n+}\n+\n+void CController::reset_target(double motion_time, VectorXd target_joint_position, VectorXd target_joint_velocity)\n+{\n+\t_control_mode = 1;\n+\t_motion_time = motion_time;\n+\t_bool_joint_motion = false;\n+\t_bool_ee_motion = false;\n+\n+\t_q_goal = target_joint_position.head(7);\n+\t_qdot_goal = target_joint_velocity.head(7);\n+}\n+\n+void CController::reset_target(double motion_time, Vector3d target_pos, Vector3d target_ori)\n+{\n+\t_control_mode = 2;\n+\t_motion_time = motion_time;\n+\t_bool_joint_motion = false;\n+\t_bool_ee_motion = false;\n+\n+\t_x_goal_hand.head(3) = target_pos;\n+\t_x_goal_hand.tail(3) = target_ori;\n+\t_xdot_goal_hand.setZero();\n+}\n+\n+void CController::JointControl()\n+{\t\n+\t_torque.setZero();\n+\tfor(int i = 0; i < 7; i++){\n+\t\t_A_diagonal(i,i) = Model._A(i,i);\n+\t}\n+\t// _torque = Model._A*(_kpj*(_q_des - _q) + _kdj*(_qdot_des - _qdot)) + Model._bg;\n+\t_torque = _A_diagonal*(_kpj*(_q_des - _q) + _kdj*(_qdot_des - _qdot)) + Model._bg;\n+}\n+\n+void CController::CLIK()\n+{\n+\t_torque.setZero();\t\n+\n+\t_x_err_hand.segment(0,3) = _x_des_hand.head(3) - _x_hand.head(3);\n+\t_x_err_hand.segment(3,3) = -CustomMath::getPhi(Model._R_hand, _R_des_hand);\n+\n+\t_J_bar_hands = CustomMath::pseudoInverseQR(_J_hands);\n+\t// _J_bar_hands = CustomMath::DampedWeightedPseudoInverse(_J_hands,_I*0.01,true);\n+\n+\t_dt = 0.003;\n+\t_qdot_des = _J_bar_hands*(_xdot_des_hand + _x_kp*(_x_err_hand));\n+\t_q_des = _q + _dt*_qdot_des;\n+\t\n+\t// cout<<\"_q_des \t: \"<<_q_des.transpose()<<endl;\n+\t// cout<<\"_x_hand \t: \"<<_x_hand.transpose()<<endl;\n+\n+\tfor(int i = 0; i < 7; i++){\n+\t\t_A_diagonal(i,i) = Model._A(i,i);\n+\t}\n+\n+\t// _torque = _A_diagonal*(_kpj*(_q_des - _q) + _kdj*(_qdot_des - _qdot)) + Model._bg;\n+\t\tfor(int i= 0; i<7; i++)\n+\t\t{\n+\t\t\tif(i<4)\n+\t\t\t{\n+\t\t\t\tif(i == 1)\n+\t\t\t\t{\n+\t\t\t\t\t_torque(i) = 2000 * (_q_des(i) - _q(i)) + 50 * (_qdot_des(i) - _qdot(i)) + Model._bg(i);\t\n+\t\t\t\t}\n+\t\t\t\telse\n+\t\t\t\t{\n+\t\t\t\t\t_torque(i) = 1200 * (_q_des(i) - _q(i)) + 20 * (_qdot_des(i) - _qdot(i)) + Model._bg(i);\n+\t\t\t\t}\t\t\t\t\n+\t\t\t}\n+\t\t\telse\n+\t\t\t{\n+\t\t\t\t_torque(i) = 200 * (_q_des(i) - _q(i)) + 10 * (_qdot_des(i) - _qdot(i)) + Model._bg(i);\n+\t\t\t}\n+\t\t}\n+\n+\t// \t_kpj_diagonal.setZero(_k, _k);\n+\t// //\t\t\t\t\t\t\t0 \t\t1\t2\t\t3\t   4\t5 \t6\n+\t// _kpj_diagonal.diagonal() << 400., 2500., 1500., 1700., 700., 500., 520.;\n+\t// _kdj_diagonal.setZero(_k, _k);\n+\t// _kdj_diagonal.diagonal() << 20., 250., 170., 320., 70., 50., 15.;\n+\n+\n+\t// _torque(0) = 400*(_q_des(0)-_q(0)) + 20*(_qdot_des(0)-_qdot(0)) + Model._bg(0);\n+\t// _torque(1) = 2500*(_q_des(1)-_q(1)) + 250*(_qdot_des(1)-_qdot(1)) + Model._bg(1);\n+\t// _torque(2) = 1500*(_q_des(2)-_q(2)) + 170*(_qdot_des(2)-_qdot(2)) + Model._bg(2);\n+\t// _torque(3) = 1700*(_q_des(3)-_q(3)) + 320*(_qdot_des(3)-_qdot(3)) + Model._bg(3);\n+\t// _torque(4) = 700*(_q_des(4)-_q(4)) + 70*(_qdot_des(4)-_qdot(4)) + Model._bg(4);\n+\t// _torque(5) = 500*(_q_des(5)-_q(5)) + 50*(_qdot_des(5)-_qdot(5)) + Model._bg(5);\n+\t// _torque(6) = 520*(_q_des(6)-_q(6)) + 15*(_qdot_des(6)-_qdot(6)) + Model._bg(6);\n+\n+\t// cout << _torque.transpose() << endl;\n+\t// _torque =  Model._A*(_kp*(_q_des - _q) + _kd*(_qdot_des - _qdot)) + Model._bg;\n+}\n+\n+void CController::Initialize()\n+{\n+\tmemset(_q_for_cuda, 0, _JDOF * sizeof(double));\n+\tmemset(_qdot_for_cuda, 0, _JDOF * sizeof(double));\n+\t\n+\n+\n+\t// time_cnt = 1;\n+\t// time_check = 0.0;\n+\t// max_time_check = 0.0;\n+\t// memset(max_time_check, 0, 500 * sizeof(double));\n+\n+\t////////////////////////\n+\t_q_acc_matrix.setZero(21,20);\n+\t_q_acc.setZero(7);\n+\t_old_torque.setZero(7);\n+\t// _cnt_mppi = 20;\n+\t// _mppi.setZero(21);\n+\t_qdotdot_des.setZero(7);\n+\t/////////////////////////\n+\t\n+    _control_mode = 3; //1: joint space, 2: task space(CLIK)\n+\n+\t_bool_init = true;\n+\t_t = 0.0;\n+\t_init_t = 0.0;\n+\t_pre_t = 0.0;\n+\t_dt = 0.0;\n+\n+\t_kpj = 400.0;\n+\t_kdj = 40.0;\n+\n+\t// _kpj_diagonal.setZero(_k, _k);\n+\t// //\t\t\t\t\t\t\t0 \t\t1\t2\t\t3\t   4\t5 \t6\n+\t// _kpj_diagonal.diagonal() << 400., 2500., 1500., 1700., 700., 500., 520.;\n+\t// _kdj_diagonal.setZero(_k, _k);\n+\t// _kdj_diagonal.diagonal() << 20., 250., 170., 320., 70., 50., 15.;\n+\t// _x_kp =1;//작게 0.1\n+\t_x_kp = 20.0;\n+\n+    _q.setZero(_k);\n+\t_qdot.setZero(_k);\n+\t_torque.setZero(_k);\n+\n+\t_J_hands.setZero(6,_k);\n+\t_J_bar_hands.setZero(_k,6);\n+\n+\t_x_hand.setZero(6);\n+\t_xdot_hand.setZero(6);\n+\n+\t//////////////////원본///////////////////\n+\t// _cnt_plan = 0;\n+\t// _bool_plan.setZero(30);\n+\t// _time_plan.resize(30);\n+\t// _time_plan.setConstant(5.0);\n+\t//////////////////원본///////////////////\n+\ttimestep_cnt = 200001;\n+\t_cnt_plan = 0;\n+\t_bool_plan.setZero(timestep_cnt+1); //20\n+\t_time_plan.resize(timestep_cnt+1);  //20\n+\t_time_plan.setConstant(1.0);\n+\n+\t_q_home.setZero(_k);\n+\t// _q_home(0) = 0.0;\n+\t// _q_home(1) = -30.0 * DEG2RAD;\n+\t// _q_home(2) = 30.0 * DEG2RAD;\n+\t// _q_home(3) = -30.0 * DEG2RAD;\n+\t// _q_home(4) = 30.0 * DEG2RAD;\n+\t// _q_home(5) = -60.0 * DEG2RAD;\n+\t// _q_home(6) = 30.0 * DEG2RAD;\n+\t_q_home(0) = 0.374;\n+\t_q_home(1) = -1.02;\n+\t_q_home(2) = 0.245;\n+\t_q_home(3) = -1.51;\n+\t_q_home(4) = 0.0102;\n+\t_q_home(5) = 0.655;\n+\t_q_home(6) = 0.3;\n+\n+\t_start_time = 0.0;\n+\t_end_time = 0.0;\n+\t_motion_time = 0.0;\n+\n+\t_bool_joint_motion = false;\n+\t_bool_ee_motion = false;\n+\n+\t_q_des.setZero(_k);\n+\t_qdot_des.setZero(_k);\n+\t_q_goal.setZero(_k);\n+\t_qdot_goal.setZero(_k);\n+\n+\t_x_des_hand.setZero(6);\n+\t_xdot_des_hand.setZero(6);\n+\t_x_goal_hand.setZero(6);\n+\t_xdot_goal_hand.setZero(6);\n+\n+\t_pos_goal_hand.setZero(); // 3x1 \n+\t_rpy_goal_hand.setZero(); // 3x1\n+\n+\tJointTrajectory.set_size(_k);\n+\t_A_diagonal.setZero(_k,_k);\n+\n+\t// torque_command.clear();\n+\n+\n+\t_x_err_hand.setZero(6);\n+\t_R_des_hand.setZero();\n+\n+\t_I.setIdentity(7,7);\n+\n+\t_pre_q.setZero(7);\n+\t_pre_qdot.setZero(7);\n+\n+\t///////////////////save_stack/////////////////////\n+\t_q_order.setZero(7);\n+\t_q_home_old.setZero(7);\n+\t_max_joint_position.setZero(7);\n+\t_min_joint_position.setZero(7);\n+\n+\t_min_joint_position(0) = -2.9671;\n+\t_min_joint_position(1) = -1.8326;\n+\t_min_joint_position(2) = -2.9671;\n+\t_min_joint_position(3) = -3.1416;\n+\t_min_joint_position(4) = -2.9671;\n+\t_min_joint_position(5) = -0.0873;\n+\t_min_joint_position(6) = -2.9671;\n+\n+\t_max_joint_position(0) = 2.9671;\n+\t_max_joint_position(1) = 1.8326;\n+\t_max_joint_position(2) = 2.9671;\n+\t_max_joint_position(3) = 0.0;\n+\t_max_joint_position(4) = 2.9671;\n+\t_max_joint_position(5) = 3.8223;\n+\t_max_joint_position(6) = 2.9671;\n+\n+\tcheck_save_log_once = true;\n+\tsave_q_once = true;\n+\n+\tcheck_7 = 0;\n+\ta = 0;\n+\tcnt2 = 0;\n+\t_rat = 0;\n+\t_ratt = 0;\n+\tratrat = 135;\n+\n+\tprevent_duplicate = 0.01;\n+\t_tmp = 0.0;\n+\t///////////////////save_stack/////////////////////\n+\n+\t///////////////////estimate_lr/////////////////////\n+\t_nodes = 100;\n+\t///////////////////estimate_lr/////////////////////\n+\n+\tcout << fixed;\n+\tcout.precision(3);\n+\t_pre_qdotdot_des.setZero(7);\n+\ttmp_q.setZero(6);\n+\t_cnt_plan = 0;\n+\t_bool_plan(_cnt_plan) = 1;\n+}\n+\n+double CController::estimate_LR(double _input[])\n+{\n+    for(int j = 0 ; j<_nodes; j++)\n+    {\n+        _hidden0[j] = 0.0;\n+        _hidden1[j] = 0.0;\n+    }\n+    for(int j = 0 ; j<_nodes; j++)\n+    {\n+        for(int i = 0; i<7 ;i++)\n+        {\n+            _hidden0[j] = _hidden0[j] + _input[i] * _weight0[i][j];\n+        }\n+        _hidden0[j] = _hidden0[j] + _weight1[j]; \n+        if(_hidden0[j] <= 0)\n+        {\n+            _hidden0[j] = 0.0;\n+        }\n+    }\n+    for(int j = 0 ; j<_nodes; j++)\n+    {\n+        for(int i = 0; i<_nodes ;i++)\n+        {\n+            _hidden1[j] = _hidden1[j] + _hidden0[i] * _weight2[i][j]; \n+        }\n+        _hidden1[j] = _hidden1[j] + _weight3[j];\n+        if(_hidden1[j] <= 0)\n+        {\n+            _hidden1[j] = 0.0;\n+        }\n+    }\n+\n+    _output1 = 0.0;\n+\n+    for(int i = 0; i<_nodes ;i++)\n+    {\n+        _output1 = _hidden1[i] * _weight4[i] + _output1;\n+    }\n+\t_output1 = _output1 + _weight5;\n+\t_output1 = 1.0 / (1.0 + exp(-_output1));\n+\t// cout<<\"_output1 : \"<<_output1<<endl;\n+\treturn _output1;\n+}\n+\n+void CController::save_stack()\n+{\n+\t// for(int i = 0; i<500; i++)\n+\t// {\n+\t// \tcout<<\"Max time[\"<<i<<\"] : \"<<max_time_check[i]<<\"ms\"<<endl;\n+\t// }\n+\t// cout<<\"time_cnt : \"<<time_cnt<<\"개\"<<endl<<endl;\n+\t// cout<<\"Avg time : \"<<(double)time_check/time_cnt<<\"ms\"<<endl<<endl;\n+\tif( check_save_log_once == true)\n+\t{\n+\t\tcheck_save_log_once = false;\n+\t\t// filename << \"/home/kist/KDH/Backup/KIST-Dual-Arm-Operational-Space-Control-main2/save_data/dual_arm_data_plus_0417.txt\";\n+\t\t// filename << \"/home/kist/KDH/Backup/KIST-Dual-Arm-Operational-Space-Control-main2/save_data/collcheck3.txt\";\n+\t\tfilename << \"/home/kist/KDH/Backup/franka_panda_2.0.0/save_data/panda_mppi_0609.txt\";\n+\t\t// output.open(\"/home/kist/KDH/Backup/KIST-Dual-Arm-Operational-Space-Control-main2/save_data/data_0406.txt\");\n+\t\tif(a != 0)\n+\t\t{\n+\t\t\toutput.open(\"/home/kist/KDH/Backup/franka_panda_2.0.0/save_data/panda_mppi_0609.txt\");\n+\t\t\tfor(int i = 0; i<a; i++)\n+\t\t\t{\n+\t\t\t\tcheck_7++;\n+\t\t\t\tif(check_7 == 12)\n+\t\t\t\t{\n+\t\t\t\t\toutput<<log_output[i]<<endl;\n+\t\t\t\t\tcheck_7 = 0;\n+\t\t\t\t}\n+\t\t\t\telse\n+\t\t\t\t{\n+\t\t\t\t\toutput<<log_output[i]<<\",\";\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\toutput.close();\n+\t\t\ta = 0;\n+\t\t\tcout<<\"first log time\"<<endl;\n+\t\t}\n+\t\telse\n+\t\t{\n+\t\t\tcout<<\"first log time but a == 0\"<<endl;\n+\t\t\tcheck_save_log_once = true;\n+\t\t}\n+\t\t\n+\t}\n+\telse\n+\t{\n+\t\tif( a != 0 )\n+\t\t{\n+\t\t\toutput.open(\"/home/kist/KDH/Backup/franka_panda_2.0.0/save_data/panda_mppi_0609.txt\",ios::app);\n+\t\t\tfor(int i = 0; i<a; i++)\n+\t\t\t{\n+\t\t\t\tcheck_7++;\n+\t\t\t\tif(check_7 == 12)\n+\t\t\t\t{\n+\t\t\t\t\toutput<<log_output[i]<<endl;\n+\t\t\t\t\tcheck_7 = 0;\n+\t\t\t\t}\n+\t\t\t\telse\n+\t\t\t\t{\n+\t\t\t\t\toutput<<log_output[i]<<\",\";\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\toutput.close();\n+\t\t\ta = 0;\n+\t\t\tcout<<\"log\"<<endl;\n+\t\t}\n+\t\telse\n+\t\t{\n+\t\t\tcout<<\" a == 0 \"<< endl;\n+\t\t}\n+\t}\n+}\n+\n+float CController::rand_FloatRange(float a, float b){\n+\tif(_t < 0.01)\n+\t{\n+\t\tsrand((unsigned)time(NULL));\n+\t}\n+\n+\t// float k = (float)rand();\n+\t// cout<<\"k : \"<<k<<endl;\n+    return ((b-a)*((float)rand()/RAND_MAX))+a;\n+}\n+\n+void CController::load_weight()\n+{\n+\t/////joint limit 기준 0407이 가장 잘되는 상황////\n+    ////////0,7///////////////////////\n+    weight0.open(\"/home/kist/KDH/Backup/franka_panda/weight/best_model_panda_0427_2[0].txt\");\n+    for(int i = 0; i<7 ; i++)\n+    {\n+        for(int j = 0; j<_nodes ; j++)\n+        {\n+            weight0 >> _weight0[i][j];\n+        }\n+    }\n+    weight0.close();\n+    \n+\n+    weight0.open(\"/home/kist/KDH/Backup/franka_panda/weight/best_model_panda_0427_2[1].txt\");\n+    for(int i = 0; i<_nodes ; i++)\n+    {\n+        weight0 >> _weight1[i];\n+    }\n+    weight0.close();\n+\n+    weight0.open(\"/home/kist/KDH/Backup/franka_panda/weight/best_model_panda_0427_2[2].txt\");\n+    for(int i = 0; i<_nodes ; i++)\n+    {\n+        for(int j = 0; j<_nodes ; j++)\n+        {\n+            weight0 >> _weight2[i][j];\n+        }\n+    }\n+    weight0.close();\n+\n+    weight0.open(\"/home/kist/KDH/Backup/franka_panda/weight/best_model_panda_0427_2[3].txt\");\n+    for(int i = 0; i<_nodes ; i++)\n+    {\n+        weight0 >> _weight3[i];\n+    }\n+    weight0.close();\n+\n+    weight0.open(\"/home/kist/KDH/Backup/franka_panda/weight/best_model_panda_0427_2[4].txt\");\n+    for(int i = 0; i<_nodes ; i++)\n+    {\n+        weight0 >> _weight4[i];\n+    }\n+    weight0.close();\n+\n+    weight0.open(\"/home/kist/KDH/Backup/franka_panda/weight/best_model_panda_0427_2[5].txt\");\n+    weight0 >> _weight5;\n+    weight0.close();\n+}\n+// namespace py = pybind11;\n+// PYBIND11_MODULE(controller, m)\n+// {\n+//   m.doc() = \"pybind11 for controller\";\n+\n+//   py::class_<CController>(m, \"CController\")\n+//       .def(py::init())\n+//       .def(\"read\", &CController::read_pybind)\n+// \t  .def(\"control_mujoco\", &CController::control_mujoco)\n+// \t  .def(\"write\", &CController::write_pybind);\n+\n+\n+// #ifdef VERSION_INFO\n+//   m.attr(\"__version__\") = VERSION_INFO;\n+// #else\n+//   m.attr(\"__version__\") = \"dev\";\n+// #endif\n+\n+// //   m.attr(\"TEST\") = py::int_(int(42));\n+// }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1692684809588,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,1049 @@\n+// #include <pybind11/operators.h>\n+// #include <pybind11/pybind11.h>\n+// #include <pybind11/stl.h>\n+#include \"controller.h\"\n+\n+// CMppi Mppi;\n+CudaTest gpuacc;\n+\n+void signalHandler(int signal)\n+{\n+    cout<<\"Received termination signal. Freeing CUDA memory...\"<<endl;\n+    gpuacc.cuda_memory_free();\n+\tcout<<\"Cuda_memory_free() Complete\"<<endl;\n+    exit(signal);\n+}\n+\n+CController::CController()\n+{\n+\t_k = 7;\n+\tcout<<\"1\"<<endl;\n+\tgpuacc.cpu_memory_save();\n+    gpuacc.cuda_memory_save();\n+    gpuacc.load_weight();\n+    gpuacc.initialize();\n+\tInitialize();\n+\t// load_weight();\n+}\n+\n+CController::~CController()\n+{\n+}\n+\n+// void CController::readJointState()\n+// {\n+// \tstd::ifstream file(\"/home/kist-robot2/plan1.txt\");\n+\n+// \tfile >> _size;\n+\t\n+// \ttxt_nsecs.setZero(_size);\n+// \ttxt_position.setZero(_size,7);\n+// \ttxt_velocity.setZero(_size,7);\n+\n+// \tfor(int i = 0; i < _size; i++)\n+// \t{\n+// \t\tfile >> txt_nsecs(i);\n+\n+// \t\tfor(int j = 0; j < 7; j++)\n+// \t\t{\n+// \t\t\tfile >> txt_position(i,j);\n+// \t\t\tfile >> txt_velocity(i,j);\n+// \t\t}\n+// \t}\n+\n+// \tfor(int i = 0; i < _size; i++)\n+// \t{\n+// \t\tstd::cout << \"i : \" << i << txt_nsecs(i) << std::endl;\n+\n+// \t\tfor(int j = 0; j < 7; j++)\n+// \t\t{\n+// \t\t\tstd::cout << txt_position(i,j) << \" \";\n+// \t\t}\n+// \t\tstd::cout << std::endl;\n+// \t\tfor(int j = 0; j < 7; j++)\n+// \t\t{\n+// \t\t\tstd::cout << txt_velocity(i,j) << \" \";\n+// \t\t}\n+// \t\tstd::cout << std::endl;\n+// \t}\n+\n+// \tstd::cout << \"Load Finish -> size : \" << _size << std::endl;\n+\n+// \tfile.close();\n+// }\n+\n+\n+void CController::read(double t, double* q, double* qdot, int check, double *trans_mat_goal)\n+{\t\n+\t_t = t;\n+\tif (_bool_init == true)\n+\t{\n+\t\t_init_t = _t;\n+\t\t_bool_init = false;\n+\t}\n+\n+\t_dt = t - _pre_t;\n+\t// cout<<\"_dt : \"<<_dt<<endl;\n+\t_pre_t = t;\n+\n+\tfor (int i = 0; i < _k; i++)\n+\t{\n+\t\t_q(i) = q[i];\n+\t\t_qdot(i) = qdot[i];\n+\t\t// _qdot(i) = CustomMath::VelLowpassFilter(0.001, 2.0*PI* 10.0, _pre_q(i), _q(i), _pre_qdot(i)); //low-pass filter\n+\t\t_pre_q(i) = _q(i);\n+\t\t_pre_qdot(i) = _qdot(i);\t\t\n+\t\tif(_t < 2.0)///use filtered data after convergece\n+        {\n+\t\t\t_qdot(i) = qdot[i];\n+\t\t}\n+\t\t_q_for_cuda[i] = q[i];\n+\t\t_qdot_for_cuda[i] = qdot[i];\n+\t}\n+\t_goal_pos_cuda[0] = trans_mat_goal[3];\n+\t_goal_pos_cuda[1] = trans_mat_goal[7];\n+\t_goal_pos_cuda[2] = trans_mat_goal[11];\n+\n+\t    // rpy[1] = trans_mat_goal[8];\n+    _goal_pos_cuda[4] = -asin(trans_mat_goal[8]);\n+    if(trans_mat_goal[8] > 1.0 - 0.001 && trans_mat_goal[8] < 1.0 + 0.001)\n+    {\n+        _goal_pos_cuda[3] = atan2(-trans_mat_goal[1], -trans_mat_goal[2]);\n+        _goal_pos_cuda[5] = 0.0;\n+    }\n+    else if (trans_mat_goal[8] < -1.0 + 0.001 && trans_mat_goal[8] > -1.0 - 0.001) //when trans_mat_goal(2,0) == -1\n+    {//Gimbal lock, pitch = 90deg\n+        _goal_pos_cuda[3] = atan2(trans_mat_goal[1], trans_mat_goal[2]);\n+        _goal_pos_cuda[5] = 0.0;\n+    }\n+    else //general solution\n+    {\n+        _goal_pos_cuda[3] = atan2(trans_mat_goal[9], trans_mat_goal[10]);\n+        _goal_pos_cuda[5] = atan2(trans_mat_goal[4], trans_mat_goal[0]);\n+    }\n+\t\n+\t// cout<<\"_qdot() : \"<<_qdot.transpose()<<endl;\n+\t// cout<<\"_qdot[0] : \"<<qdot[0]<<endl;\n+}\n+\n+void CController::write(double* torque)\n+{\n+\tfor (int i = 0; i < _k; i++)\n+\t{\n+\t\ttorque[i] = _torque(i);\n+\t\t// torque[1] = 50.0;\n+\t\t// log_output[a] = _q_order(i);\n+\t\t// a++;\n+\t\t// log_output[a] = _q(i);\n+\t\t// a++;\n+\t\t// log_output[a] = _qdot(i);\n+\t\t// a++;\n+\t\t// log_output[a] = _qdotdot_des(i);\n+\t\t// a++;\n+\t\t// log_output[a] = _torque(i);\n+\t\t// a++;\n+\t}\n+\t// for (int i = 0; i < 6; i++)\n+\t// {\n+\t// \tlog_output[a] = _goal_pos_cuda[i];\n+\t// \ta++;\n+\t// \tlog_output[a] = _x_hand(i);\n+\t// \ta++;\n+\t// }\n+\t// torque[_k-2] = 0.0;\n+\t// torque[_k-1] = 0.0;\n+\t// torque[_k] = 0.0;\n+\t// torque[_k+1] = 0.0;\n+\t// _old_torque = _torque;\n+}\n+\n+\n+// for pybind11\n+////////////////////////////////////////////////////////////////////////////////////////////////\n+////////////////////////////////////////////////////////////////////////////////////////////////\n+void CController::read_pybind(double t, std::array<double,7> q, std::array<double, 7> qdot, std::array<double, 3> alpha)\n+// void CController::read_pybind(double t, std::array<double,7> q, std::array<double, 7> qdot, double alpha)\n+{\t\n+\t_t = t;\n+\tif (_bool_init == true)\n+\t{\n+\t\t_init_t = _t;\n+\t\t_bool_init = false;\n+\t}\n+\n+\t_dt = t - _pre_t;\n+\t_pre_t = t;\n+\n+\tfor (int i = 0; i < _k; i++)\n+\t{\n+\t\t_q(i) = q[i];\n+\t\t_qdot(i) = qdot[i];\n+\t\t_q_for_cuda[i] = q[i];\n+\t\t_qdot_for_cuda[i] = qdot[i];\n+\t}\n+\t\n+\t// _alpha[0] = alpha;\n+\n+\t_alpha[0] = alpha[0] * 10000.0;\n+\t_beta[0] = alpha[1] * 100000.0;\n+\t_time_rl[0] = alpha[2];\n+}\n+\n+std::vector<double> CController::write_pybind()\n+{\n+\ttorque_command.clear();\n+\tfor (int i = 0; i < _k; i++)\n+\t{\n+\t\ttorque_command.push_back(_torque(i));\n+\t}\n+\n+\treturn torque_command;\n+}\n+\n+std::vector<double> CController::state_for_pybind()\n+{\n+\tX_data_for_pybind.clear();\n+\tfor (int i = 0; i < 6; i++)\n+\t{\n+\t\tX_data_for_pybind.push_back(_goal_pos_cuda[i]);\n+\t}\n+\tfor (int i = 0; i < 6; i++)\n+\t{\n+\t\tX_data_for_pybind.push_back(_x_hand(i));\n+\t}\n+\tfor (int i = 0; i < 7; i++)\n+\t{\n+\t\tX_data_for_pybind.push_back(_q_for_cuda[i]);\n+\t}\n+\n+\treturn X_data_for_pybind;\n+}\n+////////////////////////////////////////////////////////////////////////////////////////////////\n+////////////////////////////////////////////////////////////////////////////////////////////////\n+\n+\n+\n+void CController::control_mujoco()\n+{\n+\tsignal(SIGINT, signalHandler);\n+\n+    ModelUpdate();\n+    // motionPlan();\n+\n+\t_control_mode = 3;\n+\t//////////////////////////// CLIK + MPPI /////////////////////////////\n+\t// double tmp_abs = 0.0;\n+\t// double tmp_abs2 = 0.0;\n+\t// for(int i = 0; i<3; i++)\n+\t// {\n+\t// \ttmp_abs += abs(_goal_pos_cuda[i]-_x_hand(i));\n+\t// }\n+\t// for(int i = 3; i<6; i++)\n+\t// {\n+\t// \ttmp_abs2 += abs(_goal_pos_cuda[i]-_x_hand(i));\n+\t// }\n+\n+\t// if(_bool_plan(_cnt_plan) == 1)\n+\t// {\n+\t// \t_control_mode = 3;\n+\t// \tif(tmp_abs<=0.15+0.001 && tmp_abs>=0.15-0.001)\n+\t// \t{\n+\t// \t\tif(tmp_abs2>0.1)\n+\t// \t\t{\n+\t// \t\t\t_control_mode = 2;\n+\t// \t\t\tcout<<\"Control Mode : CLIK_Start\"<<endl;\n+\t// \t\t\t_init_t = _t;\n+\t// \t\t\tfor(int i = 0; i<6; i++)\n+\t// \t\t\t{\n+\t// \t\t\t\t_x_goal_hand(i) = _goal_pos_cuda[i];\n+\t// \t\t\t\t_xdot_goal_hand(i) = 0.0;\n+\t// \t\t\t\t_motion_time = 3.0;\n+\t// \t\t\t}\n+\t// \t\t\t// _bool_joint_motion = false;\n+\t// \t\t\t_bool_ee_motion = false;\n+\t// \t\t\t_bool_plan(_cnt_plan) = 0;\n+\t// \t\t}\t\t\t\n+\t// \t}\n+\t// \telse\n+\t// \t{\n+\t// \t\tcout<<\"Control Mode : MPPI\"<<endl;\n+\t// \t}\n+\t// }\n+\t// else\n+\t// {\n+\t// \t_control_mode = 2;\n+\t// \tcout<<\"Control Mode : CLIK_Running\"<<endl;\n+\t// }\n+\t//////////////////////////// CLIK + MPPI /////////////////////////////\n+\n+\tif(_control_mode == 1) //joint space control\n+\t{\n+\t\tif (_t - _init_t < 0.1 && _bool_joint_motion == false)\n+\t\t{\n+\t\t\t_start_time = _init_t;\n+\t\t\t_end_time = _start_time + _motion_time;\n+\t\t\tJointTrajectory.reset_initial(_start_time, _q, _qdot);\n+\t\t\tJointTrajectory.update_goal(_q_goal, _qdot_goal, _end_time);\n+\t\t\t_bool_joint_motion = true;\n+\t\t}\n+\t\t\n+\t\tJointTrajectory.update_time(_t);\n+\t\t_q_des = JointTrajectory.position_cubicSpline();\n+\t\t_qdot_des = JointTrajectory.velocity_cubicSpline();\n+\n+\t\tJointControl();\n+\n+\t\tif (JointTrajectory.check_trajectory_complete() == 1)\n+\t\t{\n+\t\t\t_bool_plan(_cnt_plan) = 1;\n+\t\t\t_bool_init = true;\n+\t\t}\n+\t}\n+\telse if(_control_mode == 2)\n+\t{\t\t\n+\t\tif (_t - _init_t < 0.1 && _bool_ee_motion == false)\n+\t\t{\n+\t\t\t_start_time = _init_t;\n+\t\t\t_end_time = _start_time + _motion_time;\n+\t\t\tHandTrajectory.reset_initial(_start_time, _x_hand, _xdot_hand);\n+\t\t\tHandTrajectory.update_goal(_x_goal_hand, _xdot_goal_hand, _end_time);\n+\t\t\t_bool_ee_motion = true;\n+\t\t\tcout<<\"_t : \"<<_t<<endl;\n+\t\t\t// cout<<\"_x_hand \t: \"<<_x_hand.transpose()<<endl;\n+\t\t}\n+\n+\t\t\n+\t\tHandTrajectory.update_time(_t);\n+\t\t_x_des_hand.head(3) = HandTrajectory.position_cubicSpline();\n+\t\t_R_des_hand = HandTrajectory.rotationCubic();\n+\t\t_x_des_hand.segment<3>(3) = CustomMath::GetBodyRotationAngle(_R_des_hand);\n+\t\t_xdot_des_hand.head(3) = HandTrajectory.velocity_cubicSpline();\n+\t\t_xdot_des_hand.segment<3>(3) = HandTrajectory.rotationCubicDot();\n+\n+\t\t// cout<<\"_x_des_hand \t: \"<<_x_des_hand.transpose()<<endl;\n+\t\t// cout<<\"_x_hand \t: \"<<_x_hand.transpose()<<endl;\n+\n+\t\t// for(int i = 0 ; i<6; i++)\n+\t\t// {\n+\t\t// \tif(_x_goal_hand(i)>= _x_hand(i)-0.001 && _x_goal_hand(i)<= _x_hand(i)+0.001)\n+\t\t// \t{\n+\t\t// \t\t_x_des_hand(i) = _x_goal_hand(i);\n+\t\t// \t\t_xdot_des_hand(i) = 0.0;\n+\t\t// \t}\n+\t\t// }\n+\t\t// cout<<\"_xdot_hand \t: \"<<_xdot_hand.transpose()<<endl;\n+\n+\t\t\n+\n+\t\tif (HandTrajectory.check_trajectory_complete() == 1)\n+\t\t{\n+\t\t\t_bool_plan(_cnt_plan) = 1;\n+\t\t\t_bool_init = true;\n+\t\t}\n+\t\tCLIK();\n+\t}\n+\telse if(_control_mode == 3) //MPPI\n+\t{\n+\t\t// if (_t - _init_t < 0.1 && _bool_joint_motion == false)\n+\t\t// {\n+\t\t// \t_start_time = _init_t;\n+\t\t// \t_end_time = _start_time + _motion_time;\n+\t\t// \tJointTrajectory.reset_initial(_start_time, _q, _qdot);\n+\t\t// \tJointTrajectory.update_goal(_q_goal, _qdot_goal, _end_time);\n+\t\t// \t_bool_joint_motion = true;\n+\t\t// \t_bool_plan(_cnt_plan) = 0;\n+\t\t// \t// Mppi.Trajectory_init(_q_order);\n+\t\t// \t// _cnt_mppi = 20;\n+\t\t// }\n+\n+\t\t// JointTrajectory.update_time(_t);\n+\t\t\n+\t\tfor(int i = 0; i<6; i++)\n+\t\t{\n+\t\t\ttmp_q(i) = _goal_pos_cuda[i];\n+\t\t}\n+\n+\t\t// std::chrono::steady_clock::time_point st_start_time;\n+\t\t// st_start_time = std::chrono::steady_clock::now();\n+\t\t// double control_time_real_ = 0.0;\n+\t\t// gpuacc.cuda_cal(_q_for_cuda,_qdot_for_cuda, _goal_pos_cuda, 1, _alpha, _returnArray); // goal, control_mode, return // control_mode = 0 : Joint Space Control, control_mode = 1 : Task Space Control\n+\t\tgpuacc.cuda_cal(_q_for_cuda,_qdot_for_cuda, _goal_pos_cuda, 1, _alpha, _beta, _time_rl, _returnArray); // goal, control_mode, return // control_mode = 0 : Joint Space Control, control_mode = 1 : Task Space Control\n+\t\t// control_time_real_ = std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::steady_clock::now() - st_start_time).count();\n+\t\t// control_time_real_ = control_time_real_ / 1000;\n+\t\t// cout<<\"all : \"<<control_time_real_<<\"ms\"<<endl<<endl;\n+\n+\t\t_torque.setZero();\n+\t\t_A_diagonal = Model._A;\n+\t\tfor(int i = 0; i < 7; i++)\n+\t\t{\n+\t\t\t_A_diagonal(i, i) += 1.0;\n+\t\t\t_q_des(i) = _returnArray[i];\n+\t\t\t_qdot_des(i) = _returnArray[i+7];\n+\t\t\t_qdotdot_des(i) = _returnArray[i+14];\n+\t\t}\n+\n+\t\t// cout<<\"_goal_pos_cuda\t\t:   \"<<tmp_q.transpose()<<endl;\n+\t\t// cout<<\"_x_hand.transpose()\t:   \"<<_x_hand.transpose()<<endl;\n+\t\t// cout<<\"_q_des       \t\t:   \"<<_q_des.transpose()<<endl;\n+\t\t// cout<<\"_q           \t\t:   \"<<_q.transpose()<<endl;\n+\t\t// cout<<\"_qdot_des    \t\t:   \"<<_qdot_des.transpose()<<endl;\n+\t\t// cout<<\"_qdot        \t\t:   \"<<_qdot.transpose()<<endl;\n+\t\t// cout<<\"_qdotdot_des \t\t:   \"<<_qdotdot_des.transpose()<<endl<<endl;\n+\n+\t\t_torque = _A_diagonal*(400*(_q_des - _q) + 40*(_qdot_des - _qdot)) + Model._bg;\n+\t\t\n+\t\tif (JointTrajectory.check_trajectory_complete() == 1)\n+\t\t{\n+\t\t\t// _bool_plan(_cnt_plan) = 1;\n+\t\t\t_bool_init = true;\n+\t\t}\n+\t}\n+}\n+\n+void CController::ModelUpdate()\n+{\n+    Model.update_kinematics(_q, _qdot);\n+\tModel.update_dynamics();\n+    Model.calculate_EE_Jacobians();\n+\tModel.calculate_EE_positions_orientations();\n+\tModel.calculate_EE_velocity();\n+\n+\t_J_hands = Model._J_hand;\n+\n+\t_x_hand.head(3) = Model._x_hand;\n+\t_x_hand.tail(3) = CustomMath::GetBodyRotationAngle(Model._R_hand);\n+\t// cout<<\"_x_hand : \"<<_x_hand.transpose()<<endl;\n+\t// cout<<\"Model._J_hands : \"<<endl<<Model._J_hand<<endl;\n+\n+\t_xdot_hand = Model._xdot_hand;\n+}\t\n+\n+void CController::motionPlan()\n+{\t\n+\tif (_bool_plan(_cnt_plan) == 1)\n+\t{\n+\t\t// save_stack();\n+\t\t// _q_order.setZero(7);\n+\t\t// for(int i = 0; i< 7; i++)\n+\t\t// {\n+\t\t// \t_q_order(i) =rand_FloatRange(_min_joint_position(i),_max_joint_position(i));\n+\t\t// }\n+\t\t// reset_target(5.0, _q_order);\n+\n+\t\t////////////////////////////////////////////////////////\n+\t\t////////////////////////////////////////////////////////\n+\t\tif(_cnt_plan == 0)\n+\t\t{\n+\t\t\t_q_order(0) = 0.742;\n+\t\t\t_q_order(1) = -1.83;\n+\t\t\t_q_order(2) = -2.97;\n+\t\t\t_q_order(3) = -3.14;\n+\t\t\t_q_order(4) = -2.79;\n+\t\t\t_q_order(5) = 0.478;\n+\t\t\t_q_order(6) = 0.565;\n+\t\t\treset_target(10.0, _q_order);\n+\t\t\t_cnt_plan++;\n+\t\t}\n+\n+\t\telse if(_cnt_plan == 1)\n+\t\t{\n+\t\t\t_q_order(0) = -1.87;\n+\t\t\t_q_order(1) = -1.83;\n+\t\t\t_q_order(2) = -2.55;\n+\t\t\t_q_order(3) = -2.8;\n+\t\t\t_q_order(4) = 0.623;\n+\t\t\t_q_order(5) = 0.48;\n+\t\t\t_q_order(6) = 0.564;\t\t                    \n+\t\t\treset_target(10.0, _q_order);\n+\t\t\t_cnt_plan++;\n+\t\t}\n+\t\telse if(_cnt_plan == 2)\n+\t\t{\n+\t\t\t_q_order(0) = -1.87;\n+\t\t\t_q_order(1) = -1.1;\n+\t\t\t_q_order(2) = -1.16;\n+\t\t\t_q_order(3) = -2.1;\n+\t\t\t_q_order(4) = 0.89;\n+\t\t\t_q_order(5) = 0.44;\n+\t\t\t_q_order(6) = -0.386;\t\t                    \n+\t\t\treset_target(10.0, _q_order);\n+\t\t\t_cnt_plan++;\t\t\t\n+\t\t}\n+\t\telse if(_cnt_plan == 3)\n+\t\t{\n+\t\t\t_q_order(0) = -1.47;\n+\t\t\t_q_order(1) = -0.5;\n+\t\t\t_q_order(2) = -0.4;\n+\t\t\t_q_order(3) = -1.3;\n+\t\t\t_q_order(4) = 0.3;\n+\t\t\t_q_order(5) = 0.1;\n+\t\t\t_q_order(6) = -0.1;\t\t                    \n+\t\t\treset_target(10.0, _q_order);\n+\t\t\t_cnt_plan++;\t\t\t\n+\t\t}\n+\t\t////////////////////////////////////////////////////////\n+\t\t////////////////////////////////////////////////////////\n+\n+\t\t// if(_cnt_plan == 3)\n+\t\t// {\n+\t\t// \tsave_stack();\n+\t\t// \t_cnt_plan++;\n+\t\t// }\n+\t\t// for(int i = 0; i< 7; i++)\n+\t\t// {\n+\t\t// \t_q_order(i) =rand_FloatRange(_min_joint_position(i),_max_joint_position(i));\n+\t\t// }\n+\t\t// cout<<\"_q_result : \"<<_q.transpose()<<endl<<endl;\n+\t\t// cout<<\"_q_order : \"<<_q_order.transpose()<<endl;\n+\t\t// _q_order(0) = 0.742;\n+\t\t// _q_order(1) = -0.733;\n+\t\t// _q_order(2) = 1.19;\n+\t\t// _q_order(3) = -1.9;\n+\t\t// _q_order(4) = 1.1;\n+\t\t// _q_order(5) = 2.24;\n+\t\t// _q_order(6) = -0.475;\t\t                    \n+\t\t\n+\t}\n+}\n+\n+void CController::reset_target(double motion_time, VectorXd target_joint_position)\n+{\n+\t_control_mode = 3;\n+\t_motion_time = motion_time;\n+\t_bool_joint_motion = false;\n+\t_bool_ee_motion = false;\n+\n+\t// _q_goal = target_joint_position.head(7);\n+\t// _qdot_goal.setZero();\n+}\n+\n+void CController::reset_target(double motion_time, VectorXd target_joint_position, VectorXd target_joint_velocity)\n+{\n+\t_control_mode = 1;\n+\t_motion_time = motion_time;\n+\t_bool_joint_motion = false;\n+\t_bool_ee_motion = false;\n+\n+\t_q_goal = target_joint_position.head(7);\n+\t_qdot_goal = target_joint_velocity.head(7);\n+}\n+\n+void CController::reset_target(double motion_time, Vector3d target_pos, Vector3d target_ori)\n+{\n+\t_control_mode = 2;\n+\t_motion_time = motion_time;\n+\t_bool_joint_motion = false;\n+\t_bool_ee_motion = false;\n+\n+\t_x_goal_hand.head(3) = target_pos;\n+\t_x_goal_hand.tail(3) = target_ori;\n+\t_xdot_goal_hand.setZero();\n+}\n+\n+void CController::JointControl()\n+{\t\n+\t_torque.setZero();\n+\tfor(int i = 0; i < 7; i++){\n+\t\t_A_diagonal(i,i) = Model._A(i,i);\n+\t}\n+\t// _torque = Model._A*(_kpj*(_q_des - _q) + _kdj*(_qdot_des - _qdot)) + Model._bg;\n+\t_torque = _A_diagonal*(_kpj*(_q_des - _q) + _kdj*(_qdot_des - _qdot)) + Model._bg;\n+}\n+\n+void CController::CLIK()\n+{\n+\t_torque.setZero();\t\n+\n+\t_x_err_hand.segment(0,3) = _x_des_hand.head(3) - _x_hand.head(3);\n+\t_x_err_hand.segment(3,3) = -CustomMath::getPhi(Model._R_hand, _R_des_hand);\n+\n+\t_J_bar_hands = CustomMath::pseudoInverseQR(_J_hands);\n+\t// _J_bar_hands = CustomMath::DampedWeightedPseudoInverse(_J_hands,_I*0.01,true);\n+\n+\t_dt = 0.003;\n+\t_qdot_des = _J_bar_hands*(_xdot_des_hand + _x_kp*(_x_err_hand));\n+\t_q_des = _q_des + _dt*_qdot_des;\n+\t\n+\t// cout<<\"_q_des \t: \"<<_q_des.transpose()<<endl;\n+\t// cout<<\"_q \t: \"<<_q.transpose()<<endl;\n+\n+\tfor(int i = 0; i < 7; i++){\n+\t\t_A_diagonal(i,i) = Model._A(i,i);\n+\t}\n+\t// _q_des  : -0.175 -0.042 -0.286 -1.755 -0.002  1.786 -0.458\n+\t// _q      : -0.175 -0.044 -0.286 -1.752 -0.002  1.786 -0.458\n+\t// _torque = _A_diagonal*(_kpj*(_q_des - _q) + _kdj*(_qdot_des - _qdot)) + Model._bg;\n+\t// _torque = _A_diagonal*(_kpj*(_q_des - _q) + _kdj*(_qdot_des - _qdot)) + Model._bg;\n+\t// _torque = _A_diagonal*(_kpj*(_q_des - _q) + _kdj*(_qdot_des - _qdot));\n+\t\t// for(int i= 0; i<7; i++)\n+\t\t// {\n+\t\t// \tif(i<4)\n+\t\t// \t{\n+\t\t// \t\tif(i == 1)\n+\t\t// \t\t{\n+\t\t// \t\t\t_torque(i) = 1000 * (_q_des(i) - _q(i)) + 50 * (_qdot_des(i) - _qdot(i)) + Model._bg(i);\t\n+\t\t// \t\t}\n+\t\t// \t\telse\n+\t\t// \t\t{\n+\t\t// \t\t\t_torque(i) = 1000 * (_q_des(i) - _q(i)) + 20 * (_qdot_des(i) - _qdot(i)) + Model._bg(i);\n+\t\t// \t\t}\t\t\t\t\n+\t\t// \t}\n+\t\t// \telse\n+\t\t// \t{\n+\t\t// \t\t_torque(i) = 200 * (_q_des(i) - _q(i)) + 10 * (_qdot_des(i) - _qdot(i)) + Model._bg(i);\n+\t\t// \t}\n+\t\t// }\n+\n+\t// \t_kpj_diagonal.setZero(_k, _k);\n+\t// //\t\t\t\t\t\t\t0 \t\t1\t2\t\t3\t   4\t5 \t6\n+\t// _kpj_diagonal.diagonal() << 400., 2500., 1500., 1700., 700., 500., 520.;\n+\t// _kdj_diagonal.setZero(_k, _k);\n+\t// _kdj_diagonal.diagonal() << 20., 250., 170., 320., 70., 50., 15.;\n+\n+\n+\t_torque(0) = 400*(_q_des(0)-_q(0)) + 20*(_qdot_des(0)-_qdot(0));\n+\t_torque(1) = 2500*(_q_des(1)-_q(1)) + 250*(_qdot_des(1)-_qdot(1));\n+\t_torque(2) = 1500*(_q_des(2)-_q(2)) + 170*(_qdot_des(2)-_qdot(2));\n+\t_torque(3) = 1700*(_q_des(3)-_q(3)) + 320*(_qdot_des(3)-_qdot(3));\n+\t_torque(4) = 700*(_q_des(4)-_q(4)) + 70*(_qdot_des(4)-_qdot(4));\n+\t_torque(5) = 500*(_q_des(5)-_q(5)) + 50*(_qdot_des(5)-_qdot(5));\n+\t_torque(6) = 520*(_q_des(6)-_q(6)) + 15*(_qdot_des(6)-_qdot(6));\n+\n+\t// cout << _torque.transpose() << endl;\n+\t// _torque =  Model._A*(_kp*(_q_des - _q) + _kd*(_qdot_des - _qdot)) + Model._bg;\n+}\n+\n+void CController::reset_goal_pybind()\n+{\n+\t// cout<<\":::::::::::::Controller reset_goal:::::::::::::\"<<endl<<endl;\n+\tsrand( (unsigned)time( NULL ) );\n+\tsel_ = 1 + static_cast <float> (rand()) / ( static_cast <float> (RAND_MAX/(2-1))); // 1 ~ 2\n+\tif(sel_ >= 1.5)\n+\t{\n+\t\t_goal_pos_cuda[0] = 0.1 + static_cast <float> (rand()) / ( static_cast <float> (RAND_MAX/(0.4-0.1))); // 0.1 ~ 0.4\n+\t}\n+\telse\n+\t{\n+\t\t_goal_pos_cuda[0] = -1 * (0.1 + static_cast <float> (rand()) / ( static_cast <float> (RAND_MAX/(0.4-0.1)))); // 0.1 ~ 0.4\n+\t}\n+\n+\tsel_ = 1 + static_cast <float> (rand()) / ( static_cast <float> (RAND_MAX/(2-1))); // 1 ~ 2\n+\tif(sel_ >= 1.5)\n+\t{\n+\t\t_goal_pos_cuda[1] = 0.1 + static_cast <float> (rand()) / ( static_cast <float> (RAND_MAX/(0.4-0.1))); // 0.1 ~ 0.4\n+\t}\n+\telse\n+\t{\n+\t\t_goal_pos_cuda[1] = -1 * (0.1 + static_cast <float> (rand()) / ( static_cast <float> (RAND_MAX/(0.4-0.1)))); // 0.1 ~ 0.4\n+\t}\n+\n+\t_goal_pos_cuda[2] = -0.1 + static_cast <float> (rand()) / ( static_cast <float> (RAND_MAX/(0.7+0.1))); // -0.1 ~ 0.7\n+\n+\t_goal_pos_cuda[3] = -PI + static_cast <float> (rand()) / ( static_cast <float> (RAND_MAX/(PI+PI))); // -PI ~ PI\n+\t_goal_pos_cuda[4] = -PI + static_cast <float> (rand()) / ( static_cast <float> (RAND_MAX/(PI+PI))); // -PI ~ PI\n+\t_goal_pos_cuda[5] = -PI + static_cast <float> (rand()) / ( static_cast <float> (RAND_MAX/(PI+PI))); // -PI ~ PI\n+\n+\t_alpha[0] = 5;\n+\t_beta[0] = 5;\n+}\n+\n+void CController::Initialize()\n+{\n+\t// cout<<\":::::::::::::Controller Initialize:::::::::::::\"<<endl<<endl;\n+\tgpuacc.RL_initialize();\n+\n+\tmemset(_q_for_cuda, 0, _JDOF * sizeof(double));\n+\tmemset(_qdot_for_cuda, 0, _JDOF * sizeof(double));\n+\n+\tsrand( (unsigned)time( NULL ) );\n+\tsel_ = 1 + static_cast <float> (rand()) / ( static_cast <float> (RAND_MAX/(2-1))); // 1 ~ 2\n+\tif(sel_ >= 1.5)\n+\t{\n+\t\t_goal_pos_cuda[0] = 0.1 + static_cast <float> (rand()) / ( static_cast <float> (RAND_MAX/(0.4-0.1))); // 0.1 ~ 0.4\n+\t}\n+\telse\n+\t{\n+\t\t_goal_pos_cuda[0] = -1 * (0.1 + static_cast <float> (rand()) / ( static_cast <float> (RAND_MAX/(0.4-0.1)))); // 0.1 ~ 0.4\n+\t}\n+\n+\tsel_ = 1 + static_cast <float> (rand()) / ( static_cast <float> (RAND_MAX/(2-1))); // 1 ~ 2\n+\tif(sel_ >= 1.5)\n+\t{\n+\t\t_goal_pos_cuda[1] = 0.1 + static_cast <float> (rand()) / ( static_cast <float> (RAND_MAX/(0.4-0.1))); // 0.1 ~ 0.4\n+\t}\n+\telse\n+\t{\n+\t\t_goal_pos_cuda[1] = -1 * (0.1 + static_cast <float> (rand()) / ( static_cast <float> (RAND_MAX/(0.4-0.1)))); // 0.1 ~ 0.4\n+\t}\n+\n+\t_goal_pos_cuda[2] = -0.1 + static_cast <float> (rand()) / ( static_cast <float> (RAND_MAX/(0.7+0.1))); // -0.1 ~ 0.7\n+\n+\t_goal_pos_cuda[3] = -PI + static_cast <float> (rand()) / ( static_cast <float> (RAND_MAX/(PI+PI))); // -PI ~ PI\n+\t_goal_pos_cuda[4] = -PI + static_cast <float> (rand()) / ( static_cast <float> (RAND_MAX/(PI+PI))); // -PI ~ PI\n+\t_goal_pos_cuda[5] = -PI + static_cast <float> (rand()) / ( static_cast <float> (RAND_MAX/(PI+PI))); // -PI ~ PI\n+\n+\t// _qdot_for_cuda = \n+\t// time_cnt = 1;\n+\t// time_check = 0.0;\n+\t// max_time_check = 0.0;\n+\t// memset(max_time_check, 0, 500 * sizeof(double));\n+\n+\t////////////////////////\n+\t_q_acc_matrix.setZero(21,20);\n+\t_q_acc.setZero(7);\n+\t_old_torque.setZero(7);\n+\t// _cnt_mppi = 20;\n+\t// _mppi.setZero(21);\n+\t_qdotdot_des.setZero(7);\n+\t/////////////////////////\n+\t\n+    _control_mode = 3; //1: joint space, 2: task space(CLIK)\n+\n+\t_bool_init = true;\n+\t_t = 0.0;\n+\t_init_t = 0.0;\n+\t_pre_t = 0.0;\n+\t_dt = 0.0;\n+\n+\t_kpj = 400.0;\n+\t_kdj = 20.0;\n+\n+\t// _kpj_diagonal.setZero(_k, _k);\n+\t// //\t\t\t\t\t\t\t0 \t\t1\t2\t\t3\t   4\t5 \t6\n+\t// _kpj_diagonal.diagonal() << 400., 2500., 1500., 1700., 700., 500., 520.;\n+\t// _kdj_diagonal.setZero(_k, _k);\n+\t// _kdj_diagonal.diagonal() << 20., 250., 170., 320., 70., 50., 15.;\n+\t_x_kp =1;//작게 0.1\n+\t// _x_kp = 20.0;\n+\n+    _q.setZero(_k);\n+\t_qdot.setZero(_k);\n+\t_torque.setZero(_k);\n+\n+\t_J_hands.setZero(6,_k);\n+\t_J_bar_hands.setZero(_k,6);\n+\n+\t_x_hand.setZero(6);\n+\t_xdot_hand.setZero(6);\n+\n+\t//////////////////원본///////////////////\n+\t// _cnt_plan = 0;\n+\t// _bool_plan.setZero(30);\n+\t// _time_plan.resize(30);\n+\t// _time_plan.setConstant(5.0);\n+\t//////////////////원본///////////////////\n+\ttimestep_cnt = 200001;\n+\t_cnt_plan = 0;\n+\t_bool_plan.setZero(timestep_cnt+1); //20\n+\t_time_plan.resize(timestep_cnt+1);  //20\n+\t_time_plan.setConstant(1.0);\n+\n+\t_q_home.setZero(_k);\n+\t// _q_home(0) = 0.0;\n+\t// _q_home(1) = -30.0 * DEG2RAD;\n+\t// _q_home(2) = 30.0 * DEG2RAD;\n+\t// _q_home(3) = -30.0 * DEG2RAD;\n+\t// _q_home(4) = 30.0 * DEG2RAD;\n+\t// _q_home(5) = -60.0 * DEG2RAD;\n+\t// _q_home(6) = 30.0 * DEG2RAD;\n+\t_q_home(0) = 0.374;\n+\t_q_home(1) = -1.02;\n+\t_q_home(2) = 0.245;\n+\t_q_home(3) = -1.51;\n+\t_q_home(4) = 0.0102;\n+\t_q_home(5) = 0.655;\n+\t_q_home(6) = 0.3;\n+\n+\t_start_time = 0.0;\n+\t_end_time = 0.0;\n+\t_motion_time = 0.0;\n+\n+\t_bool_joint_motion = false;\n+\t_bool_ee_motion = false;\n+\n+\t_q_des.setZero(_k);\n+\t_qdot_des.setZero(_k);\n+\t_q_goal.setZero(_k);\n+\t_qdot_goal.setZero(_k);\n+\n+\t_x_des_hand.setZero(6);\n+\t_xdot_des_hand.setZero(6);\n+\t_x_goal_hand.setZero(6);\n+\t_xdot_goal_hand.setZero(6);\n+\n+\t_pos_goal_hand.setZero(); // 3x1 \n+\t_rpy_goal_hand.setZero(); // 3x1\n+\n+\tJointTrajectory.set_size(_k);\n+\t_A_diagonal.setZero(_k,_k);\n+\n+\t// torque_command.clear();\n+\n+\n+\t_x_err_hand.setZero(6);\n+\t_R_des_hand.setZero();\n+\n+\t_I.setIdentity(7,7);\n+\n+\t_pre_q.setZero(7);\n+\t_pre_qdot.setZero(7);\n+\n+\t///////////////////save_stack/////////////////////\n+\t_q_order.setZero(7);\n+\t_q_home_old.setZero(7);\n+\t_max_joint_position.setZero(7);\n+\t_min_joint_position.setZero(7);\n+\n+\t_min_joint_position(0) = -2.9671;\n+\t_min_joint_position(1) = -1.8326;\n+\t_min_joint_position(2) = -2.9671;\n+\t_min_joint_position(3) = -3.1416;\n+\t_min_joint_position(4) = -2.9671;\n+\t_min_joint_position(5) = -0.0873;\n+\t_min_joint_position(6) = -2.9671;\n+\n+\t_max_joint_position(0) = 2.9671;\n+\t_max_joint_position(1) = 1.8326;\n+\t_max_joint_position(2) = 2.9671;\n+\t_max_joint_position(3) = 0.0;\n+\t_max_joint_position(4) = 2.9671;\n+\t_max_joint_position(5) = 3.8223;\n+\t_max_joint_position(6) = 2.9671;\n+\n+\tcheck_save_log_once = true;\n+\tsave_q_once = true;\n+\n+\tcheck_7 = 0;\n+\ta = 0;\n+\tcnt2 = 0;\n+\t_rat = 0;\n+\t_ratt = 0;\n+\tratrat = 135;\n+\n+\tprevent_duplicate = 0.01;\n+\t_tmp = 0.0;\n+\t///////////////////save_stack/////////////////////\n+\n+\t///////////////////estimate_lr/////////////////////\n+\t_nodes = 100;\n+\t///////////////////estimate_lr/////////////////////\n+\n+\tcout << fixed;\n+\tcout.precision(3);\n+\t_pre_qdotdot_des.setZero(7);\n+\ttmp_q.setZero(6);\n+\t_cnt_plan = 0;\n+\t_bool_plan(_cnt_plan) = 1;\n+}\n+\n+double CController::estimate_LR(double _input[])\n+{\n+    for(int j = 0 ; j<_nodes; j++)\n+    {\n+        _hidden0[j] = 0.0;\n+        _hidden1[j] = 0.0;\n+    }\n+    for(int j = 0 ; j<_nodes; j++)\n+    {\n+        for(int i = 0; i<7 ;i++)\n+        {\n+            _hidden0[j] = _hidden0[j] + _input[i] * _weight0[i][j];\n+        }\n+        _hidden0[j] = _hidden0[j] + _weight1[j]; \n+        if(_hidden0[j] <= 0)\n+        {\n+            _hidden0[j] = 0.0;\n+        }\n+    }\n+    for(int j = 0 ; j<_nodes; j++)\n+    {\n+        for(int i = 0; i<_nodes ;i++)\n+        {\n+            _hidden1[j] = _hidden1[j] + _hidden0[i] * _weight2[i][j]; \n+        }\n+        _hidden1[j] = _hidden1[j] + _weight3[j];\n+        if(_hidden1[j] <= 0)\n+        {\n+            _hidden1[j] = 0.0;\n+        }\n+    }\n+\n+    _output1 = 0.0;\n+\n+    for(int i = 0; i<_nodes ;i++)\n+    {\n+        _output1 = _hidden1[i] * _weight4[i] + _output1;\n+    }\n+\t_output1 = _output1 + _weight5;\n+\t_output1 = 1.0 / (1.0 + exp(-_output1));\n+\t// cout<<\"_output1 : \"<<_output1<<endl;\n+\treturn _output1;\n+}\n+\n+void CController::save_stack()\n+{\n+\t// for(int i = 0; i<500; i++)\n+\t// {\n+\t// \tcout<<\"Max time[\"<<i<<\"] : \"<<max_time_check[i]<<\"ms\"<<endl;\n+\t// }\n+\t// cout<<\"time_cnt : \"<<time_cnt<<\"개\"<<endl<<endl;\n+\t// cout<<\"Avg time : \"<<(double)time_check/time_cnt<<\"ms\"<<endl<<endl;\n+\tif( check_save_log_once == true)\n+\t{\n+\t\tcheck_save_log_once = false;\n+\t\t// filename << \"/home/kist/KDH/Backup/KIST-Dual-Arm-Operational-Space-Control-main2/save_data/dual_arm_data_plus_0417.txt\";\n+\t\t// filename << \"/home/kist/KDH/Backup/KIST-Dual-Arm-Operational-Space-Control-main2/save_data/collcheck3.txt\";\n+\t\tfilename << \"/home/kist/KDH/Backup/franka_panda_2.0.0/save_data/panda_mppi_0609.txt\";\n+\t\t// output.open(\"/home/kist/KDH/Backup/KIST-Dual-Arm-Operational-Space-Control-main2/save_data/data_0406.txt\");\n+\t\tif(a != 0)\n+\t\t{\n+\t\t\toutput.open(\"/home/kist/KDH/Backup/franka_panda_2.0.0/save_data/panda_mppi_0609.txt\");\n+\t\t\tfor(int i = 0; i<a; i++)\n+\t\t\t{\n+\t\t\t\tcheck_7++;\n+\t\t\t\tif(check_7 == 12)\n+\t\t\t\t{\n+\t\t\t\t\toutput<<log_output[i]<<endl;\n+\t\t\t\t\tcheck_7 = 0;\n+\t\t\t\t}\n+\t\t\t\telse\n+\t\t\t\t{\n+\t\t\t\t\toutput<<log_output[i]<<\",\";\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\toutput.close();\n+\t\t\ta = 0;\n+\t\t\tcout<<\"first log time\"<<endl;\n+\t\t}\n+\t\telse\n+\t\t{\n+\t\t\tcout<<\"first log time but a == 0\"<<endl;\n+\t\t\tcheck_save_log_once = true;\n+\t\t}\n+\t\t\n+\t}\n+\telse\n+\t{\n+\t\tif( a != 0 )\n+\t\t{\n+\t\t\toutput.open(\"/home/kist/KDH/Backup/franka_panda_2.0.0/save_data/panda_mppi_0609.txt\",ios::app);\n+\t\t\tfor(int i = 0; i<a; i++)\n+\t\t\t{\n+\t\t\t\tcheck_7++;\n+\t\t\t\tif(check_7 == 12)\n+\t\t\t\t{\n+\t\t\t\t\toutput<<log_output[i]<<endl;\n+\t\t\t\t\tcheck_7 = 0;\n+\t\t\t\t}\n+\t\t\t\telse\n+\t\t\t\t{\n+\t\t\t\t\toutput<<log_output[i]<<\",\";\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\toutput.close();\n+\t\t\ta = 0;\n+\t\t\tcout<<\"log\"<<endl;\n+\t\t}\n+\t\telse\n+\t\t{\n+\t\t\tcout<<\" a == 0 \"<< endl;\n+\t\t}\n+\t}\n+}\n+\n+float CController::rand_FloatRange(float a, float b){\n+\tif(_t < 0.01)\n+\t{\n+\t\tsrand((unsigned)time(NULL));\n+\t}\n+\n+\t// float k = (float)rand();\n+\t// cout<<\"k : \"<<k<<endl;\n+    return ((b-a)*((float)rand()/RAND_MAX))+a;\n+}\n+\n+// void CController::RL_goal_reset()\n+// {\n+// \tsrand( (unsigned)time( NULL ) );\n+// \t_goal_pos_cuda[0] = -0.75 + static_cast <float> (rand()) / ( static_cast <float> (RAND_MAX/(0.75+0.75))); // -0.75 ~ 0.75\n+// \t_goal_pos_cuda[1] = -0.75 + static_cast <float> (rand()) / ( static_cast <float> (RAND_MAX/(0.75+0.75))); // -0.75 ~ 0.75\n+// \t_goal_pos_cuda[2] = -0.2 + static_cast <float> (rand()) / ( static_cast <float> (RAND_MAX/(0.95+0.2))); // -0.2 ~ 0.95\n+\n+// \t_goal_pos_cuda[3] = -3.14 + static_cast <float> (rand()) / ( static_cast <float> (RAND_MAX/(3.14+3.14))); // -3.14 ~ 3.14\n+// \t_goal_pos_cuda[4] = -3.14 + static_cast <float> (rand()) / ( static_cast <float> (RAND_MAX/(3.14+3.14))); // -3.14 ~ 3.14\n+// \t_goal_pos_cuda[5] = -3.14 + static_cast <float> (rand()) / ( static_cast <float> (RAND_MAX/(3.14+3.14))); // -3.14 ~ 3.14\n+// }\n+\n+void CController::load_weight()\n+{\n+\t/////joint limit 기준 0407이 가장 잘되는 상황////\n+    ////////0,7///////////////////////\n+    weight0.open(\"/home/kist/KDH/Backup/franka_panda/weight/best_model_panda_0427_2[0].txt\");\n+    for(int i = 0; i<7 ; i++)\n+    {\n+        for(int j = 0; j<_nodes ; j++)\n+        {\n+            weight0 >> _weight0[i][j];\n+        }\n+    }\n+    weight0.close();\n+    \n+\n+    weight0.open(\"/home/kist/KDH/Backup/franka_panda/weight/best_model_panda_0427_2[1].txt\");\n+    for(int i = 0; i<_nodes ; i++)\n+    {\n+        weight0 >> _weight1[i];\n+    }\n+    weight0.close();\n+\n+    weight0.open(\"/home/kist/KDH/Backup/franka_panda/weight/best_model_panda_0427_2[2].txt\");\n+    for(int i = 0; i<_nodes ; i++)\n+    {\n+        for(int j = 0; j<_nodes ; j++)\n+        {\n+            weight0 >> _weight2[i][j];\n+        }\n+    }\n+    weight0.close();\n+\n+    weight0.open(\"/home/kist/KDH/Backup/franka_panda/weight/best_model_panda_0427_2[3].txt\");\n+    for(int i = 0; i<_nodes ; i++)\n+    {\n+        weight0 >> _weight3[i];\n+    }\n+    weight0.close();\n+\n+    weight0.open(\"/home/kist/KDH/Backup/franka_panda/weight/best_model_panda_0427_2[4].txt\");\n+    for(int i = 0; i<_nodes ; i++)\n+    {\n+        weight0 >> _weight4[i];\n+    }\n+    weight0.close();\n+\n+    weight0.open(\"/home/kist/KDH/Backup/franka_panda/weight/best_model_panda_0427_2[5].txt\");\n+    weight0 >> _weight5;\n+    weight0.close();\n+}\n+\n+// namespace py = pybind11;\n+// PYBIND11_MODULE(controller, m)\n+// {\n+//   m.doc() = \"pybind11 for controller\";\n+//   py::class_<CController>(m, \"CController\")\n+//       .def(py::init())\n+// \t  // Initialize // control_mujoco // read_pybind // write_pybind // \n+//       .def(\"read\", &CController::read_pybind)\n+// \t  .def(\"control_mujoco\", &CController::control_mujoco)\n+// \t  .def(\"write\", &CController::write_pybind)\n+// \t  .def(\"state_controller\", &CController::state_for_pybind)\t  \n+// \t  .def(\"reset_goal\", &CController::reset_goal_pybind)\n+// \t  .def(\"initialize\", &CController::Initialize);\n+\n+// #ifdef VERSION_INFO\n+//   m.attr(\"__version__\") = VERSION_INFO;\n+// #else\n+//   m.attr(\"__version__\") = \"dev\";\n+// #endif\n+\n+// //   m.attr(\"TEST\") = py::int_(int(42));\n+// }\n\\ No newline at end of file\n"
                }
            ],
            "date": 1689728609049,
            "name": "Commit-0",
            "content": "#include \"controller.h\"\n#include <chrono>\n\n// #include <pybind11/operators.h>\n// #include <pybind11/pybind11.h>\n// #include <pybind11/stl.h>\n\n#include <fstream> // ifstream header\n#include <iostream>\n#include <string> // getline header\n\n// CMppi Mppi;\nCudaTest gpuacc;\n\nvoid signalHandler(int signal)\n{\n    cout<<\"Received termination signal. Freeing CUDA memory...\"<<endl;\n    gpuacc.cuda_memory_free();\n\tcout<<\"Cuda_memory_free() Complete\"<<endl;\n    exit(signal);\n}\n\nCController::CController()\n{\n\t_k = 7;\n\tInitialize();\n\t// load_weight();\n}\n\nCController::~CController()\n{\n}\n\n// void CController::readJointState()\n// {\n// \tstd::ifstream file(\"/home/kist-robot2/plan1.txt\");\n\n// \tfile >> _size;\n\t\n// \ttxt_nsecs.setZero(_size);\n// \ttxt_position.setZero(_size,7);\n// \ttxt_velocity.setZero(_size,7);\n\n// \tfor(int i = 0; i < _size; i++)\n// \t{\n// \t\tfile >> txt_nsecs(i);\n\n// \t\tfor(int j = 0; j < 7; j++)\n// \t\t{\n// \t\t\tfile >> txt_position(i,j);\n// \t\t\tfile >> txt_velocity(i,j);\n// \t\t}\n// \t}\n\n// \tfor(int i = 0; i < _size; i++)\n// \t{\n// \t\tstd::cout << \"i : \" << i << txt_nsecs(i) << std::endl;\n\n// \t\tfor(int j = 0; j < 7; j++)\n// \t\t{\n// \t\t\tstd::cout << txt_position(i,j) << \" \";\n// \t\t}\n// \t\tstd::cout << std::endl;\n// \t\tfor(int j = 0; j < 7; j++)\n// \t\t{\n// \t\t\tstd::cout << txt_velocity(i,j) << \" \";\n// \t\t}\n// \t\tstd::cout << std::endl;\n// \t}\n\n// \tstd::cout << \"Load Finish -> size : \" << _size << std::endl;\n\n// \tfile.close();\n// }\n\n\nvoid CController::read(double t, double* q, double* qdot, int check, double *trans_mat_goal)\n{\t\n\t_t = t;\n\tif (_bool_init == true)\n\t{\n\t\t_init_t = _t;\n\t\t_bool_init = false;\n\t}\n\n\t_dt = t - _pre_t;\n\t_pre_t = t;\n\n\tfor (int i = 0; i < _k; i++)\n\t{\n\t\t_q(i) = q[i];\n\t\t_qdot(i) = qdot[i];\n\t\t// _qdot(i) = CustomMath::VelLowpassFilter(0.001, 2.0*PI* 10.0, _pre_q(i), _q(i), _pre_qdot(i)); //low-pass filter\n\t\t_pre_q(i) = _q(i);\n\t\t_pre_qdot(i) = _qdot(i);\t\t\n\t\tif(_t < 2.0)///use filtered data after convergece\n        {\n\t\t\t_qdot(i) = qdot[i];\n\t\t}\n\t\t_q_for_cuda[i] = q[i];\n\t\t_qdot_for_cuda[i] = qdot[i];\n\t}\n\t_goal_pos_cuda[0] = trans_mat_goal[3];\n\t_goal_pos_cuda[1] = trans_mat_goal[7];\n\t_goal_pos_cuda[2] = trans_mat_goal[11];\n\n\t    // rpy[1] = trans_mat_goal[8];\n    _goal_pos_cuda[4] = -asin(trans_mat_goal[8]);\n    if(trans_mat_goal[8] > 1.0 - 0.001 && trans_mat_goal[8] < 1.0 + 0.001)\n    {\n        _goal_pos_cuda[3] = atan2(-trans_mat_goal[1], -trans_mat_goal[2]);\n        _goal_pos_cuda[5] = 0.0;\n    }\n    else if (trans_mat_goal[8] < -1.0 + 0.001 && trans_mat_goal[8] > -1.0 - 0.001) //when trans_mat_goal(2,0) == -1\n    {//Gimbal lock, pitch = 90deg\n        _goal_pos_cuda[3] = atan2(trans_mat_goal[1], trans_mat_goal[2]);\n        _goal_pos_cuda[5] = 0.0;\n    }\n    else //general solution\n    {\n        _goal_pos_cuda[3] = atan2(trans_mat_goal[9], trans_mat_goal[10]);\n        _goal_pos_cuda[5] = atan2(trans_mat_goal[4], trans_mat_goal[0]);\n    }\n\t\n\t// cout<<\"_qdot() : \"<<_qdot.transpose()<<endl;\n\t// cout<<\"_qdot[0] : \"<<qdot[0]<<endl;\n}\n\nvoid CController::write(double* torque)\n{\n\tfor (int i = 0; i < _k; i++)\n\t{\n\t\ttorque[i] = _torque(i);\t\n\t\t// log_output[a] = _q_order(i);\n\t\t// a++;\n\t\t// log_output[a] = _q(i);\n\t\t// a++;\n\t\t// log_output[a] = _qdot(i);\n\t\t// a++;\n\t\t// log_output[a] = _qdotdot_des(i);\n\t\t// a++;\n\t\t// log_output[a] = _torque(i);\n\t\t// a++;\n\t}\n\tfor (int i = 0; i < 6; i++)\n\t{\n\t\tlog_output[a] = _goal_pos_cuda[i];\n\t\ta++;\n\t\tlog_output[a] = _x_hand(i);\n\t\ta++;\n\t}\n\t// torque[_k-2] = 0.0;\n\t// torque[_k-1] = 0.0;\n\t// torque[_k] = 0.0;\n\t// torque[_k+1] = 0.0;\n\t// _old_torque = _torque;\n}\n\n\n// for pybind11\n////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////////////\n// void CController::read_pybind(double t, std::array<double,15> q, std::array<double, 15> qdot)\n// {\t\n// \t_t = t;\n// \tif (_bool_init == true)\n// \t{\n// \t\t_init_t = _t;\n// \t\t_bool_init = false;\n// \t}\n\n// \t_dt = t - _pre_t;\n// \t_pre_t = t;\n\n// \tfor (int i = 0; i < _k; i++)\n// \t{\n// \t\t_q(i) = q[i];\n// \t\t_qdot(i) = qdot[i];\t\t\n// \t}\n// }\n\n// std::vector<double> CController::write_pybind()\n// {\n// \ttorque_command.clear();\n\n// \tfor (int i = 0; i < _k; i++)\n// \t{\n// \t\ttorque_command.push_back(_torque(i));\n// \t}\n\n// \treturn torque_command;\n// }\n////////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////////////////////\n\n\n\nvoid CController::control_mujoco()\n{\n\tsignal(SIGINT, signalHandler);\n\n    ModelUpdate();\n    motionPlan();\n\tif(_control_mode == 1) //joint space control\n\t{\n\t\tif (_t - _init_t < 0.1 && _bool_joint_motion == false)\n\t\t{\n\t\t\t_start_time = _init_t;\n\t\t\t_end_time = _start_time + _motion_time;\n\t\t\tJointTrajectory.reset_initial(_start_time, _q, _qdot);\n\t\t\tJointTrajectory.update_goal(_q_goal, _qdot_goal, _end_time);\n\t\t\t_bool_joint_motion = true;\n\t\t}\n\n\t\t// 여기서 예측을 한다면?\n\t\t// _start_time ~ _end_time 사이 시간마다 찍고 q를 받아서 적용하고 만약에 문제가 있다면?\n\t\t// 피하면서 다시 trajec 어떻게 뽑지?\n\n\t\t// -->> sampling기반으로 경로를 정해줘야함.\n\n\n\n\n\t\t\n\t\tJointTrajectory.update_time(_t);\n\t\t_q_des = JointTrajectory.position_cubicSpline();\n\t\t_qdot_des = JointTrajectory.velocity_cubicSpline();\n\n\t\tJointControl();\n\n\t\tif (JointTrajectory.check_trajectory_complete() == 1)\n\t\t{\n\t\t\t_bool_plan(_cnt_plan) = 1;\n\t\t\t_bool_init = true;\n\t\t}\n\t}\n\telse if(_control_mode == 2)\n\t{\n\t\tif (_t - _init_t < 0.1 && _bool_ee_motion == false)\n\t\t{\n\t\t\t_start_time = _init_t;\n\t\t\t_end_time = _start_time + _motion_time;\n\t\t\tHandTrajectory.reset_initial(_start_time, _x_hand, _xdot_hand);\n\t\t\tHandTrajectory.update_goal(_x_goal_hand, _xdot_goal_hand, _end_time);\n\t\t\t_bool_ee_motion = true;\n\t\t}\n\n\t\tHandTrajectory.update_time(_t);\n\n\t\t_x_des_hand.head(3) = HandTrajectory.position_cubicSpline();\n\t\t_R_des_hand = HandTrajectory.rotationCubic();\n\t\t_x_des_hand.segment<3>(3) = CustomMath::GetBodyRotationAngle(_R_des_hand);\n\n\t\t_xdot_des_hand.head(3) = HandTrajectory.velocity_cubicSpline();\n\t\t_xdot_des_hand.segment<3>(3) = HandTrajectory.rotationCubicDot();\n\n\t\tif (HandTrajectory.check_trajectory_complete() == 1)\n\t\t{\n\t\t\t_bool_plan(_cnt_plan) = 1;\n\t\t\t_bool_init = true;\n\t\t}\n\t\tCLIK();\n\t}\n\telse if(_control_mode == 3) //MPPI\n\t{\n\t\tif (_t - _init_t < 0.1 && _bool_joint_motion == false)\n\t\t{\n\t\t\t_start_time = _init_t;\n\t\t\t_end_time = _start_time + _motion_time;\n\t\t\tJointTrajectory.reset_initial(_start_time, _q, _qdot);\n\t\t\tJointTrajectory.update_goal(_q_goal, _qdot_goal, _end_time);\n\t\t\t_bool_joint_motion = true;\n\t\t\t_bool_plan(_cnt_plan) = 0;\n\t\t\t// Mppi.Trajectory_init(_q_order);\n\t\t\t// _cnt_mppi = 20;\n\t\t}\n\n\t\tJointTrajectory.update_time(_t);\n\t\t\n\n\t\t// if(_cnt_mppi == 20)\n\t\t// {\n\t\t\t\n\n\t\t// \t_q_acc_matrix = Mppi.MPPI_mat(_q,_qdot);\n\t\t// \t_cnt_mppi = 0;\n\t\t// \t// _mppi = Mppi.MPPI_vec(_q,_qdot);\n\n\t\t\t\n\t\t\n\t\t\t\n\t\t// }\n\t\t// cout<<\"??\"<<endl;\n\t\t\n\t\t////////////////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\t// _mppi = Mppi.MPPI_vec(_q,_qdot);\n\t\t\n\n\t\t// double tmp_q[7];\n\t\t// for(int i = 0; i<6; i++)\n\t\t// {\n\t\t// \t_goal_pos_cuda[i] = _q_order(i);\n\t\t// \t// tmp_q[i] = _q(i);\n\t\t// }\n\n\t\t// if(_t<10.0)\n\t\t// {\n\t\t// \t_goal_pos_cuda[0] = 0.309;\n\t\t// \t_goal_pos_cuda[1] = -0.115;\n\t\t// \t_goal_pos_cuda[2] = 0.325;\n\t\t// \t_goal_pos_cuda[3] = 0.148;\n\t\t// \t_goal_pos_cuda[4] = 0.400;\n\t\t// \t_goal_pos_cuda[5] = -1.392;\n\t\t// }\n\t\t// else if(_t>=10.0 & _t< 20.0)\n\t\t// {\n\t\t// \t_goal_pos_cuda[0] = -0.240;\n\t\t// \t_goal_pos_cuda[1] = 0.171;\n\t\t// \t_goal_pos_cuda[2] = 0.667;\n\t\t// \t_goal_pos_cuda[3] = 0.960;\n\t\t// \t_goal_pos_cuda[4] = -0.400;\n\t\t// \t_goal_pos_cuda[5] = 1.717;\n\n\t\t// }\n\n\t\t// else if(_t>=20.0 & _t< 30.0)\n\t\t// {\n\t\t\t\n\t\t// \t_goal_pos_cuda[0] = 0.318;\n\t\t// \t_goal_pos_cuda[1] = -0.118;\n\t\t// \t_goal_pos_cuda[2] = 1.053;\n\t\t// \t_goal_pos_cuda[3] = 0.372;\n\t\t// \t_goal_pos_cuda[4] = -0.950;\n\t\t// \t_goal_pos_cuda[5] = -0.186;\t\n\t\t// }\n\n\t\t// else if(_t>=30.0 & _t< 40.0)\n\t\t// {\n\t\t// \t_goal_pos_cuda[0] = -0.565;\n\t\t// \t_goal_pos_cuda[1] = -0.364;\n\t\t// \t_goal_pos_cuda[2] = 0.262;\n\t\t// \t_goal_pos_cuda[3] = 0.488;\n\t\t// \t_goal_pos_cuda[4] = 0.769;\n\t\t// \t_goal_pos_cuda[5] = -2.487;\t\t\t\n\t\t// }\n\n\t\t// else if(_t>=40.0 & _t< 50.0)\n\t\t// {\n\t\t// \t_goal_pos_cuda[0] = -0.240;\n\t\t// \t_goal_pos_cuda[1] = 0.171;\n\t\t// \t_goal_pos_cuda[2] = 0.667;\n\t\t// \t_goal_pos_cuda[3] = 0.960;\n\t\t// \t_goal_pos_cuda[4] = -0.400;\n\t\t// \t_goal_pos_cuda[5] = 1.717;\t\t\t\n\t\t// }\n\t\t// else\n\t\t// {\n\t\t// \t_goal_pos_cuda[0] = 0.291;\n\t\t// \t_goal_pos_cuda[1] = 0.203;\n\t\t// \t_goal_pos_cuda[2] = 0.564;\n\t\t// \t_goal_pos_cuda[3] = 0.541;\n\t\t// \t_goal_pos_cuda[4] = -0.455;\n\t\t// \t_goal_pos_cuda[5] = -0.248;\n\t\t// }\n\n\t\t// double _tmp_qdot_des = 0.0;\n\t\t// double _tmp_x_err = 0.0;\n\t\t// for(int i  = 0; i<7; i++)\n\t\t// {\n\t\t// \t_tmp_qdot_des += _qdot_des(i);\n\t\t// }\n\t\t// for(int i  = 0; i<3; i++)\n\t\t// {\n\t\t// \t_tmp_x_err += abs(tmp_q(i)-_x_hand(i));\n\t\t// }\n\t\t// if(_tmp_x_err > 0.5)\n\t\t// {\n\t\t// \tfor(int i = 0; i<)\n\t\t// \t_q_des\n\t\t// }\n\t\t\n\t\tfor(int i = 0; i<6; i++)\n\t\t{\n\t\t\ttmp_q(i) = _goal_pos_cuda[i];\n\t\t}\n\n\t\t// std::chrono::steady_clock::time_point st_start_time;\n\t\t// st_start_time = std::chrono::steady_clock::now();\n\t\t// double control_time_real_ = 0.0;\n\t\t// gpuacc.cuda_cal(_q_for_cuda,_qdot_for_cuda, _goal_pos_cuda, 1, _returnArray); // goal, control_mode, return // control_mode = 0 : Joint Space Control, control_mode = 1 : Task Space Control\n\t\t// control_time_real_ = std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::steady_clock::now() - st_start_time).count();\n\t\t// control_time_real_ = control_time_real_ / 1000;\n\t\t// cout<<\"all : \"<<control_time_real_<<\"ms\"<<endl<<endl;\n\t\t// time_check += control_time_real_;\n\t\t// for(int i = 0 ; i<500; i++)\n\t\t// {\n\t\t// \tif(max_time_check[i] < control_time_real_)\n\t\t// \t{\n\t\t// \t\tif(i == 499)\n\t\t// \t\t{\n\t\t// \t\t\tmax_time_check[i] = control_time_real_;\t\t\t\t\n\t\t// \t\t}\n\t\t// \t\telse\n\t\t// \t\t{\n\t\t// \t\t\tmax_time_check[i+1] = max_time_check[i];\n\t\t// \t\t\tmax_time_check[i] = control_time_real_;\t\t\t\t\n\t\t// \t\t}\n\t\t// \t\tbreak;\n\t\t// \t}\t\t\t\n\t\t// }\n\t\t// time_cnt += 1;\n\n\t\t_torque.setZero();\n\t\t// cout<<\"1\"<<endl;\n\t\tif(_cnt == 0 || _cnt>=10)\n\t\t{\n\t\t\tgpuacc.cuda_cal(_q_for_cuda,_qdot_for_cuda, _goal_pos_cuda, 1, _returnArray); // goal, control_mode, return // control_mode = 0 : Joint Space Control, control_mode = 1 : Task Space Control\n\t\t\ttmp_signal = _returnArray[0];\n\t\t\tif(tmp_signal == 0)\n\t\t\t{\n\t\t\t\tfor(int i = 0; i<70; i++)\n\t\t\t\t{\n\t\t\t\t\ttmp_pos_array[i] = 0;\n\t\t\t\t\ttmp_vel_array[i] = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tfor(int i = 0; i<7; i++)\n\t\t\t\t{\n\t\t\t\t\tfor(int j = 0; j<10; j++)\n\t\t\t\t\t{\n\t\t\t\t\t\ttmp_pos_array[i*10+j] = _returnArray[j+1+i*10];\n\t\t\t\t\t\ttmp_vel_array[i*10+j] = _returnArray[j+1+70+i*10];\n\t\t\t\t\t}\t\t\t\t\n\t\t\t\t}\n\t\t\t}\t\t\t\n\t\t}\n\t\t// cout<<\"2\"<<endl;\n\t\t\n\t\tif(tmp_signal == 0)\n\t\t{\n\t\t\tfor(int i = 0; i < 7; i++)\n\t\t\t{\n\t\t\t\t_A_diagonal(i, i) = Model._A(i,i);\n\t\t\t\t_q_des(i) = _returnArray[i+1];\n\t\t\t\t_qdot_des(i) = _returnArray[i+8];\n\t\t\t\t_qdotdot_des(i) = _returnArray[i+15];\n\t\t\t}\n\n\n\t\t\t// cout<<\"time\t\t\t:   \"<<_t<<endl<<endl;\n\t\t\t// // cout<<\"_q_order     :   \"<<_q_order.transpose()<<endl;\n\t\t\t// cout<<\"_goal_pos_cuda\t\t:   \"<<tmp_q.transpose()<<endl;\n\t\t\t// cout<<\"_x_hand.transpose()\t:   \"<<_x_hand.transpose()<<endl;\n\t\t\t// cout<<\"_q_des       \t\t:   \"<<_q_des.transpose()<<endl;\n\t\t\t// cout<<\"_q           \t\t:   \"<<_q.transpose()<<endl;\n\t\t\t// cout<<\"_qdot_des    \t\t:   \"<<_qdot_des.transpose()<<endl;\n\t\t\t// cout<<\"_qdot        \t\t:   \"<<_qdot.transpose()<<endl;\n\t\t\t// cout<<\"_qdotdot_des \t\t:   \"<<_qdotdot_des.transpose()<<endl<<endl;\n\t\t\t\n\t\t\tfor(int i= 0; i<7; i++)\n\t\t\t{\n\t\t\t\tif(_qdot_des(i) < -0.8)\n\t\t\t\t{\n\t\t\t\t\t_qdot_des(i) = -0.8;\n\t\t\t\t}\n\t\t\t\telse if(_qdot_des(i) > 0.8)\n\t\t\t\t{\n\t\t\t\t\t_qdot_des(i) = 0.8;\n\t\t\t\t}\n\t\t\t\tif(i<4)\n\t\t\t\t{\n\t\t\t\t\tif(i == 1)\n\t\t\t\t\t{\n\t\t\t\t\t\t_torque(i) = 2000 * (_q_des(i) - _q(i)) + 50 * (_qdot_des(i) - _qdot(i)) + Model._bg(i);\t\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t_torque(i) = 1200 * (_q_des(i) - _q(i)) + 20 * (_qdot_des(i) - _qdot(i)) + Model._bg(i);\n\t\t\t\t\t}\t\t\t\t\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t_torque(i) = 200 * (_q_des(i) - _q(i)) + 10 * (_qdot_des(i) - _qdot(i)) + Model._bg(i);\n\t\t\t\t}\n\t\t\t\t// 400 2500 1500 1700 700 500 520\n\t\t\t}\n\t\t\t\n\t\t\t// _torque = 200 * (_q_des - _q) + 1 * (_qdot_des - _qdot) + Model._bg;\n\t\t\t// _torque = Model._A * (400 * (_q_des - _q) + 40 * (_qdot_des - _qdot) )+ Model._bg;\n\t\t\t\n\t\t\tif (JointTrajectory.check_trajectory_complete() == 1)\n\t\t\t{\n\t\t\t\t_bool_plan(_cnt_plan) = 1;\n\t\t\t\t_bool_init = true;\n\t\t\t}\n\t\t\t_cnt = 0;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tfor(int i = 0; i < 7; i++)\n\t\t\t{\n\t\t\t\t_A_diagonal(i, i) = Model._A(i,i);\n\t\t\t\t// tmp_pos_array[i] = _returnArray[i+1];\n\t\t\t\t// tmp_vel_array[i]\n\n\t\t\t\t_q_des(i) = tmp_pos_array[_cnt+i*10];\n\t\t\t\t_qdot_des(i) = 0.0;\n\t\t\t\t// _qdotdot_des(i) = _returnArray[i+15];\n\t\t\t}\n\t\t\t// cout<<\"time\t\t\t:   \"<<_t<<endl<<endl;\n\t\t\t// // cout<<\"_q_order     :   \"<<_q_order.transpose()<<endl;\n\t\t\tcout<<\"_cnt\t\t\t\t\t:   \"<<_cnt<<endl;\n\t\t\tcout<<\"_goal_pos_cuda\t\t:   \"<<tmp_q.transpose()<<endl;\n\t\t\tcout<<\"_x_hand.transpose()\t:   \"<<_x_hand.transpose()<<endl;\n\t\t\tcout<<\"_q_des       \t\t:   \"<<_q_des.transpose()<<endl;\n\t\t\tcout<<\"_q           \t\t:   \"<<_q.transpose()<<endl;\n\t\t\tcout<<\"_qdot_des    \t\t:   \"<<_qdot_des.transpose()<<endl;\n\t\t\tcout<<\"_qdot        \t\t:   \"<<_qdot.transpose()<<endl<<endl;\n\t\t\t// cout<<\"_qdotdot_des \t\t:   \"<<_qdotdot_des.transpose()<<endl<<endl;\n\t\t\t\n\t\t\tfor(int i= 0; i<7; i++)\n\t\t\t{\n\t\t\t\tif(_qdot_des(i) < -0.8)\n\t\t\t\t{\n\t\t\t\t\t_qdot_des(i) = -0.8;\n\t\t\t\t}\n\t\t\t\telse if(_qdot_des(i) > 0.8)\n\t\t\t\t{\n\t\t\t\t\t_qdot_des(i) = 0.8;\n\t\t\t\t}\n\t\t\t\tif(i<4)\n\t\t\t\t{\n\t\t\t\t\tif(i == 1)\n\t\t\t\t\t{\n\t\t\t\t\t\t_torque(i) = 2000 * (_q_des(i) - _q(i)) + 50 * (_qdot_des(i) - _qdot(i)) + Model._bg(i);\t\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t_torque(i) = 1200 * (_q_des(i) - _q(i)) + 20 * (_qdot_des(i) - _qdot(i)) + Model._bg(i);\n\t\t\t\t\t}\t\t\t\t\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t_torque(i) = 200 * (_q_des(i) - _q(i)) + 10 * (_qdot_des(i) - _qdot(i)) + Model._bg(i);\n\t\t\t\t}\n\t\t\t\t// 400 2500 1500 1700 700 500 520\n\t\t\t}\n\t\t\t\n\t\t\t// _torque = 200 * (_q_des - _q) + 1 * (_qdot_des - _qdot) + Model._bg;\n\t\t\t// _torque = Model._A * (400 * (_q_des - _q) + 40 * (_qdot_des - _qdot) )+ Model._bg;\n\t\t\t\n\t\t\tif (JointTrajectory.check_trajectory_complete() == 1)\n\t\t\t{\n\t\t\t\t_bool_plan(_cnt_plan) = 1;\n\t\t\t\t_bool_init = true;\n\t\t\t}\n\t\t\t_cnt++;\n\t\t\tif(_cnt>=10)\n\t\t\t{\n\t\t\t\t_cnt = 0;\n\t\t\t}\n\t\t}\n\t}\n}\n\nvoid CController::ModelUpdate()\n{\n    Model.update_kinematics(_q, _qdot);\n\tModel.update_dynamics();\n    Model.calculate_EE_Jacobians();\n\tModel.calculate_EE_positions_orientations();\n\tModel.calculate_EE_velocity();\n\n\t_J_hands = Model._J_hand;\n\n\t_x_hand.head(3) = Model._x_hand;\n\t_x_hand.tail(3) = CustomMath::GetBodyRotationAngle(Model._R_hand);\n\t// cout<<\"_x_hand : \"<<_x_hand.transpose()<<endl;\n\t// cout<<\"Model._J_hands : \"<<endl<<Model._J_hand<<endl;\n\n\t_xdot_hand = Model._xdot_hand;\n}\t\n\nvoid CController::motionPlan()\n{\t\n\tif (_bool_plan(_cnt_plan) == 1)\n\t{\n\t\t// save_stack();\n\t\t// _q_order.setZero(7);\n\t\t// for(int i = 0; i< 7; i++)\n\t\t// {\n\t\t// \t_q_order(i) =rand_FloatRange(_min_joint_position(i),_max_joint_position(i));\n\t\t// }\n\t\t// reset_target(5.0, _q_order);\n\n\t\t////////////////////////////////////////////////////////\n\t\t////////////////////////////////////////////////////////\n\t\tif(_cnt_plan == 0)\n\t\t{\n\t\t\t_q_order(0) = 0.742;\n\t\t\t_q_order(1) = -1.83;\n\t\t\t_q_order(2) = -2.97;\n\t\t\t_q_order(3) = -3.14;\n\t\t\t_q_order(4) = -2.79;\n\t\t\t_q_order(5) = 0.478;\n\t\t\t_q_order(6) = 0.565;\n\t\t\treset_target(10.0, _q_order);\n\t\t\t_cnt_plan++;\n\t\t}\n\n\t\telse if(_cnt_plan == 1)\n\t\t{\n\t\t\t_q_order(0) = -1.87;\n\t\t\t_q_order(1) = -1.83;\n\t\t\t_q_order(2) = -2.55;\n\t\t\t_q_order(3) = -2.8;\n\t\t\t_q_order(4) = 0.623;\n\t\t\t_q_order(5) = 0.48;\n\t\t\t_q_order(6) = 0.564;\t\t                    \n\t\t\treset_target(10.0, _q_order);\n\t\t\t_cnt_plan++;\n\t\t}\n\t\telse if(_cnt_plan == 2)\n\t\t{\n\t\t\t_q_order(0) = -1.87;\n\t\t\t_q_order(1) = -1.1;\n\t\t\t_q_order(2) = -1.16;\n\t\t\t_q_order(3) = -2.1;\n\t\t\t_q_order(4) = 0.89;\n\t\t\t_q_order(5) = 0.44;\n\t\t\t_q_order(6) = -0.386;\t\t                    \n\t\t\treset_target(10.0, _q_order);\n\t\t\t_cnt_plan++;\t\t\t\n\t\t}\n\t\telse if(_cnt_plan == 3)\n\t\t{\n\t\t\t_q_order(0) = -1.47;\n\t\t\t_q_order(1) = -0.5;\n\t\t\t_q_order(2) = -0.4;\n\t\t\t_q_order(3) = -1.3;\n\t\t\t_q_order(4) = 0.3;\n\t\t\t_q_order(5) = 0.1;\n\t\t\t_q_order(6) = -0.1;\t\t                    \n\t\t\treset_target(10.0, _q_order);\n\t\t\t_cnt_plan++;\t\t\t\n\t\t}\n\t\t////////////////////////////////////////////////////////\n\t\t////////////////////////////////////////////////////////\n\n\t\t// if(_cnt_plan == 3)\n\t\t// {\n\t\t// \tsave_stack();\n\t\t// \t_cnt_plan++;\n\t\t// }\n\t\t// for(int i = 0; i< 7; i++)\n\t\t// {\n\t\t// \t_q_order(i) =rand_FloatRange(_min_joint_position(i),_max_joint_position(i));\n\t\t// }\n\t\t// cout<<\"_q_result : \"<<_q.transpose()<<endl<<endl;\n\t\t// cout<<\"_q_order : \"<<_q_order.transpose()<<endl;\n\t\t// _q_order(0) = 0.742;\n\t\t// _q_order(1) = -0.733;\n\t\t// _q_order(2) = 1.19;\n\t\t// _q_order(3) = -1.9;\n\t\t// _q_order(4) = 1.1;\n\t\t// _q_order(5) = 2.24;\n\t\t// _q_order(6) = -0.475;\t\t                    \n\t\t\n\t}\n}\n\nvoid CController::reset_target(double motion_time, VectorXd target_joint_position)\n{\n\t_control_mode = 3;\n\t_motion_time = motion_time;\n\t_bool_joint_motion = false;\n\t_bool_ee_motion = false;\n\n\t// _q_goal = target_joint_position.head(7);\n\t// _qdot_goal.setZero();\n}\n\nvoid CController::reset_target(double motion_time, VectorXd target_joint_position, VectorXd target_joint_velocity)\n{\n\t_control_mode = 1;\n\t_motion_time = motion_time;\n\t_bool_joint_motion = false;\n\t_bool_ee_motion = false;\n\n\t_q_goal = target_joint_position.head(7);\n\t_qdot_goal = target_joint_velocity.head(7);\n}\n\nvoid CController::reset_target(double motion_time, Vector3d target_pos, Vector3d target_ori)\n{\n\t_control_mode = 2;\n\t_motion_time = motion_time;\n\t_bool_joint_motion = false;\n\t_bool_ee_motion = false;\n\n\t_x_goal_hand.head(3) = target_pos;\n\t_x_goal_hand.tail(3) = target_ori;\n\t_xdot_goal_hand.setZero();\n}\n\nvoid CController::JointControl()\n{\t\n\t_torque.setZero();\n\tfor(int i = 0; i < 7; i++){\n\t\t_A_diagonal(i,i) = Model._A(i,i);\n\t}\n\t// _torque = Model._A*(_kpj*(_q_des - _q) + _kdj*(_qdot_des - _qdot)) + Model._bg;\n\t_torque = _A_diagonal*(_kpj*(_q_des - _q) + _kdj*(_qdot_des - _qdot)) + Model._bg;\n}\n\nvoid CController::CLIK()\n{\n\t_torque.setZero();\t\n\n\t_x_err_hand.segment(0,3) = _x_des_hand.head(3) - _x_hand.head(3);\n\t_x_err_hand.segment(3,3) = -CustomMath::getPhi(Model._R_hand, _R_des_hand);\n\n\t_J_bar_hands = CustomMath::pseudoInverseQR(_J_hands);\n\t// _J_bar_hands = CustomMath::DampedWeightedPseudoInverse(_J_hands,_I*0.01,true);\n\n\n\t_qdot_des = _J_bar_hands*(_xdot_des_hand + _x_kp*(_x_err_hand));\n\t_q_des = _q + _dt*_qdot_des;\n\n\n\tfor(int i = 0; i < 7; i++){\n\t\t_A_diagonal(i,i) = Model._A(i,i);\n\t}\n\n\t_torque = _A_diagonal*(_kpj*(_q_des - _q) + _kdj*(_qdot_des - _qdot)) + Model._bg;\n\n\t// cout << _torque.transpose() << endl;\n\t// _torque =  Model._A*(_kp*(_q_des - _q) + _kd*(_qdot_des - _qdot)) + Model._bg;\n}\n\nvoid CController::Initialize()\n{\n\tmemset(_q_for_cuda, 0, _JDOF * sizeof(double));\n\tmemset(_qdot_for_cuda, 0, _JDOF * sizeof(double));\n\t_cnt = 0;\n\ttmp_signal = 0;\n\n\t// time_cnt = 1;\n\t// time_check = 0.0;\n\t// max_time_check = 0.0;\n\t// memset(max_time_check, 0, 500 * sizeof(double));\n\n\t////////////////////////\n\t_q_acc_matrix.setZero(21,20);\n\t_q_acc.setZero(7);\n\t_old_torque.setZero(7);\n\t// _cnt_mppi = 20;\n\t// _mppi.setZero(21);\n\t_qdotdot_des.setZero(7);\n\t/////////////////////////\n\t\n    _control_mode = 3; //1: joint space, 2: task space(CLIK)\n\n\t_bool_init = true;\n\t_t = 0.0;\n\t_init_t = 0.0;\n\t_pre_t = 0.0;\n\t_dt = 0.0;\n\n\t_kpj = 400.0;\n\t_kdj = 40.0;\n\n\t_x_kp = 20.0;\n\n    _q.setZero(_k);\n\t_qdot.setZero(_k);\n\t_torque.setZero(_k);\n\n\t_J_hands.setZero(6,_k);\n\t_J_bar_hands.setZero(_k,6);\n\n\t_x_hand.setZero(6);\n\t_xdot_hand.setZero(6);\n\n\t//////////////////원본///////////////////\n\t// _cnt_plan = 0;\n\t// _bool_plan.setZero(30);\n\t// _time_plan.resize(30);\n\t// _time_plan.setConstant(5.0);\n\t//////////////////원본///////////////////\n\ttimestep_cnt = 200001;\n\t_cnt_plan = 0;\n\t_bool_plan.setZero(timestep_cnt+1); //20\n\t_time_plan.resize(timestep_cnt+1);  //20\n\t_time_plan.setConstant(1.0);\n\n\t_q_home.setZero(_k);\n\t// _q_home(0) = 0.0;\n\t// _q_home(1) = -30.0 * DEG2RAD;\n\t// _q_home(2) = 30.0 * DEG2RAD;\n\t// _q_home(3) = -30.0 * DEG2RAD;\n\t// _q_home(4) = 30.0 * DEG2RAD;\n\t// _q_home(5) = -60.0 * DEG2RAD;\n\t// _q_home(6) = 30.0 * DEG2RAD;\n\t_q_home(0) = 0.374;\n\t_q_home(1) = -1.02;\n\t_q_home(2) = 0.245;\n\t_q_home(3) = -1.51;\n\t_q_home(4) = 0.0102;\n\t_q_home(5) = 0.655;\n\t_q_home(6) = 0.3;\n\n\t_start_time = 0.0;\n\t_end_time = 0.0;\n\t_motion_time = 0.0;\n\n\t_bool_joint_motion = false;\n\t_bool_ee_motion = false;\n\n\t_q_des.setZero(_k);\n\t_qdot_des.setZero(_k);\n\t_q_goal.setZero(_k);\n\t_qdot_goal.setZero(_k);\n\n\t_x_des_hand.setZero(6);\n\t_xdot_des_hand.setZero(6);\n\t_x_goal_hand.setZero(6);\n\t_xdot_goal_hand.setZero(6);\n\n\t_pos_goal_hand.setZero(); // 3x1 \n\t_rpy_goal_hand.setZero(); // 3x1\n\n\tJointTrajectory.set_size(_k);\n\t_A_diagonal.setZero(_k,_k);\n\n\t// torque_command.clear();\n\n\n\t_x_err_hand.setZero(6);\n\t_R_des_hand.setZero();\n\n\t_I.setIdentity(7,7);\n\n\t_pre_q.setZero(7);\n\t_pre_qdot.setZero(7);\n\n\t///////////////////save_stack/////////////////////\n\t_q_order.setZero(7);\n\t_q_home_old.setZero(7);\n\t_max_joint_position.setZero(7);\n\t_min_joint_position.setZero(7);\n\n\t_min_joint_position(0) = -2.9671;\n\t_min_joint_position(1) = -1.8326;\n\t_min_joint_position(2) = -2.9671;\n\t_min_joint_position(3) = -3.1416;\n\t_min_joint_position(4) = -2.9671;\n\t_min_joint_position(5) = -0.0873;\n\t_min_joint_position(6) = -2.9671;\n\n\t_max_joint_position(0) = 2.9671;\n\t_max_joint_position(1) = 1.8326;\n\t_max_joint_position(2) = 2.9671;\n\t_max_joint_position(3) = 0.0;\n\t_max_joint_position(4) = 2.9671;\n\t_max_joint_position(5) = 3.8223;\n\t_max_joint_position(6) = 2.9671;\n\n\tcheck_save_log_once = true;\n\tsave_q_once = true;\n\n\tcheck_7 = 0;\n\ta = 0;\n\tcnt2 = 0;\n\t_rat = 0;\n\t_ratt = 0;\n\tratrat = 135;\n\n\tprevent_duplicate = 0.01;\n\t_tmp = 0.0;\n\t///////////////////save_stack/////////////////////\n\n\t///////////////////estimate_lr/////////////////////\n\t_nodes = 100;\n\t///////////////////estimate_lr/////////////////////\n\n\tcout << fixed;\n\tcout.precision(3);\n\t_pre_qdotdot_des.setZero(7);\n\ttmp_q.setZero(6);\n}\n\ndouble CController::estimate_LR(double _input[])\n{\n    for(int j = 0 ; j<_nodes; j++)\n    {\n        _hidden0[j] = 0.0;\n        _hidden1[j] = 0.0;\n    }\n    for(int j = 0 ; j<_nodes; j++)\n    {\n        for(int i = 0; i<7 ;i++)\n        {\n            _hidden0[j] = _hidden0[j] + _input[i] * _weight0[i][j];\n        }\n        _hidden0[j] = _hidden0[j] + _weight1[j]; \n        if(_hidden0[j] <= 0)\n        {\n            _hidden0[j] = 0.0;\n        }\n    }\n    for(int j = 0 ; j<_nodes; j++)\n    {\n        for(int i = 0; i<_nodes ;i++)\n        {\n            _hidden1[j] = _hidden1[j] + _hidden0[i] * _weight2[i][j]; \n        }\n        _hidden1[j] = _hidden1[j] + _weight3[j];\n        if(_hidden1[j] <= 0)\n        {\n            _hidden1[j] = 0.0;\n        }\n    }\n\n    _output1 = 0.0;\n\n    for(int i = 0; i<_nodes ;i++)\n    {\n        _output1 = _hidden1[i] * _weight4[i] + _output1;\n    }\n\t_output1 = _output1 + _weight5;\n\t_output1 = 1.0 / (1.0 + exp(-_output1));\n\t// cout<<\"_output1 : \"<<_output1<<endl;\n\treturn _output1;\n}\n\nvoid CController::save_stack()\n{\n\t// for(int i = 0; i<500; i++)\n\t// {\n\t// \tcout<<\"Max time[\"<<i<<\"] : \"<<max_time_check[i]<<\"ms\"<<endl;\n\t// }\n\t// cout<<\"time_cnt : \"<<time_cnt<<\"개\"<<endl<<endl;\n\t// cout<<\"Avg time : \"<<(double)time_check/time_cnt<<\"ms\"<<endl<<endl;\n\tif( check_save_log_once == true)\n\t{\n\t\tcheck_save_log_once = false;\n\t\t// filename << \"/home/kist/KDH/Backup/KIST-Dual-Arm-Operational-Space-Control-main2/save_data/dual_arm_data_plus_0417.txt\";\n\t\t// filename << \"/home/kist/KDH/Backup/KIST-Dual-Arm-Operational-Space-Control-main2/save_data/collcheck3.txt\";\n\t\tfilename << \"/home/kist/KDH/Backup/franka_panda_2.0.0/save_data/panda_mppi_0609.txt\";\n\t\t// output.open(\"/home/kist/KDH/Backup/KIST-Dual-Arm-Operational-Space-Control-main2/save_data/data_0406.txt\");\n\t\tif(a != 0)\n\t\t{\n\t\t\toutput.open(\"/home/kist/KDH/Backup/franka_panda_2.0.0/save_data/panda_mppi_0609.txt\");\n\t\t\tfor(int i = 0; i<a; i++)\n\t\t\t{\n\t\t\t\tcheck_7++;\n\t\t\t\tif(check_7 == 12)\n\t\t\t\t{\n\t\t\t\t\toutput<<log_output[i]<<endl;\n\t\t\t\t\tcheck_7 = 0;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\toutput<<log_output[i]<<\",\";\n\t\t\t\t}\n\t\t\t}\n\t\t\toutput.close();\n\t\t\ta = 0;\n\t\t\tcout<<\"first log time\"<<endl;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcout<<\"first log time but a == 0\"<<endl;\n\t\t\tcheck_save_log_once = true;\n\t\t}\n\t\t\n\t}\n\telse\n\t{\n\t\tif( a != 0 )\n\t\t{\n\t\t\toutput.open(\"/home/kist/KDH/Backup/franka_panda_2.0.0/save_data/panda_mppi_0609.txt\",ios::app);\n\t\t\tfor(int i = 0; i<a; i++)\n\t\t\t{\n\t\t\t\tcheck_7++;\n\t\t\t\tif(check_7 == 12)\n\t\t\t\t{\n\t\t\t\t\toutput<<log_output[i]<<endl;\n\t\t\t\t\tcheck_7 = 0;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\toutput<<log_output[i]<<\",\";\n\t\t\t\t}\n\t\t\t}\n\t\t\toutput.close();\n\t\t\ta = 0;\n\t\t\tcout<<\"log\"<<endl;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcout<<\" a == 0 \"<< endl;\n\t\t}\n\t}\n}\n\nfloat CController::rand_FloatRange(float a, float b){\n\tif(_t < 0.01)\n\t{\n\t\tsrand((unsigned)time(NULL));\n\t}\n\n\t// float k = (float)rand();\n\t// cout<<\"k : \"<<k<<endl;\n    return ((b-a)*((float)rand()/RAND_MAX))+a;\n}\n\nvoid CController::load_weight()\n{\n\t/////joint limit 기준 0407이 가장 잘되는 상황////\n    ////////0,7///////////////////////\n    weight0.open(\"/home/kist/KDH/Backup/franka_panda/weight/best_model_panda_0427_2[0].txt\");\n    for(int i = 0; i<7 ; i++)\n    {\n        for(int j = 0; j<_nodes ; j++)\n        {\n            weight0 >> _weight0[i][j];\n        }\n    }\n    weight0.close();\n    \n\n    weight0.open(\"/home/kist/KDH/Backup/franka_panda/weight/best_model_panda_0427_2[1].txt\");\n    for(int i = 0; i<_nodes ; i++)\n    {\n        weight0 >> _weight1[i];\n    }\n    weight0.close();\n\n    weight0.open(\"/home/kist/KDH/Backup/franka_panda/weight/best_model_panda_0427_2[2].txt\");\n    for(int i = 0; i<_nodes ; i++)\n    {\n        for(int j = 0; j<_nodes ; j++)\n        {\n            weight0 >> _weight2[i][j];\n        }\n    }\n    weight0.close();\n\n    weight0.open(\"/home/kist/KDH/Backup/franka_panda/weight/best_model_panda_0427_2[3].txt\");\n    for(int i = 0; i<_nodes ; i++)\n    {\n        weight0 >> _weight3[i];\n    }\n    weight0.close();\n\n    weight0.open(\"/home/kist/KDH/Backup/franka_panda/weight/best_model_panda_0427_2[4].txt\");\n    for(int i = 0; i<_nodes ; i++)\n    {\n        weight0 >> _weight4[i];\n    }\n    weight0.close();\n\n    weight0.open(\"/home/kist/KDH/Backup/franka_panda/weight/best_model_panda_0427_2[5].txt\");\n    weight0 >> _weight5;\n    weight0.close();\n}\n// namespace py = pybind11;\n// PYBIND11_MODULE(controller, m)\n// {\n//   m.doc() = \"pybind11 for controller\";\n\n//   py::class_<CController>(m, \"CController\")\n//       .def(py::init())\n//       .def(\"read\", &CController::read_pybind)\n// \t  .def(\"control_mujoco\", &CController::control_mujoco)\n// \t  .def(\"write\", &CController::write_pybind);\n\n\n// #ifdef VERSION_INFO\n//   m.attr(\"__version__\") = VERSION_INFO;\n// #else\n//   m.attr(\"__version__\") = \"dev\";\n// #endif\n\n// //   m.attr(\"TEST\") = py::int_(int(42));\n// }"
        }
    ]
}