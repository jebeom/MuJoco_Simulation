{
    "sourceFile": "include/cuda(save_file).cuh",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1689671876263,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1689671876263,
            "name": "Commit-0",
            "content": "#pragma once\r\n#include <iostream>\r\n#include <stdio.h>\r\n#include <iostream>\r\n#include <stdio.h>\r\n#include <chrono>\r\n#include <random>\r\n#include <fstream>\r\n#include <cstdio>\r\n#include <cstdarg>\r\n#include <ctime>\r\n#include <sstream>\r\n// #include <curand.h>\r\n#include <curand_kernel.h>\r\n#define PI_CUDA 3.1415926535897932384626433\r\n\r\nusing namespace std;\r\n\r\n\r\n// #define sam1 15\r\n// #define sam2 9\r\n// #define _sampling_num sam1 * sam2\r\n\r\n\r\n\r\n#define _JDOF 7\r\n#define OUTPUT_SIZE 1\r\n#define _sampling_num 64\r\n#define _time_window 32\r\n#define _dt_cuda 0.003\r\n#define _dt2_window 5\r\n// #define _dt_cuda2 0.5\r\n// #define delta_T1 _dt_cuda\r\n// #define delta_T2 0.1\r\n// #define timestep_T1 7\r\n// #define timestep_T2 8\r\n// #define _time_window (timestep_T1+timestep_T2)\r\n#define N _sampling_num*_JDOF*_time_window\r\n#define _nodes_cuda 32\r\n#define _threshold_cuda 0.001\r\n\r\nclass CudaTest\r\n{\t\r\n\tcurandState* dev_states;\r\n\t\r\n\tpublic:\r\n\t\tCudaTest(void);\r\n\t\tvirtual ~CudaTest(void);\r\n\t\tvoid cuda_cal(double *_init_pos,double *_init_vel, double *_goal_pos_cuda, int control_mode, double *returnArray);\r\n\t\tdouble returnArray[_JDOF*3];\r\n\t\tvoid cuda_memory_free();\t\t\r\n\t\t\r\n\tprivate:\r\n\t\tdouble weights0[_JDOF*_nodes_cuda], weights1[_nodes_cuda], weights2[_nodes_cuda*_nodes_cuda], weights3[_nodes_cuda], weights4[_nodes_cuda];\r\n\t\tdouble weights5[OUTPUT_SIZE];\r\n\t\tdouble outputs[_sampling_num];\r\n\r\n\t\tdouble *d_inputs, *d_weights0, *d_weights1, *d_weights2, *d_weights3, *d_weights4, *d_weights5, *d_outputs;\r\n\t\tdouble *dev_min_joint_position_for_NN, *dev_max_joint_position_for_NN, *dev_inputs;\r\n\t\tdouble _matrix_for_cuda[N], _return_cost[_sampling_num], _cost[_sampling_num];\r\n\t\tdouble _cen_joint_position[_JDOF], _max_joint_position[_JDOF], _min_joint_position[_JDOF], _q_des[_JDOF], _qdot_des[_JDOF], _A[_JDOF], _weighted_A[_JDOF], _hat_min_joint_position[_JDOF], _hat_max_joint_position[_JDOF];\r\n\t\tdouble _min_cost, weight_sum, position_sec1[1], position_sec2[1], velocity_lim[1], _prev_x[3], _prev_r[3], now_pos_gap[1];\r\n\t\tdouble *a, *b, *c, *dev_jacobian, *dev_jacobian_transpose, *dev_manipulability, *dev_now_pos_gap;\r\n    \tdouble *dev_rot_EE, *dev_a, *dev_b, *dev_c, *dev_d, *dev_e, *dev_cost, *dev_x_goal, *dev_q_goal, *dev_rot_goal, *dev_rot_goal_T, *hidden0, *hidden1, *dev_velocity_lim, *dev_position_sec1, *dev_position_sec2, *dev_joint_min_limit_for_cost, *dev_joint_max_limit_for_cost, *dev_orientation_EE, *dev_position_EE, *dev_pos_tmp, *dev_prev_position_EE, *dev_prev_orientation_EE, *dev_velocity_EE, *dev_velocity_ori_EE, *dev_cost_x, *dev_cen_joint_position;\r\n\t\tdouble *dev__A, *dev__mean_matrix, *dev__matrix_for_cuda, *dev__prev_matrix_for_cuda, *dev_FK_a, *dev_FK_d, *dev_FK_alpha;\r\n\t\tdouble inputs[_JDOF * _sampling_num], _mean_matrix[N], d[N], e[N], f[N],cost_jointlimit[N], cost_xerr[_sampling_num * _time_window], position_EE[3 * _sampling_num * _time_window], orientation_EE[3 * _sampling_num * _time_window], velocity_EE[3 * _sampling_num * _time_window], velocity_ori_EE[3 * _sampling_num * _time_window], FK_d[9], FK_a[9], FK_alpha[9];\r\n\t\tdouble tmp_goal[_JDOF * _sampling_num], jacobian[_JDOF * 6 * _sampling_num * _time_window], jacobian_transpose[_JDOF * 6 * _sampling_num * _time_window], manipulability[_sampling_num * _time_window], prev_position_EE[3], prev_orientation_EE[3], prev_x_cost;\r\n\t\tdouble _dt_cuda2[1], tmp_find_goal;\r\n\t\tdouble *dev_dt_cuda2, *dev_found_sol;\r\n\t\tdouble found_goal_list[_sampling_num];\r\n\t\t\r\n\t\tint found_goal;\r\n\t\tint *dev_found_goal;\r\n\t\t// double _random_matrix[_sampling_num][_JDOF][_time_window], _mean_matrix[_sampling_num][_JDOF][_time_window];\r\n\r\n\t\tifstream weight0;\r\n\t\tostringstream filename_NN[6];\r\n\t\t// int numBlocks, numBlocks2;\r\n\r\n\t\tvoid cpu_memory_save();\r\n\t\tvoid initialize();\r\n\t\tvoid cuda_memory_save();\r\n\t\tvoid generate_random();\r\n\t\tvoid load_weight();\r\n};\r\n"
        }
    ]
}