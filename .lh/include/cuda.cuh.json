{
    "sourceFile": "include/cuda.cuh",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 80,
            "patches": [
                {
                    "date": 1689747404772,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1689836381001,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,8 +70,9 @@\n \t\tdouble found_goal_list[_sampling_num];\r\n \t\t\r\n \t\tint found_goal;\r\n \t\tint *dev_found_goal;\r\n+\t\tint reset_check;\r\n \t\t// double _random_matrix[_sampling_num][_JDOF][_time_window], _mean_matrix[_sampling_num][_JDOF][_time_window];\r\n \r\n \t\tifstream weight0;\r\n \t\tostringstream filename_NN[6];\r\n"
                },
                {
                    "date": 1689842053327,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,8 +71,10 @@\n \t\t\r\n \t\tint found_goal;\r\n \t\tint *dev_found_goal;\r\n \t\tint reset_check;\r\n+\r\n+\t\tdouble gap_limit;\r\n \t\t// double _random_matrix[_sampling_num][_JDOF][_time_window], _mean_matrix[_sampling_num][_JDOF][_time_window];\r\n \r\n \t\tifstream weight0;\r\n \t\tostringstream filename_NN[6];\r\n"
                },
                {
                    "date": 1689842082322,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,8 +37,9 @@\n // #define _time_window (timestep_T1+timestep_T2)\r\n #define N _sampling_num*_JDOF*_time_window\r\n #define _nodes_cuda 32\r\n #define _threshold_cuda 0.001\r\n+#define gap_limit 0.5;\r\n \r\n class CudaTest\r\n {\t\r\n \tcurandState* dev_states;\r\n"
                },
                {
                    "date": 1689842095156,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n // #define _time_window (timestep_T1+timestep_T2)\r\n #define N _sampling_num*_JDOF*_time_window\r\n #define _nodes_cuda 32\r\n #define _threshold_cuda 0.001\r\n-#define gap_limit 0.5;\r\n+#define gap_limit 0.5\r\n \r\n class CudaTest\r\n {\t\r\n \tcurandState* dev_states;\r\n@@ -73,9 +73,9 @@\n \t\tint found_goal;\r\n \t\tint *dev_found_goal;\r\n \t\tint reset_check;\r\n \r\n-\t\tdouble gap_limit;\r\n+\t\t// double gap_limit;\r\n \t\t// double _random_matrix[_sampling_num][_JDOF][_time_window], _mean_matrix[_sampling_num][_JDOF][_time_window];\r\n \r\n \t\tifstream weight0;\r\n \t\tostringstream filename_NN[6];\r\n"
                },
                {
                    "date": 1689901910186,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,9 +59,9 @@\n \t\tdouble *d_inputs, *d_weights0, *d_weights1, *d_weights2, *d_weights3, *d_weights4, *d_weights5, *d_outputs;\r\n \t\tdouble *dev_min_joint_position_for_NN, *dev_max_joint_position_for_NN, *dev_inputs;\r\n \t\tdouble _matrix_for_cuda[N], _return_cost[_sampling_num], _cost[_sampling_num];\r\n \t\tdouble _cen_joint_position[_JDOF], _max_joint_position[_JDOF], _min_joint_position[_JDOF], _q_des[_JDOF], _qdot_des[_JDOF], _A[_JDOF], _weighted_A[_JDOF], _hat_min_joint_position[_JDOF], _hat_max_joint_position[_JDOF];\r\n-\t\tdouble _min_cost, weight_sum, position_sec1[1], position_sec2[1], velocity_lim[1], _prev_x[3], _prev_r[3], now_pos_gap[1];\r\n+\t\tdouble _min_cost, weight_sum, position_sec1[1], position_sec2[1], velocity_lim[1], _prev_x[3], _prev_r[3], now_pos_gap[2];\r\n \t\tdouble *a, *b, *c, *dev_jacobian, *dev_jacobian_transpose, *dev_manipulability, *dev_now_pos_gap;\r\n     \tdouble *dev_rot_EE, *dev_a, *dev_b, *dev_c, *dev_d, *dev_e, *dev_cost, *dev_x_goal, *dev_q_goal, *dev_rot_goal, *dev_rot_goal_T, *hidden0, *hidden1, *dev_velocity_lim, *dev_position_sec1, *dev_position_sec2, *dev_joint_min_limit_for_cost, *dev_joint_max_limit_for_cost, *dev_orientation_EE, *dev_position_EE, *dev_pos_tmp, *dev_prev_position_EE, *dev_prev_orientation_EE, *dev_velocity_EE, *dev_velocity_ori_EE, *dev_cost_x, *dev_cen_joint_position;\r\n \t\tdouble *dev__A, *dev__mean_matrix, *dev__matrix_for_cuda, *dev__prev_matrix_for_cuda, *dev_FK_a, *dev_FK_d, *dev_FK_alpha;\r\n \t\tdouble inputs[_JDOF * _sampling_num], _mean_matrix[N], d[N], e[N], f[N],cost_jointlimit[N], cost_xerr[_sampling_num * _time_window], position_EE[3 * _sampling_num * _time_window], orientation_EE[3 * _sampling_num * _time_window], velocity_EE[3 * _sampling_num * _time_window], velocity_ori_EE[3 * _sampling_num * _time_window], FK_d[9], FK_a[9], FK_alpha[9];\r\n"
                },
                {
                    "date": 1689904807482,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n // #define _time_window (timestep_T1+timestep_T2)\r\n #define N _sampling_num*_JDOF*_time_window\r\n #define _nodes_cuda 32\r\n #define _threshold_cuda 0.001\r\n-#define gap_limit 0.5\r\n+#define gap_limit 0.3\r\n \r\n class CudaTest\r\n {\t\r\n \tcurandState* dev_states;\r\n"
                },
                {
                    "date": 1689905541104,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n // #define _time_window (timestep_T1+timestep_T2)\r\n #define N _sampling_num*_JDOF*_time_window\r\n #define _nodes_cuda 32\r\n #define _threshold_cuda 0.001\r\n-#define gap_limit 0.3\r\n+#define gap_limit 0.1\r\n \r\n class CudaTest\r\n {\t\r\n \tcurandState* dev_states;\r\n"
                },
                {
                    "date": 1689905931863,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n // #define _time_window (timestep_T1+timestep_T2)\r\n #define N _sampling_num*_JDOF*_time_window\r\n #define _nodes_cuda 32\r\n #define _threshold_cuda 0.001\r\n-#define gap_limit 0.1\r\n+#define gap_limit 0.15\r\n \r\n class CudaTest\r\n {\t\r\n \tcurandState* dev_states;\r\n"
                },
                {
                    "date": 1689906094775,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n // #define _time_window (timestep_T1+timestep_T2)\r\n #define N _sampling_num*_JDOF*_time_window\r\n #define _nodes_cuda 32\r\n #define _threshold_cuda 0.001\r\n-#define gap_limit 0.15\r\n+#define gap_limit 1.0\r\n \r\n class CudaTest\r\n {\t\r\n \tcurandState* dev_states;\r\n"
                },
                {
                    "date": 1689906561715,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n // #define _time_window (timestep_T1+timestep_T2)\r\n #define N _sampling_num*_JDOF*_time_window\r\n #define _nodes_cuda 32\r\n #define _threshold_cuda 0.001\r\n-#define gap_limit 1.0\r\n+#define gap_limit 0.5\r\n \r\n class CudaTest\r\n {\t\r\n \tcurandState* dev_states;\r\n"
                },
                {
                    "date": 1689906793251,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n // #define _time_window (timestep_T1+timestep_T2)\r\n #define N _sampling_num*_JDOF*_time_window\r\n #define _nodes_cuda 32\r\n #define _threshold_cuda 0.001\r\n-#define gap_limit 0.5\r\n+#define gap_limit 0.3\r\n \r\n class CudaTest\r\n {\t\r\n \tcurandState* dev_states;\r\n"
                },
                {
                    "date": 1689906960168,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n // #define _time_window (timestep_T1+timestep_T2)\r\n #define N _sampling_num*_JDOF*_time_window\r\n #define _nodes_cuda 32\r\n #define _threshold_cuda 0.001\r\n-#define gap_limit 0.3\r\n+#define gap_limit 0.2\r\n \r\n class CudaTest\r\n {\t\r\n \tcurandState* dev_states;\r\n"
                },
                {
                    "date": 1689907047363,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n #define OUTPUT_SIZE 1\r\n #define _sampling_num 64\r\n #define _time_window 32\r\n #define _dt_cuda 0.003\r\n-#define _dt2_window 5\r\n+#define _dt2_window 6\r\n // #define _dt_cuda2 0.5\r\n // #define delta_T1 _dt_cuda\r\n // #define delta_T2 0.1\r\n // #define timestep_T1 7\r\n"
                },
                {
                    "date": 1689907309039,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n #define OUTPUT_SIZE 1\r\n #define _sampling_num 64\r\n #define _time_window 32\r\n #define _dt_cuda 0.003\r\n-#define _dt2_window 6\r\n+#define _dt2_window 8\r\n // #define _dt_cuda2 0.5\r\n // #define delta_T1 _dt_cuda\r\n // #define delta_T2 0.1\r\n // #define timestep_T1 7\r\n"
                },
                {
                    "date": 1689907640578,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n \r\n \r\n #define _JDOF 7\r\n #define OUTPUT_SIZE 1\r\n-#define _sampling_num 64\r\n+#define _sampling_num 128\r\n #define _time_window 32\r\n #define _dt_cuda 0.003\r\n #define _dt2_window 8\r\n // #define _dt_cuda2 0.5\r\n"
                },
                {
                    "date": 1689907910617,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n \r\n \r\n #define _JDOF 7\r\n #define OUTPUT_SIZE 1\r\n-#define _sampling_num 128\r\n+#define _sampling_num 64\r\n #define _time_window 32\r\n #define _dt_cuda 0.003\r\n #define _dt2_window 8\r\n // #define _dt_cuda2 0.5\r\n"
                },
                {
                    "date": 1689912010005,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n #define OUTPUT_SIZE 1\r\n #define _sampling_num 64\r\n #define _time_window 32\r\n #define _dt_cuda 0.003\r\n-#define _dt2_window 8\r\n+#define _dt2_window 4\r\n // #define _dt_cuda2 0.5\r\n // #define delta_T1 _dt_cuda\r\n // #define delta_T2 0.1\r\n // #define timestep_T1 7\r\n"
                },
                {
                    "date": 1689912321920,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n // #define _time_window (timestep_T1+timestep_T2)\r\n #define N _sampling_num*_JDOF*_time_window\r\n #define _nodes_cuda 32\r\n #define _threshold_cuda 0.001\r\n-#define gap_limit 0.2\r\n+#define gap_limit 0.5\r\n \r\n class CudaTest\r\n {\t\r\n \tcurandState* dev_states;\r\n"
                },
                {
                    "date": 1689920421525,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n #define OUTPUT_SIZE 1\r\n #define _sampling_num 64\r\n #define _time_window 32\r\n #define _dt_cuda 0.003\r\n-#define _dt2_window 4\r\n+#define _dt2_window 5\r\n // #define _dt_cuda2 0.5\r\n // #define delta_T1 _dt_cuda\r\n // #define delta_T2 0.1\r\n // #define timestep_T1 7\r\n"
                },
                {
                    "date": 1689922838753,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n #define OUTPUT_SIZE 1\r\n #define _sampling_num 64\r\n #define _time_window 32\r\n #define _dt_cuda 0.003\r\n-#define _dt2_window 5\r\n+#define _dt2_window 7\r\n // #define _dt_cuda2 0.5\r\n // #define delta_T1 _dt_cuda\r\n // #define delta_T2 0.1\r\n // #define timestep_T1 7\r\n"
                },
                {
                    "date": 1689923556798,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n #define OUTPUT_SIZE 1\r\n #define _sampling_num 64\r\n #define _time_window 32\r\n #define _dt_cuda 0.003\r\n-#define _dt2_window 7\r\n+#define _dt2_window 5\r\n // #define _dt_cuda2 0.5\r\n // #define delta_T1 _dt_cuda\r\n // #define delta_T2 0.1\r\n // #define timestep_T1 7\r\n@@ -37,9 +37,9 @@\n // #define _time_window (timestep_T1+timestep_T2)\r\n #define N _sampling_num*_JDOF*_time_window\r\n #define _nodes_cuda 32\r\n #define _threshold_cuda 0.001\r\n-#define gap_limit 0.5\r\n+#define gap_limit 0.1\r\n \r\n class CudaTest\r\n {\t\r\n \tcurandState* dev_states;\r\n"
                },
                {
                    "date": 1689925486908,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n // #define _time_window (timestep_T1+timestep_T2)\r\n #define N _sampling_num*_JDOF*_time_window\r\n #define _nodes_cuda 32\r\n #define _threshold_cuda 0.001\r\n-#define gap_limit 0.1\r\n+#define gap_limit 0.5\r\n \r\n class CudaTest\r\n {\t\r\n \tcurandState* dev_states;\r\n@@ -59,9 +59,9 @@\n \t\tdouble *d_inputs, *d_weights0, *d_weights1, *d_weights2, *d_weights3, *d_weights4, *d_weights5, *d_outputs;\r\n \t\tdouble *dev_min_joint_position_for_NN, *dev_max_joint_position_for_NN, *dev_inputs;\r\n \t\tdouble _matrix_for_cuda[N], _return_cost[_sampling_num], _cost[_sampling_num];\r\n \t\tdouble _cen_joint_position[_JDOF], _max_joint_position[_JDOF], _min_joint_position[_JDOF], _q_des[_JDOF], _qdot_des[_JDOF], _A[_JDOF], _weighted_A[_JDOF], _hat_min_joint_position[_JDOF], _hat_max_joint_position[_JDOF];\r\n-\t\tdouble _min_cost, weight_sum, position_sec1[1], position_sec2[1], velocity_lim[1], _prev_x[3], _prev_r[3], now_pos_gap[2];\r\n+\t\tdouble _min_cost, weight_sum, position_sec1[1], position_sec2[1], velocity_lim[1], _prev_x[3], _prev_r[3], now_pos_gap[1];\r\n \t\tdouble *a, *b, *c, *dev_jacobian, *dev_jacobian_transpose, *dev_manipulability, *dev_now_pos_gap;\r\n     \tdouble *dev_rot_EE, *dev_a, *dev_b, *dev_c, *dev_d, *dev_e, *dev_cost, *dev_x_goal, *dev_q_goal, *dev_rot_goal, *dev_rot_goal_T, *hidden0, *hidden1, *dev_velocity_lim, *dev_position_sec1, *dev_position_sec2, *dev_joint_min_limit_for_cost, *dev_joint_max_limit_for_cost, *dev_orientation_EE, *dev_position_EE, *dev_pos_tmp, *dev_prev_position_EE, *dev_prev_orientation_EE, *dev_velocity_EE, *dev_velocity_ori_EE, *dev_cost_x, *dev_cen_joint_position;\r\n \t\tdouble *dev__A, *dev__mean_matrix, *dev__matrix_for_cuda, *dev__prev_matrix_for_cuda, *dev_FK_a, *dev_FK_d, *dev_FK_alpha;\r\n \t\tdouble inputs[_JDOF * _sampling_num], _mean_matrix[N], d[N], e[N], f[N],cost_jointlimit[N], cost_xerr[_sampling_num * _time_window], position_EE[3 * _sampling_num * _time_window], orientation_EE[3 * _sampling_num * _time_window], velocity_EE[3 * _sampling_num * _time_window], velocity_ori_EE[3 * _sampling_num * _time_window], FK_d[9], FK_a[9], FK_alpha[9];\r\n"
                },
                {
                    "date": 1690163048027,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n // #define _time_window (timestep_T1+timestep_T2)\r\n #define N _sampling_num*_JDOF*_time_window\r\n #define _nodes_cuda 32\r\n #define _threshold_cuda 0.001\r\n-#define gap_limit 0.5\r\n+#define gap_limit 0.3\r\n \r\n class CudaTest\r\n {\t\r\n \tcurandState* dev_states;\r\n"
                },
                {
                    "date": 1690164971089,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n // #define _time_window (timestep_T1+timestep_T2)\r\n #define N _sampling_num*_JDOF*_time_window\r\n #define _nodes_cuda 32\r\n #define _threshold_cuda 0.001\r\n-#define gap_limit 0.3\r\n+#define gap_limit 0.7\r\n \r\n class CudaTest\r\n {\t\r\n \tcurandState* dev_states;\r\n"
                },
                {
                    "date": 1690181648949,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n // #define _time_window (timestep_T1+timestep_T2)\r\n #define N _sampling_num*_JDOF*_time_window\r\n #define _nodes_cuda 32\r\n #define _threshold_cuda 0.001\r\n-#define gap_limit 0.7\r\n+#define gap_limit 0.5\r\n \r\n class CudaTest\r\n {\t\r\n \tcurandState* dev_states;\r\n"
                },
                {
                    "date": 1690277543193,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n // #define _time_window (timestep_T1+timestep_T2)\r\n #define N _sampling_num*_JDOF*_time_window\r\n #define _nodes_cuda 32\r\n #define _threshold_cuda 0.001\r\n-#define gap_limit 0.5\r\n+#define gap_limit 0.1\r\n \r\n class CudaTest\r\n {\t\r\n \tcurandState* dev_states;\r\n"
                },
                {
                    "date": 1690277550784,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n // #define _time_window (timestep_T1+timestep_T2)\r\n #define N _sampling_num*_JDOF*_time_window\r\n #define _nodes_cuda 32\r\n #define _threshold_cuda 0.001\r\n-#define gap_limit 0.1\r\n+#define gap_limit 0.5\r\n \r\n class CudaTest\r\n {\t\r\n \tcurandState* dev_states;\r\n"
                },
                {
                    "date": 1690438994911,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n // #define _time_window (timestep_T1+timestep_T2)\r\n #define N _sampling_num*_JDOF*_time_window\r\n #define _nodes_cuda 32\r\n #define _threshold_cuda 0.001\r\n-#define gap_limit 0.5\r\n+#define gap_limit 0.3\r\n \r\n class CudaTest\r\n {\t\r\n \tcurandState* dev_states;\r\n"
                },
                {
                    "date": 1690442319101,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n // #define _time_window (timestep_T1+timestep_T2)\r\n #define N _sampling_num*_JDOF*_time_window\r\n #define _nodes_cuda 32\r\n #define _threshold_cuda 0.001\r\n-#define gap_limit 0.3\r\n+#define gap_limit 0.5\r\n \r\n class CudaTest\r\n {\t\r\n \tcurandState* dev_states;\r\n"
                },
                {
                    "date": 1690442515481,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n \r\n \r\n #define _JDOF 7\r\n #define OUTPUT_SIZE 1\r\n-#define _sampling_num 64\r\n+#define _sampling_num 256\r\n #define _time_window 32\r\n #define _dt_cuda 0.003\r\n #define _dt2_window 5\r\n // #define _dt_cuda2 0.5\r\n"
                },
                {
                    "date": 1690442742829,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,18 +15,11 @@\n #define PI_CUDA 3.1415926535897932384626433\r\n \r\n using namespace std;\r\n \r\n-\r\n-// #define sam1 15\r\n-// #define sam2 9\r\n-// #define _sampling_num sam1 * sam2\r\n-\r\n-\r\n-\r\n #define _JDOF 7\r\n #define OUTPUT_SIZE 1\r\n-#define _sampling_num 256\r\n+#define _sampling_num 128\r\n #define _time_window 32\r\n #define _dt_cuda 0.003\r\n #define _dt2_window 5\r\n // #define _dt_cuda2 0.5\r\n"
                },
                {
                    "date": 1690442799809,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n using namespace std;\r\n \r\n #define _JDOF 7\r\n #define OUTPUT_SIZE 1\r\n-#define _sampling_num 128\r\n+#define _sampling_num 64\r\n #define _time_window 32\r\n #define _dt_cuda 0.003\r\n #define _dt2_window 5\r\n // #define _dt_cuda2 0.5\r\n"
                },
                {
                    "date": 1690508333886,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,9 @@\n \r\n \t\tdouble *d_inputs, *d_weights0, *d_weights1, *d_weights2, *d_weights3, *d_weights4, *d_weights5, *d_outputs;\r\n \t\tdouble *dev_min_joint_position_for_NN, *dev_max_joint_position_for_NN, *dev_inputs;\r\n \t\tdouble _matrix_for_cuda[N], _return_cost[_sampling_num], _cost[_sampling_num];\r\n-\t\tdouble _cen_joint_position[_JDOF], _max_joint_position[_JDOF], _min_joint_position[_JDOF], _q_des[_JDOF], _qdot_des[_JDOF], _A[_JDOF], _weighted_A[_JDOF], _hat_min_joint_position[_JDOF], _hat_max_joint_position[_JDOF];\r\n+\t\tdouble _joint_min_max_scale[_JDOF], _cen_joint_position[_JDOF], _max_joint_position[_JDOF], _min_joint_position[_JDOF], _q_des[_JDOF], _qdot_des[_JDOF], _A[_JDOF], _weighted_A[_JDOF], _hat_min_joint_position[_JDOF], _hat_max_joint_position[_JDOF];\r\n \t\tdouble _min_cost, weight_sum, position_sec1[1], position_sec2[1], velocity_lim[1], _prev_x[3], _prev_r[3], now_pos_gap[1];\r\n \t\tdouble *a, *b, *c, *dev_jacobian, *dev_jacobian_transpose, *dev_manipulability, *dev_now_pos_gap;\r\n     \tdouble *dev_rot_EE, *dev_a, *dev_b, *dev_c, *dev_d, *dev_e, *dev_cost, *dev_x_goal, *dev_q_goal, *dev_rot_goal, *dev_rot_goal_T, *hidden0, *hidden1, *dev_velocity_lim, *dev_position_sec1, *dev_position_sec2, *dev_joint_min_limit_for_cost, *dev_joint_max_limit_for_cost, *dev_orientation_EE, *dev_position_EE, *dev_pos_tmp, *dev_prev_position_EE, *dev_prev_orientation_EE, *dev_velocity_EE, *dev_velocity_ori_EE, *dev_cost_x, *dev_cen_joint_position;\r\n \t\tdouble *dev__A, *dev__mean_matrix, *dev__matrix_for_cuda, *dev__prev_matrix_for_cuda, *dev_FK_a, *dev_FK_d, *dev_FK_alpha;\r\n"
                },
                {
                    "date": 1690508404210,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,9 +54,9 @@\n \t\tdouble _matrix_for_cuda[N], _return_cost[_sampling_num], _cost[_sampling_num];\r\n \t\tdouble _joint_min_max_scale[_JDOF], _cen_joint_position[_JDOF], _max_joint_position[_JDOF], _min_joint_position[_JDOF], _q_des[_JDOF], _qdot_des[_JDOF], _A[_JDOF], _weighted_A[_JDOF], _hat_min_joint_position[_JDOF], _hat_max_joint_position[_JDOF];\r\n \t\tdouble _min_cost, weight_sum, position_sec1[1], position_sec2[1], velocity_lim[1], _prev_x[3], _prev_r[3], now_pos_gap[1];\r\n \t\tdouble *a, *b, *c, *dev_jacobian, *dev_jacobian_transpose, *dev_manipulability, *dev_now_pos_gap;\r\n-    \tdouble *dev_rot_EE, *dev_a, *dev_b, *dev_c, *dev_d, *dev_e, *dev_cost, *dev_x_goal, *dev_q_goal, *dev_rot_goal, *dev_rot_goal_T, *hidden0, *hidden1, *dev_velocity_lim, *dev_position_sec1, *dev_position_sec2, *dev_joint_min_limit_for_cost, *dev_joint_max_limit_for_cost, *dev_orientation_EE, *dev_position_EE, *dev_pos_tmp, *dev_prev_position_EE, *dev_prev_orientation_EE, *dev_velocity_EE, *dev_velocity_ori_EE, *dev_cost_x, *dev_cen_joint_position;\r\n+    \tdouble *dev_rot_EE, *dev_a, *dev_b, *dev_c, *dev_d, *dev_e, *dev_cost, *dev_x_goal, *dev_q_goal, *dev_rot_goal, *dev_rot_goal_T, *hidden0, *hidden1, *dev_velocity_lim, *dev_position_sec1, *dev_position_sec2, *dev_joint_min_limit_for_cost, *dev_joint_max_limit_for_cost, *dev_orientation_EE, *dev_position_EE, *dev_pos_tmp, *dev_prev_position_EE, *dev_prev_orientation_EE, *dev_velocity_EE, *dev_velocity_ori_EE, *dev_cost_x, *dev_cen_joint_position, *dev_joint_min_max_scale;\r\n \t\tdouble *dev__A, *dev__mean_matrix, *dev__matrix_for_cuda, *dev__prev_matrix_for_cuda, *dev_FK_a, *dev_FK_d, *dev_FK_alpha;\r\n \t\tdouble inputs[_JDOF * _sampling_num], _mean_matrix[N], d[N], e[N], f[N],cost_jointlimit[N], cost_xerr[_sampling_num * _time_window], position_EE[3 * _sampling_num * _time_window], orientation_EE[3 * _sampling_num * _time_window], velocity_EE[3 * _sampling_num * _time_window], velocity_ori_EE[3 * _sampling_num * _time_window], FK_d[9], FK_a[9], FK_alpha[9];\r\n \t\tdouble tmp_goal[_JDOF * _sampling_num], jacobian[_JDOF * 6 * _sampling_num * _time_window], jacobian_transpose[_JDOF * 6 * _sampling_num * _time_window], manipulability[_sampling_num * _time_window], prev_position_EE[3], prev_orientation_EE[3], prev_x_cost;\r\n \t\tdouble _dt_cuda2[1], tmp_find_goal;\r\n"
                },
                {
                    "date": 1690520908043,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,12 +51,12 @@\n \r\n \t\tdouble *d_inputs, *d_weights0, *d_weights1, *d_weights2, *d_weights3, *d_weights4, *d_weights5, *d_outputs;\r\n \t\tdouble *dev_min_joint_position_for_NN, *dev_max_joint_position_for_NN, *dev_inputs;\r\n \t\tdouble _matrix_for_cuda[N], _return_cost[_sampling_num], _cost[_sampling_num];\r\n-\t\tdouble _joint_min_max_scale[_JDOF], _cen_joint_position[_JDOF], _max_joint_position[_JDOF], _min_joint_position[_JDOF], _q_des[_JDOF], _qdot_des[_JDOF], _A[_JDOF], _weighted_A[_JDOF], _hat_min_joint_position[_JDOF], _hat_max_joint_position[_JDOF];\r\n+\t\tdouble _cen_joint_position[_JDOF], _max_joint_position[_JDOF], _min_joint_position[_JDOF], _q_des[_JDOF], _qdot_des[_JDOF], _A[_JDOF], _weighted_A[_JDOF], _hat_min_joint_position[_JDOF], _hat_max_joint_position[_JDOF];\r\n \t\tdouble _min_cost, weight_sum, position_sec1[1], position_sec2[1], velocity_lim[1], _prev_x[3], _prev_r[3], now_pos_gap[1];\r\n \t\tdouble *a, *b, *c, *dev_jacobian, *dev_jacobian_transpose, *dev_manipulability, *dev_now_pos_gap;\r\n-    \tdouble *dev_rot_EE, *dev_a, *dev_b, *dev_c, *dev_d, *dev_e, *dev_cost, *dev_x_goal, *dev_q_goal, *dev_rot_goal, *dev_rot_goal_T, *hidden0, *hidden1, *dev_velocity_lim, *dev_position_sec1, *dev_position_sec2, *dev_joint_min_limit_for_cost, *dev_joint_max_limit_for_cost, *dev_orientation_EE, *dev_position_EE, *dev_pos_tmp, *dev_prev_position_EE, *dev_prev_orientation_EE, *dev_velocity_EE, *dev_velocity_ori_EE, *dev_cost_x, *dev_cen_joint_position, *dev_joint_min_max_scale;\r\n+    \tdouble *dev_rot_EE, *dev_a, *dev_b, *dev_c, *dev_d, *dev_e, *dev_cost, *dev_x_goal, *dev_q_goal, *dev_rot_goal, *dev_rot_goal_T, *hidden0, *hidden1, *dev_velocity_lim, *dev_position_sec1, *dev_position_sec2, *dev_joint_min_limit_for_cost, *dev_joint_max_limit_for_cost, *dev_orientation_EE, *dev_position_EE, *dev_pos_tmp, *dev_prev_position_EE, *dev_prev_orientation_EE, *dev_velocity_EE, *dev_velocity_ori_EE, *dev_cost_x, *dev_cen_joint_position;\r\n \t\tdouble *dev__A, *dev__mean_matrix, *dev__matrix_for_cuda, *dev__prev_matrix_for_cuda, *dev_FK_a, *dev_FK_d, *dev_FK_alpha;\r\n \t\tdouble inputs[_JDOF * _sampling_num], _mean_matrix[N], d[N], e[N], f[N],cost_jointlimit[N], cost_xerr[_sampling_num * _time_window], position_EE[3 * _sampling_num * _time_window], orientation_EE[3 * _sampling_num * _time_window], velocity_EE[3 * _sampling_num * _time_window], velocity_ori_EE[3 * _sampling_num * _time_window], FK_d[9], FK_a[9], FK_alpha[9];\r\n \t\tdouble tmp_goal[_JDOF * _sampling_num], jacobian[_JDOF * 6 * _sampling_num * _time_window], jacobian_transpose[_JDOF * 6 * _sampling_num * _time_window], manipulability[_sampling_num * _time_window], prev_position_EE[3], prev_orientation_EE[3], prev_x_cost;\r\n \t\tdouble _dt_cuda2[1], tmp_find_goal;\r\n"
                },
                {
                    "date": 1690766892322,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n // #define _time_window (timestep_T1+timestep_T2)\r\n #define N _sampling_num*_JDOF*_time_window\r\n #define _nodes_cuda 32\r\n #define _threshold_cuda 0.001\r\n-#define gap_limit 0.5\r\n+#define gap_limit 0.3\r\n \r\n class CudaTest\r\n {\t\r\n \tcurandState* dev_states;\r\n"
                },
                {
                    "date": 1691113940543,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n // #define _time_window (timestep_T1+timestep_T2)\r\n #define N _sampling_num*_JDOF*_time_window\r\n #define _nodes_cuda 32\r\n #define _threshold_cuda 0.001\r\n-#define gap_limit 0.3\r\n+#define gap_limit 0.1\r\n \r\n class CudaTest\r\n {\t\r\n \tcurandState* dev_states;\r\n"
                },
                {
                    "date": 1691114067114,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n // #define _time_window (timestep_T1+timestep_T2)\r\n #define N _sampling_num*_JDOF*_time_window\r\n #define _nodes_cuda 32\r\n #define _threshold_cuda 0.001\r\n-#define gap_limit 0.1\r\n+#define gap_limit 0.5\r\n \r\n class CudaTest\r\n {\t\r\n \tcurandState* dev_states;\r\n"
                },
                {
                    "date": 1691114600844,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n // #define _time_window (timestep_T1+timestep_T2)\r\n #define N _sampling_num*_JDOF*_time_window\r\n #define _nodes_cuda 32\r\n #define _threshold_cuda 0.001\r\n-#define gap_limit 0.5\r\n+#define gap_limit 0.3\r\n \r\n class CudaTest\r\n {\t\r\n \tcurandState* dev_states;\r\n"
                },
                {
                    "date": 1691115337310,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,9 +52,9 @@\n \t\tdouble *d_inputs, *d_weights0, *d_weights1, *d_weights2, *d_weights3, *d_weights4, *d_weights5, *d_outputs;\r\n \t\tdouble *dev_min_joint_position_for_NN, *dev_max_joint_position_for_NN, *dev_inputs;\r\n \t\tdouble _matrix_for_cuda[N], _return_cost[_sampling_num], _cost[_sampling_num];\r\n \t\tdouble _cen_joint_position[_JDOF], _max_joint_position[_JDOF], _min_joint_position[_JDOF], _q_des[_JDOF], _qdot_des[_JDOF], _A[_JDOF], _weighted_A[_JDOF], _hat_min_joint_position[_JDOF], _hat_max_joint_position[_JDOF];\r\n-\t\tdouble _min_cost, weight_sum, position_sec1[1], position_sec2[1], velocity_lim[1], _prev_x[3], _prev_r[3], now_pos_gap[1];\r\n+\t\tdouble _min_cost, _sol_cost, weight_sum, position_sec1[1], position_sec2[1], velocity_lim[1], _prev_x[3], _prev_r[3], now_pos_gap[1];\r\n \t\tdouble *a, *b, *c, *dev_jacobian, *dev_jacobian_transpose, *dev_manipulability, *dev_now_pos_gap;\r\n     \tdouble *dev_rot_EE, *dev_a, *dev_b, *dev_c, *dev_d, *dev_e, *dev_cost, *dev_x_goal, *dev_q_goal, *dev_rot_goal, *dev_rot_goal_T, *hidden0, *hidden1, *dev_velocity_lim, *dev_position_sec1, *dev_position_sec2, *dev_joint_min_limit_for_cost, *dev_joint_max_limit_for_cost, *dev_orientation_EE, *dev_position_EE, *dev_pos_tmp, *dev_prev_position_EE, *dev_prev_orientation_EE, *dev_velocity_EE, *dev_velocity_ori_EE, *dev_cost_x, *dev_cen_joint_position;\r\n \t\tdouble *dev__A, *dev__mean_matrix, *dev__matrix_for_cuda, *dev__prev_matrix_for_cuda, *dev_FK_a, *dev_FK_d, *dev_FK_alpha;\r\n \t\tdouble inputs[_JDOF * _sampling_num], _mean_matrix[N], d[N], e[N], f[N],cost_jointlimit[N], cost_xerr[_sampling_num * _time_window], position_EE[3 * _sampling_num * _time_window], orientation_EE[3 * _sampling_num * _time_window], velocity_EE[3 * _sampling_num * _time_window], velocity_ori_EE[3 * _sampling_num * _time_window], FK_d[9], FK_a[9], FK_alpha[9];\r\n"
                },
                {
                    "date": 1691473930785,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n using namespace std;\r\n \r\n #define _JDOF 7\r\n #define OUTPUT_SIZE 1\r\n-#define _sampling_num 64\r\n+#define _sampling_num 12\r\n #define _time_window 32\r\n #define _dt_cuda 0.003\r\n #define _dt2_window 5\r\n // #define _dt_cuda2 0.5\r\n"
                },
                {
                    "date": 1691474260471,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n using namespace std;\r\n \r\n #define _JDOF 7\r\n #define OUTPUT_SIZE 1\r\n-#define _sampling_num 12\r\n+#define _sampling_num 64\r\n #define _time_window 32\r\n #define _dt_cuda 0.003\r\n #define _dt2_window 5\r\n // #define _dt_cuda2 0.5\r\n"
                },
                {
                    "date": 1691566046679,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n using namespace std;\r\n \r\n #define _JDOF 7\r\n #define OUTPUT_SIZE 1\r\n-#define _sampling_num 64\r\n+#define __sampling_num 64\r\n #define _time_window 32\r\n #define _dt_cuda 0.003\r\n #define _dt2_window 5\r\n // #define _dt_cuda2 0.5\r\n@@ -27,9 +27,9 @@\n // #define delta_T2 0.1\r\n // #define timestep_T1 7\r\n // #define timestep_T2 8\r\n // #define _time_window (timestep_T1+timestep_T2)\r\n-#define N _sampling_num*_JDOF*_time_window\r\n+#define N __sampling_num*_JDOF*_time_window\r\n #define _nodes_cuda 32\r\n #define _threshold_cuda 0.001\r\n #define gap_limit 0.3\r\n \r\n@@ -46,30 +46,30 @@\n \t\t\r\n \tprivate:\r\n \t\tdouble weights0[_JDOF*_nodes_cuda], weights1[_nodes_cuda], weights2[_nodes_cuda*_nodes_cuda], weights3[_nodes_cuda], weights4[_nodes_cuda];\r\n \t\tdouble weights5[OUTPUT_SIZE];\r\n-\t\tdouble outputs[_sampling_num];\r\n+\t\tdouble outputs[__sampling_num];\r\n \r\n \t\tdouble *d_inputs, *d_weights0, *d_weights1, *d_weights2, *d_weights3, *d_weights4, *d_weights5, *d_outputs;\r\n \t\tdouble *dev_min_joint_position_for_NN, *dev_max_joint_position_for_NN, *dev_inputs;\r\n-\t\tdouble _matrix_for_cuda[N], _return_cost[_sampling_num], _cost[_sampling_num];\r\n+\t\tdouble _matrix_for_cuda[N], _return_cost[__sampling_num], _cost[__sampling_num];\r\n \t\tdouble _cen_joint_position[_JDOF], _max_joint_position[_JDOF], _min_joint_position[_JDOF], _q_des[_JDOF], _qdot_des[_JDOF], _A[_JDOF], _weighted_A[_JDOF], _hat_min_joint_position[_JDOF], _hat_max_joint_position[_JDOF];\r\n \t\tdouble _min_cost, _sol_cost, weight_sum, position_sec1[1], position_sec2[1], velocity_lim[1], _prev_x[3], _prev_r[3], now_pos_gap[1];\r\n \t\tdouble *a, *b, *c, *dev_jacobian, *dev_jacobian_transpose, *dev_manipulability, *dev_now_pos_gap;\r\n     \tdouble *dev_rot_EE, *dev_a, *dev_b, *dev_c, *dev_d, *dev_e, *dev_cost, *dev_x_goal, *dev_q_goal, *dev_rot_goal, *dev_rot_goal_T, *hidden0, *hidden1, *dev_velocity_lim, *dev_position_sec1, *dev_position_sec2, *dev_joint_min_limit_for_cost, *dev_joint_max_limit_for_cost, *dev_orientation_EE, *dev_position_EE, *dev_pos_tmp, *dev_prev_position_EE, *dev_prev_orientation_EE, *dev_velocity_EE, *dev_velocity_ori_EE, *dev_cost_x, *dev_cen_joint_position;\r\n \t\tdouble *dev__A, *dev__mean_matrix, *dev__matrix_for_cuda, *dev__prev_matrix_for_cuda, *dev_FK_a, *dev_FK_d, *dev_FK_alpha;\r\n-\t\tdouble inputs[_JDOF * _sampling_num], _mean_matrix[N], d[N], e[N], f[N],cost_jointlimit[N], cost_xerr[_sampling_num * _time_window], position_EE[3 * _sampling_num * _time_window], orientation_EE[3 * _sampling_num * _time_window], velocity_EE[3 * _sampling_num * _time_window], velocity_ori_EE[3 * _sampling_num * _time_window], FK_d[9], FK_a[9], FK_alpha[9];\r\n-\t\tdouble tmp_goal[_JDOF * _sampling_num], jacobian[_JDOF * 6 * _sampling_num * _time_window], jacobian_transpose[_JDOF * 6 * _sampling_num * _time_window], manipulability[_sampling_num * _time_window], prev_position_EE[3], prev_orientation_EE[3], prev_x_cost;\r\n+\t\tdouble inputs[_JDOF * __sampling_num], _mean_matrix[N], d[N], e[N], f[N],cost_jointlimit[N], cost_xerr[__sampling_num * _time_window], position_EE[3 * __sampling_num * _time_window], orientation_EE[3 * __sampling_num * _time_window], velocity_EE[3 * __sampling_num * _time_window], velocity_ori_EE[3 * __sampling_num * _time_window], FK_d[9], FK_a[9], FK_alpha[9];\r\n+\t\tdouble tmp_goal[_JDOF * __sampling_num], jacobian[_JDOF * 6 * __sampling_num * _time_window], jacobian_transpose[_JDOF * 6 * __sampling_num * _time_window], manipulability[__sampling_num * _time_window], prev_position_EE[3], prev_orientation_EE[3], prev_x_cost;\r\n \t\tdouble _dt_cuda2[1], tmp_find_goal;\r\n \t\tdouble *dev_dt_cuda2, *dev_found_sol;\r\n-\t\tdouble found_goal_list[_sampling_num];\r\n+\t\tdouble found_goal_list[__sampling_num];\r\n \t\t\r\n \t\tint found_goal;\r\n \t\tint *dev_found_goal;\r\n \t\tint reset_check;\r\n \r\n \t\t// double gap_limit;\r\n-\t\t// double _random_matrix[_sampling_num][_JDOF][_time_window], _mean_matrix[_sampling_num][_JDOF][_time_window];\r\n+\t\t// double _random_matrix[__sampling_num][_JDOF][_time_window], _mean_matrix[__sampling_num][_JDOF][_time_window];\r\n \r\n \t\tifstream weight0;\r\n \t\tostringstream filename_NN[6];\r\n \t\t// int numBlocks, numBlocks2;\r\n"
                },
                {
                    "date": 1691566254574,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n using namespace std;\r\n \r\n #define _JDOF 7\r\n #define OUTPUT_SIZE 1\r\n-#define __sampling_num 64\r\n+#define _sampling_num 64\r\n #define _time_window 32\r\n #define _dt_cuda 0.003\r\n #define _dt2_window 5\r\n // #define _dt_cuda2 0.5\r\n@@ -27,9 +27,9 @@\n // #define delta_T2 0.1\r\n // #define timestep_T1 7\r\n // #define timestep_T2 8\r\n // #define _time_window (timestep_T1+timestep_T2)\r\n-#define N __sampling_num*_JDOF*_time_window\r\n+#define N _sampling_num*_JDOF*_time_window\r\n #define _nodes_cuda 32\r\n #define _threshold_cuda 0.001\r\n #define gap_limit 0.3\r\n \r\n@@ -46,30 +46,30 @@\n \t\t\r\n \tprivate:\r\n \t\tdouble weights0[_JDOF*_nodes_cuda], weights1[_nodes_cuda], weights2[_nodes_cuda*_nodes_cuda], weights3[_nodes_cuda], weights4[_nodes_cuda];\r\n \t\tdouble weights5[OUTPUT_SIZE];\r\n-\t\tdouble outputs[__sampling_num];\r\n+\t\tdouble outputs[_sampling_num];\r\n \r\n \t\tdouble *d_inputs, *d_weights0, *d_weights1, *d_weights2, *d_weights3, *d_weights4, *d_weights5, *d_outputs;\r\n \t\tdouble *dev_min_joint_position_for_NN, *dev_max_joint_position_for_NN, *dev_inputs;\r\n-\t\tdouble _matrix_for_cuda[N], _return_cost[__sampling_num], _cost[__sampling_num];\r\n+\t\tdouble _matrix_for_cuda[N], _return_cost[_sampling_num], _cost[_sampling_num];\r\n \t\tdouble _cen_joint_position[_JDOF], _max_joint_position[_JDOF], _min_joint_position[_JDOF], _q_des[_JDOF], _qdot_des[_JDOF], _A[_JDOF], _weighted_A[_JDOF], _hat_min_joint_position[_JDOF], _hat_max_joint_position[_JDOF];\r\n \t\tdouble _min_cost, _sol_cost, weight_sum, position_sec1[1], position_sec2[1], velocity_lim[1], _prev_x[3], _prev_r[3], now_pos_gap[1];\r\n \t\tdouble *a, *b, *c, *dev_jacobian, *dev_jacobian_transpose, *dev_manipulability, *dev_now_pos_gap;\r\n     \tdouble *dev_rot_EE, *dev_a, *dev_b, *dev_c, *dev_d, *dev_e, *dev_cost, *dev_x_goal, *dev_q_goal, *dev_rot_goal, *dev_rot_goal_T, *hidden0, *hidden1, *dev_velocity_lim, *dev_position_sec1, *dev_position_sec2, *dev_joint_min_limit_for_cost, *dev_joint_max_limit_for_cost, *dev_orientation_EE, *dev_position_EE, *dev_pos_tmp, *dev_prev_position_EE, *dev_prev_orientation_EE, *dev_velocity_EE, *dev_velocity_ori_EE, *dev_cost_x, *dev_cen_joint_position;\r\n \t\tdouble *dev__A, *dev__mean_matrix, *dev__matrix_for_cuda, *dev__prev_matrix_for_cuda, *dev_FK_a, *dev_FK_d, *dev_FK_alpha;\r\n-\t\tdouble inputs[_JDOF * __sampling_num], _mean_matrix[N], d[N], e[N], f[N],cost_jointlimit[N], cost_xerr[__sampling_num * _time_window], position_EE[3 * __sampling_num * _time_window], orientation_EE[3 * __sampling_num * _time_window], velocity_EE[3 * __sampling_num * _time_window], velocity_ori_EE[3 * __sampling_num * _time_window], FK_d[9], FK_a[9], FK_alpha[9];\r\n-\t\tdouble tmp_goal[_JDOF * __sampling_num], jacobian[_JDOF * 6 * __sampling_num * _time_window], jacobian_transpose[_JDOF * 6 * __sampling_num * _time_window], manipulability[__sampling_num * _time_window], prev_position_EE[3], prev_orientation_EE[3], prev_x_cost;\r\n+\t\tdouble inputs[_JDOF * _sampling_num], _mean_matrix[N], d[N], e[N], f[N],cost_jointlimit[N], cost_xerr[_sampling_num * _time_window], position_EE[3 * _sampling_num * _time_window], orientation_EE[3 * _sampling_num * _time_window], velocity_EE[3 * _sampling_num * _time_window], velocity_ori_EE[3 * _sampling_num * _time_window], FK_d[9], FK_a[9], FK_alpha[9];\r\n+\t\tdouble tmp_goal[_JDOF * _sampling_num], jacobian[_JDOF * 6 * _sampling_num * _time_window], jacobian_transpose[_JDOF * 6 * _sampling_num * _time_window], manipulability[_sampling_num * _time_window], prev_position_EE[3], prev_orientation_EE[3], prev_x_cost;\r\n \t\tdouble _dt_cuda2[1], tmp_find_goal;\r\n \t\tdouble *dev_dt_cuda2, *dev_found_sol;\r\n-\t\tdouble found_goal_list[__sampling_num];\r\n+\t\tdouble found_goal_list[_sampling_num];\r\n \t\t\r\n \t\tint found_goal;\r\n \t\tint *dev_found_goal;\r\n \t\tint reset_check;\r\n \r\n \t\t// double gap_limit;\r\n-\t\t// double _random_matrix[__sampling_num][_JDOF][_time_window], _mean_matrix[__sampling_num][_JDOF][_time_window];\r\n+\t\t// double _random_matrix[_sampling_num][_JDOF][_time_window], _mean_matrix[_sampling_num][_JDOF][_time_window];\r\n \r\n \t\tifstream weight0;\r\n \t\tostringstream filename_NN[6];\r\n \t\t// int numBlocks, numBlocks2;\r\n"
                },
                {
                    "date": 1691566352103,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,25 +15,8 @@\n #define PI_CUDA 3.1415926535897932384626433\r\n \r\n using namespace std;\r\n \r\n-#define _JDOF 7\r\n-#define OUTPUT_SIZE 1\r\n-#define _sampling_num 64\r\n-#define _time_window 32\r\n-#define _dt_cuda 0.003\r\n-#define _dt2_window 5\r\n-// #define _dt_cuda2 0.5\r\n-// #define delta_T1 _dt_cuda\r\n-// #define delta_T2 0.1\r\n-// #define timestep_T1 7\r\n-// #define timestep_T2 8\r\n-// #define _time_window (timestep_T1+timestep_T2)\r\n-#define N _sampling_num*_JDOF*_time_window\r\n-#define _nodes_cuda 32\r\n-#define _threshold_cuda 0.001\r\n-#define gap_limit 0.3\r\n-\r\n class CudaTest\r\n {\t\r\n \tcurandState* dev_states;\r\n \t\r\n@@ -41,9 +24,9 @@\n \t\tCudaTest(void);\r\n \t\tvirtual ~CudaTest(void);\r\n \t\tvoid cuda_cal(double *_init_pos,double *_init_vel, double *_goal_pos_cuda, int control_mode, double *returnArray);\r\n \t\tdouble returnArray[_JDOF*3];\r\n-\t\tvoid cuda_memory_free();\t\t\r\n+\t\tvoid cuda_memory_free();\r\n \t\t\r\n \tprivate:\r\n \t\tdouble weights0[_JDOF*_nodes_cuda], weights1[_nodes_cuda], weights2[_nodes_cuda*_nodes_cuda], weights3[_nodes_cuda], weights4[_nodes_cuda];\r\n \t\tdouble weights5[OUTPUT_SIZE];\r\n@@ -78,5 +61,8 @@\n \t\tvoid initialize();\r\n \t\tvoid cuda_memory_save();\r\n \t\tvoid generate_random();\r\n \t\tvoid load_weight();\r\n+\r\n+\t\tint JODF, OUTPUT_SIZE, _sampling_num, _time_window, _dt2_window, _nodes_cuda, N;\r\n+\t\tdouble _dt_cuda, _threshold_cuda, gap_limit;\r\n };\r\n"
                },
                {
                    "date": 1691566405318,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,8 +15,25 @@\n #define PI_CUDA 3.1415926535897932384626433\r\n \r\n using namespace std;\r\n \r\n+#define _JDOF 7\r\n+#define OUTPUT_SIZE 1\r\n+#define _sampling_num 64\r\n+#define _time_window 32\r\n+#define _dt_cuda 0.003\r\n+#define _dt2_window 5\r\n+// #define _dt_cuda2 0.5\r\n+// #define delta_T1 _dt_cuda\r\n+// #define delta_T2 0.1\r\n+// #define timestep_T1 7\r\n+// #define timestep_T2 8\r\n+// #define _time_window (timestep_T1+timestep_T2)\r\n+#define N _sampling_num*_JDOF*_time_window\r\n+#define _nodes_cuda 32\r\n+#define _threshold_cuda 0.001\r\n+#define gap_limit 0.3\r\n+\r\n class CudaTest\r\n {\t\r\n \tcurandState* dev_states;\r\n \t\r\n@@ -24,9 +41,9 @@\n \t\tCudaTest(void);\r\n \t\tvirtual ~CudaTest(void);\r\n \t\tvoid cuda_cal(double *_init_pos,double *_init_vel, double *_goal_pos_cuda, int control_mode, double *returnArray);\r\n \t\tdouble returnArray[_JDOF*3];\r\n-\t\tvoid cuda_memory_free();\r\n+\t\tvoid cuda_memory_free();\t\t\r\n \t\t\r\n \tprivate:\r\n \t\tdouble weights0[_JDOF*_nodes_cuda], weights1[_nodes_cuda], weights2[_nodes_cuda*_nodes_cuda], weights3[_nodes_cuda], weights4[_nodes_cuda];\r\n \t\tdouble weights5[OUTPUT_SIZE];\r\n@@ -61,8 +78,5 @@\n \t\tvoid initialize();\r\n \t\tvoid cuda_memory_save();\r\n \t\tvoid generate_random();\r\n \t\tvoid load_weight();\r\n-\r\n-\t\tint JODF, OUTPUT_SIZE, _sampling_num, _time_window, _dt2_window, _nodes_cuda, N;\r\n-\t\tdouble _dt_cuda, _threshold_cuda, gap_limit;\r\n };\r\n"
                },
                {
                    "date": 1691566426904,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,19 +17,13 @@\n using namespace std;\r\n \r\n #define _JDOF 7\r\n #define OUTPUT_SIZE 1\r\n-#define _sampling_num 64\r\n+#define SAM_NUM_MACRO_PRE 64\r\n #define _time_window 32\r\n #define _dt_cuda 0.003\r\n #define _dt2_window 5\r\n-// #define _dt_cuda2 0.5\r\n-// #define delta_T1 _dt_cuda\r\n-// #define delta_T2 0.1\r\n-// #define timestep_T1 7\r\n-// #define timestep_T2 8\r\n-// #define _time_window (timestep_T1+timestep_T2)\r\n-#define N _sampling_num*_JDOF*_time_window\r\n+#define N SAM_NUM_MACRO_PRE*_JDOF*_time_window\r\n #define _nodes_cuda 32\r\n #define _threshold_cuda 0.001\r\n #define gap_limit 0.3\r\n \r\n@@ -46,30 +40,30 @@\n \t\t\r\n \tprivate:\r\n \t\tdouble weights0[_JDOF*_nodes_cuda], weights1[_nodes_cuda], weights2[_nodes_cuda*_nodes_cuda], weights3[_nodes_cuda], weights4[_nodes_cuda];\r\n \t\tdouble weights5[OUTPUT_SIZE];\r\n-\t\tdouble outputs[_sampling_num];\r\n+\t\tdouble outputs[SAM_NUM_MACRO_PRE];\r\n \r\n \t\tdouble *d_inputs, *d_weights0, *d_weights1, *d_weights2, *d_weights3, *d_weights4, *d_weights5, *d_outputs;\r\n \t\tdouble *dev_min_joint_position_for_NN, *dev_max_joint_position_for_NN, *dev_inputs;\r\n-\t\tdouble _matrix_for_cuda[N], _return_cost[_sampling_num], _cost[_sampling_num];\r\n+\t\tdouble _matrix_for_cuda[N], _return_cost[SAM_NUM_MACRO_PRE], _cost[SAM_NUM_MACRO_PRE];\r\n \t\tdouble _cen_joint_position[_JDOF], _max_joint_position[_JDOF], _min_joint_position[_JDOF], _q_des[_JDOF], _qdot_des[_JDOF], _A[_JDOF], _weighted_A[_JDOF], _hat_min_joint_position[_JDOF], _hat_max_joint_position[_JDOF];\r\n \t\tdouble _min_cost, _sol_cost, weight_sum, position_sec1[1], position_sec2[1], velocity_lim[1], _prev_x[3], _prev_r[3], now_pos_gap[1];\r\n \t\tdouble *a, *b, *c, *dev_jacobian, *dev_jacobian_transpose, *dev_manipulability, *dev_now_pos_gap;\r\n     \tdouble *dev_rot_EE, *dev_a, *dev_b, *dev_c, *dev_d, *dev_e, *dev_cost, *dev_x_goal, *dev_q_goal, *dev_rot_goal, *dev_rot_goal_T, *hidden0, *hidden1, *dev_velocity_lim, *dev_position_sec1, *dev_position_sec2, *dev_joint_min_limit_for_cost, *dev_joint_max_limit_for_cost, *dev_orientation_EE, *dev_position_EE, *dev_pos_tmp, *dev_prev_position_EE, *dev_prev_orientation_EE, *dev_velocity_EE, *dev_velocity_ori_EE, *dev_cost_x, *dev_cen_joint_position;\r\n \t\tdouble *dev__A, *dev__mean_matrix, *dev__matrix_for_cuda, *dev__prev_matrix_for_cuda, *dev_FK_a, *dev_FK_d, *dev_FK_alpha;\r\n-\t\tdouble inputs[_JDOF * _sampling_num], _mean_matrix[N], d[N], e[N], f[N],cost_jointlimit[N], cost_xerr[_sampling_num * _time_window], position_EE[3 * _sampling_num * _time_window], orientation_EE[3 * _sampling_num * _time_window], velocity_EE[3 * _sampling_num * _time_window], velocity_ori_EE[3 * _sampling_num * _time_window], FK_d[9], FK_a[9], FK_alpha[9];\r\n-\t\tdouble tmp_goal[_JDOF * _sampling_num], jacobian[_JDOF * 6 * _sampling_num * _time_window], jacobian_transpose[_JDOF * 6 * _sampling_num * _time_window], manipulability[_sampling_num * _time_window], prev_position_EE[3], prev_orientation_EE[3], prev_x_cost;\r\n+\t\tdouble inputs[_JDOF * SAM_NUM_MACRO_PRE], _mean_matrix[N], d[N], e[N], f[N],cost_jointlimit[N], cost_xerr[SAM_NUM_MACRO_PRE * _time_window], position_EE[3 * SAM_NUM_MACRO_PRE * _time_window], orientation_EE[3 * SAM_NUM_MACRO_PRE * _time_window], velocity_EE[3 * SAM_NUM_MACRO_PRE * _time_window], velocity_ori_EE[3 * SAM_NUM_MACRO_PRE * _time_window], FK_d[9], FK_a[9], FK_alpha[9];\r\n+\t\tdouble tmp_goal[_JDOF * SAM_NUM_MACRO_PRE], jacobian[_JDOF * 6 * SAM_NUM_MACRO_PRE * _time_window], jacobian_transpose[_JDOF * 6 * SAM_NUM_MACRO_PRE * _time_window], manipulability[SAM_NUM_MACRO_PRE * _time_window], prev_position_EE[3], prev_orientation_EE[3], prev_x_cost;\r\n \t\tdouble _dt_cuda2[1], tmp_find_goal;\r\n \t\tdouble *dev_dt_cuda2, *dev_found_sol;\r\n-\t\tdouble found_goal_list[_sampling_num];\r\n+\t\tdouble found_goal_list[SAM_NUM_MACRO_PRE];\r\n \t\t\r\n \t\tint found_goal;\r\n \t\tint *dev_found_goal;\r\n \t\tint reset_check;\r\n \r\n \t\t// double gap_limit;\r\n-\t\t// double _random_matrix[_sampling_num][_JDOF][_time_window], _mean_matrix[_sampling_num][_JDOF][_time_window];\r\n+\t\t// double _random_matrix[SAM_NUM_MACRO_PRE][_JDOF][_time_window], _mean_matrix[SAM_NUM_MACRO_PRE][_JDOF][_time_window];\r\n \r\n \t\tifstream weight0;\r\n \t\tostringstream filename_NN[6];\r\n \t\t// int numBlocks, numBlocks2;\r\n"
                },
                {
                    "date": 1691566517038,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,13 +17,13 @@\n using namespace std;\r\n \r\n #define _JDOF 7\r\n #define OUTPUT_SIZE 1\r\n-#define SAM_NUM_MACRO_PRE 64\r\n+#define _sampling_num 64\r\n #define _time_window 32\r\n #define _dt_cuda 0.003\r\n #define _dt2_window 5\r\n-#define N SAM_NUM_MACRO_PRE*_JDOF*_time_window\r\n+#define N _sampling_num*_JDOF*_time_window\r\n #define _nodes_cuda 32\r\n #define _threshold_cuda 0.001\r\n #define gap_limit 0.3\r\n \r\n@@ -40,30 +40,30 @@\n \t\t\r\n \tprivate:\r\n \t\tdouble weights0[_JDOF*_nodes_cuda], weights1[_nodes_cuda], weights2[_nodes_cuda*_nodes_cuda], weights3[_nodes_cuda], weights4[_nodes_cuda];\r\n \t\tdouble weights5[OUTPUT_SIZE];\r\n-\t\tdouble outputs[SAM_NUM_MACRO_PRE];\r\n+\t\tdouble outputs[_sampling_num];\r\n \r\n \t\tdouble *d_inputs, *d_weights0, *d_weights1, *d_weights2, *d_weights3, *d_weights4, *d_weights5, *d_outputs;\r\n \t\tdouble *dev_min_joint_position_for_NN, *dev_max_joint_position_for_NN, *dev_inputs;\r\n-\t\tdouble _matrix_for_cuda[N], _return_cost[SAM_NUM_MACRO_PRE], _cost[SAM_NUM_MACRO_PRE];\r\n+\t\tdouble _matrix_for_cuda[N], _return_cost[_sampling_num], _cost[_sampling_num];\r\n \t\tdouble _cen_joint_position[_JDOF], _max_joint_position[_JDOF], _min_joint_position[_JDOF], _q_des[_JDOF], _qdot_des[_JDOF], _A[_JDOF], _weighted_A[_JDOF], _hat_min_joint_position[_JDOF], _hat_max_joint_position[_JDOF];\r\n \t\tdouble _min_cost, _sol_cost, weight_sum, position_sec1[1], position_sec2[1], velocity_lim[1], _prev_x[3], _prev_r[3], now_pos_gap[1];\r\n \t\tdouble *a, *b, *c, *dev_jacobian, *dev_jacobian_transpose, *dev_manipulability, *dev_now_pos_gap;\r\n     \tdouble *dev_rot_EE, *dev_a, *dev_b, *dev_c, *dev_d, *dev_e, *dev_cost, *dev_x_goal, *dev_q_goal, *dev_rot_goal, *dev_rot_goal_T, *hidden0, *hidden1, *dev_velocity_lim, *dev_position_sec1, *dev_position_sec2, *dev_joint_min_limit_for_cost, *dev_joint_max_limit_for_cost, *dev_orientation_EE, *dev_position_EE, *dev_pos_tmp, *dev_prev_position_EE, *dev_prev_orientation_EE, *dev_velocity_EE, *dev_velocity_ori_EE, *dev_cost_x, *dev_cen_joint_position;\r\n \t\tdouble *dev__A, *dev__mean_matrix, *dev__matrix_for_cuda, *dev__prev_matrix_for_cuda, *dev_FK_a, *dev_FK_d, *dev_FK_alpha;\r\n-\t\tdouble inputs[_JDOF * SAM_NUM_MACRO_PRE], _mean_matrix[N], d[N], e[N], f[N],cost_jointlimit[N], cost_xerr[SAM_NUM_MACRO_PRE * _time_window], position_EE[3 * SAM_NUM_MACRO_PRE * _time_window], orientation_EE[3 * SAM_NUM_MACRO_PRE * _time_window], velocity_EE[3 * SAM_NUM_MACRO_PRE * _time_window], velocity_ori_EE[3 * SAM_NUM_MACRO_PRE * _time_window], FK_d[9], FK_a[9], FK_alpha[9];\r\n-\t\tdouble tmp_goal[_JDOF * SAM_NUM_MACRO_PRE], jacobian[_JDOF * 6 * SAM_NUM_MACRO_PRE * _time_window], jacobian_transpose[_JDOF * 6 * SAM_NUM_MACRO_PRE * _time_window], manipulability[SAM_NUM_MACRO_PRE * _time_window], prev_position_EE[3], prev_orientation_EE[3], prev_x_cost;\r\n+\t\tdouble inputs[_JDOF * _sampling_num], _mean_matrix[N], d[N], e[N], f[N],cost_jointlimit[N], cost_xerr[_sampling_num * _time_window], position_EE[3 * _sampling_num * _time_window], orientation_EE[3 * _sampling_num * _time_window], velocity_EE[3 * _sampling_num * _time_window], velocity_ori_EE[3 * _sampling_num * _time_window], FK_d[9], FK_a[9], FK_alpha[9];\r\n+\t\tdouble tmp_goal[_JDOF * _sampling_num], jacobian[_JDOF * 6 * _sampling_num * _time_window], jacobian_transpose[_JDOF * 6 * _sampling_num * _time_window], manipulability[_sampling_num * _time_window], prev_position_EE[3], prev_orientation_EE[3], prev_x_cost;\r\n \t\tdouble _dt_cuda2[1], tmp_find_goal;\r\n \t\tdouble *dev_dt_cuda2, *dev_found_sol;\r\n-\t\tdouble found_goal_list[SAM_NUM_MACRO_PRE];\r\n+\t\tdouble found_goal_list[_sampling_num];\r\n \t\t\r\n \t\tint found_goal;\r\n \t\tint *dev_found_goal;\r\n \t\tint reset_check;\r\n \r\n \t\t// double gap_limit;\r\n-\t\t// double _random_matrix[SAM_NUM_MACRO_PRE][_JDOF][_time_window], _mean_matrix[SAM_NUM_MACRO_PRE][_JDOF][_time_window];\r\n+\t\t// double _random_matrix[_sampling_num][_JDOF][_time_window], _mean_matrix[_sampling_num][_JDOF][_time_window];\r\n \r\n \t\tifstream weight0;\r\n \t\tostringstream filename_NN[6];\r\n \t\t// int numBlocks, numBlocks2;\r\n"
                },
                {
                    "date": 1691567207273,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,14 @@\n \t\tCudaTest(void);\r\n \t\tvirtual ~CudaTest(void);\r\n \t\tvoid cuda_cal(double *_init_pos,double *_init_vel, double *_goal_pos_cuda, int control_mode, double *returnArray);\r\n \t\tdouble returnArray[_JDOF*3];\r\n-\t\tvoid cuda_memory_free();\t\t\r\n+\t\tvoid cuda_memory_free();\r\n+\t\tvoid cpu_memory_save();\r\n+\t\tvoid initialize();\r\n+\t\tvoid cuda_memory_save();\r\n+\t\tvoid generate_random();\r\n+\t\tvoid load_weight();\r\n \t\t\r\n \tprivate:\r\n \t\tdouble weights0[_JDOF*_nodes_cuda], weights1[_nodes_cuda], weights2[_nodes_cuda*_nodes_cuda], weights3[_nodes_cuda], weights4[_nodes_cuda];\r\n \t\tdouble weights5[OUTPUT_SIZE];\r\n@@ -66,11 +71,5 @@\n \r\n \t\tifstream weight0;\r\n \t\tostringstream filename_NN[6];\r\n \t\t// int numBlocks, numBlocks2;\r\n-\r\n-\t\tvoid cpu_memory_save();\r\n-\t\tvoid initialize();\r\n-\t\tvoid cuda_memory_save();\r\n-\t\tvoid generate_random();\r\n-\t\tvoid load_weight();\r\n };\r\n"
                },
                {
                    "date": 1691740505037,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,8 +60,9 @@\n \t\tdouble tmp_goal[_JDOF * _sampling_num], jacobian[_JDOF * 6 * _sampling_num * _time_window], jacobian_transpose[_JDOF * 6 * _sampling_num * _time_window], manipulability[_sampling_num * _time_window], prev_position_EE[3], prev_orientation_EE[3], prev_x_cost;\r\n \t\tdouble _dt_cuda2[1], tmp_find_goal;\r\n \t\tdouble *dev_dt_cuda2, *dev_found_sol;\r\n \t\tdouble found_goal_list[_sampling_num];\r\n+\t\tdouble *dev_alpha, *dev_beta;\r\n \t\t\r\n \t\tint found_goal;\r\n \t\tint *dev_found_goal;\r\n \t\tint reset_check;\r\n"
                },
                {
                    "date": 1691740530595,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n \t\r\n \tpublic:\r\n \t\tCudaTest(void);\r\n \t\tvirtual ~CudaTest(void);\r\n-\t\tvoid cuda_cal(double *_init_pos,double *_init_vel, double *_goal_pos_cuda, int control_mode, double *returnArray);\r\n+\t\tvoid cuda_cal(double *_init_pos,double *_init_vel, double *_goal_pos_cuda, int control_mode, double *alpha, double *returnArray);\r\n \t\tdouble returnArray[_JDOF*3];\r\n \t\tvoid cuda_memory_free();\r\n \t\tvoid cpu_memory_save();\r\n \t\tvoid initialize();\r\n"
                },
                {
                    "date": 1692685081979,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n #include <iostream>\r\n #include <stdio.h>\r\n #include <chrono>\r\n #include <random>\r\n-#include <fstream>\r\n+// #include <fstream>\r\n #include <cstdio>\r\n #include <cstdarg>\r\n #include <ctime>\r\n #include <sstream>\r\n@@ -17,12 +17,12 @@\n using namespace std;\r\n \r\n #define _JDOF 7\r\n #define OUTPUT_SIZE 1\r\n-#define _sampling_num 64\r\n-#define _time_window 32\r\n-#define _dt_cuda 0.003\r\n-#define _dt2_window 5\r\n+#define _sampling_num 128\r\n+#define _time_window 16\r\n+#define _dt_cuda 0.005\r\n+#define _dt2_window 6\r\n #define N _sampling_num*_JDOF*_time_window\r\n #define _nodes_cuda 32\r\n #define _threshold_cuda 0.001\r\n #define gap_limit 0.3\r\n@@ -33,16 +33,17 @@\n \t\r\n \tpublic:\r\n \t\tCudaTest(void);\r\n \t\tvirtual ~CudaTest(void);\r\n-\t\tvoid cuda_cal(double *_init_pos,double *_init_vel, double *_goal_pos_cuda, int control_mode, double *alpha, double *returnArray);\r\n+\t\tvoid cuda_cal(double *_init_pos,double *_init_vel, double *_goal_pos_cuda, int control_mode, double *alpha, double *beta, double *time_rl, double *returnArray);\r\n \t\tdouble returnArray[_JDOF*3];\r\n \t\tvoid cuda_memory_free();\r\n \t\tvoid cpu_memory_save();\r\n \t\tvoid initialize();\r\n \t\tvoid cuda_memory_save();\r\n \t\tvoid generate_random();\r\n \t\tvoid load_weight();\r\n+\t\tvoid RL_initialize();\r\n \t\t\r\n \tprivate:\r\n \t\tdouble weights0[_JDOF*_nodes_cuda], weights1[_nodes_cuda], weights2[_nodes_cuda*_nodes_cuda], weights3[_nodes_cuda], weights4[_nodes_cuda];\r\n \t\tdouble weights5[OUTPUT_SIZE];\r\n"
                },
                {
                    "date": 1692685087116,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n #include <iostream>\r\n #include <stdio.h>\r\n #include <chrono>\r\n #include <random>\r\n-// #include <fstream>\r\n+#include <fstream>\r\n #include <cstdio>\r\n #include <cstdarg>\r\n #include <ctime>\r\n #include <sstream>\r\n"
                },
                {
                    "date": 1692685706770,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,8 +42,9 @@\n \t\tvoid cuda_memory_save();\r\n \t\tvoid generate_random();\r\n \t\tvoid load_weight();\r\n \t\tvoid RL_initialize();\r\n+\t\tostringstream filename_NN[6];\r\n \t\t\r\n \tprivate:\r\n \t\tdouble weights0[_JDOF*_nodes_cuda], weights1[_nodes_cuda], weights2[_nodes_cuda*_nodes_cuda], weights3[_nodes_cuda], weights4[_nodes_cuda];\r\n \t\tdouble weights5[OUTPUT_SIZE];\r\n@@ -71,7 +72,7 @@\n \t\t// double gap_limit;\r\n \t\t// double _random_matrix[_sampling_num][_JDOF][_time_window], _mean_matrix[_sampling_num][_JDOF][_time_window];\r\n \r\n \t\tifstream weight0;\r\n-\t\tostringstream filename_NN[6];\r\n+\t\t\r\n \t\t// int numBlocks, numBlocks2;\r\n };\r\n"
                },
                {
                    "date": 1692686039579,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n \t\tvoid cuda_memory_save();\r\n \t\tvoid generate_random();\r\n \t\tvoid load_weight();\r\n \t\tvoid RL_initialize();\r\n-\t\tostringstream filename_NN[6];\r\n+\t\tostringstream filename_NN2[6];\r\n \t\t\r\n \tprivate:\r\n \t\tdouble weights0[_JDOF*_nodes_cuda], weights1[_nodes_cuda], weights2[_nodes_cuda*_nodes_cuda], weights3[_nodes_cuda], weights4[_nodes_cuda];\r\n \t\tdouble weights5[OUTPUT_SIZE];\r\n"
                },
                {
                    "date": 1692686562439,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n \t\tvoid cuda_memory_save();\r\n \t\tvoid generate_random();\r\n \t\tvoid load_weight();\r\n \t\tvoid RL_initialize();\r\n-\t\tostringstream filename_NN2[6];\r\n+\t\t// ostringstream filename_NN2[6];\r\n \t\t\r\n \tprivate:\r\n \t\tdouble weights0[_JDOF*_nodes_cuda], weights1[_nodes_cuda], weights2[_nodes_cuda*_nodes_cuda], weights3[_nodes_cuda], weights4[_nodes_cuda];\r\n \t\tdouble weights5[OUTPUT_SIZE];\r\n"
                },
                {
                    "date": 1692686691500,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,10 @@\n \t\tvoid cuda_memory_save();\r\n \t\tvoid generate_random();\r\n \t\tvoid load_weight();\r\n \t\tvoid RL_initialize();\r\n-\t\t// ostringstream filename_NN2[6];\r\n+\t\tostringstream filename_NN2[6];\r\n+\t\tifstream weight0;\r\n \t\t\r\n \tprivate:\r\n \t\tdouble weights0[_JDOF*_nodes_cuda], weights1[_nodes_cuda], weights2[_nodes_cuda*_nodes_cuda], weights3[_nodes_cuda], weights4[_nodes_cuda];\r\n \t\tdouble weights5[OUTPUT_SIZE];\r\n@@ -71,8 +72,8 @@\n \r\n \t\t// double gap_limit;\r\n \t\t// double _random_matrix[_sampling_num][_JDOF][_time_window], _mean_matrix[_sampling_num][_JDOF][_time_window];\r\n \r\n-\t\tifstream weight0;\r\n \t\t\r\n+\t\t\r\n \t\t// int numBlocks, numBlocks2;\r\n };\r\n"
                },
                {
                    "date": 1692686728733,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,7 @@\n #pragma once\r\n #include <iostream>\r\n #include <stdio.h>\r\n-#include <iostream>\r\n #include <stdio.h>\r\n #include <chrono>\r\n #include <random>\r\n #include <fstream>\r\n"
                },
                {
                    "date": 1692686761449,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,8 @@\n \t\tvoid generate_random();\r\n \t\tvoid load_weight();\r\n \t\tvoid RL_initialize();\r\n \t\tostringstream filename_NN2[6];\r\n-\t\tifstream weight0;\r\n \t\t\r\n \tprivate:\r\n \t\tdouble weights0[_JDOF*_nodes_cuda], weights1[_nodes_cuda], weights2[_nodes_cuda*_nodes_cuda], weights3[_nodes_cuda], weights4[_nodes_cuda];\r\n \t\tdouble weights5[OUTPUT_SIZE];\r\n"
                },
                {
                    "date": 1692686867680,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n #define OUTPUT_SIZE 1\r\n #define _sampling_num 128\r\n #define _time_window 16\r\n #define _dt_cuda 0.005\r\n-#define _dt2_window 6\r\n+#define _dt2_window 8\r\n #define N _sampling_num*_JDOF*_time_window\r\n #define _nodes_cuda 32\r\n #define _threshold_cuda 0.001\r\n #define gap_limit 0.3\r\n"
                },
                {
                    "date": 1692687120201,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n #define OUTPUT_SIZE 1\r\n #define _sampling_num 128\r\n #define _time_window 16\r\n #define _dt_cuda 0.005\r\n-#define _dt2_window 8\r\n+#define _dt2_window 2\r\n #define N _sampling_num*_JDOF*_time_window\r\n #define _nodes_cuda 32\r\n #define _threshold_cuda 0.001\r\n #define gap_limit 0.3\r\n"
                },
                {
                    "date": 1692687314994,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,11 +17,11 @@\n \r\n #define _JDOF 7\r\n #define OUTPUT_SIZE 1\r\n #define _sampling_num 128\r\n-#define _time_window 16\r\n+#define _time_window 32\r\n #define _dt_cuda 0.005\r\n-#define _dt2_window 2\r\n+#define _dt2_window 5\r\n #define N _sampling_num*_JDOF*_time_window\r\n #define _nodes_cuda 32\r\n #define _threshold_cuda 0.001\r\n #define gap_limit 0.3\r\n"
                },
                {
                    "date": 1692687421140,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n #define OUTPUT_SIZE 1\r\n #define _sampling_num 128\r\n #define _time_window 32\r\n #define _dt_cuda 0.005\r\n-#define _dt2_window 5\r\n+#define _dt2_window 16\r\n #define N _sampling_num*_JDOF*_time_window\r\n #define _nodes_cuda 32\r\n #define _threshold_cuda 0.001\r\n #define gap_limit 0.3\r\n"
                },
                {
                    "date": 1692687528372,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n #define OUTPUT_SIZE 1\r\n #define _sampling_num 128\r\n #define _time_window 32\r\n #define _dt_cuda 0.005\r\n-#define _dt2_window 16\r\n+#define _dt2_window 8\r\n #define N _sampling_num*_JDOF*_time_window\r\n #define _nodes_cuda 32\r\n #define _threshold_cuda 0.001\r\n #define gap_limit 0.3\r\n"
                },
                {
                    "date": 1692687628460,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n #define OUTPUT_SIZE 1\r\n #define _sampling_num 128\r\n #define _time_window 32\r\n #define _dt_cuda 0.005\r\n-#define _dt2_window 8\r\n+#define _dt2_window 4\r\n #define N _sampling_num*_JDOF*_time_window\r\n #define _nodes_cuda 32\r\n #define _threshold_cuda 0.001\r\n #define gap_limit 0.3\r\n"
                },
                {
                    "date": 1692687949269,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n #define OUTPUT_SIZE 1\r\n #define _sampling_num 128\r\n #define _time_window 32\r\n #define _dt_cuda 0.005\r\n-#define _dt2_window 4\r\n+#define _dt2_window 16\r\n #define N _sampling_num*_JDOF*_time_window\r\n #define _nodes_cuda 32\r\n #define _threshold_cuda 0.001\r\n #define gap_limit 0.3\r\n"
                },
                {
                    "date": 1692687966973,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n \t\tvoid cuda_memory_save();\r\n \t\tvoid generate_random();\r\n \t\tvoid load_weight();\r\n \t\tvoid RL_initialize();\r\n-\t\tostringstream filename_NN2[6];\r\n+\t\t// ostringstream filename_NN2[6];\r\n \t\t\r\n \tprivate:\r\n \t\tdouble weights0[_JDOF*_nodes_cuda], weights1[_nodes_cuda], weights2[_nodes_cuda*_nodes_cuda], weights3[_nodes_cuda], weights4[_nodes_cuda];\r\n \t\tdouble weights5[OUTPUT_SIZE];\r\n"
                },
                {
                    "date": 1692688197365,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n \r\n #define _JDOF 7\r\n #define OUTPUT_SIZE 1\r\n #define _sampling_num 128\r\n-#define _time_window 32\r\n+#define _time_window 16\r\n #define _dt_cuda 0.005\r\n #define _dt2_window 16\r\n #define N _sampling_num*_JDOF*_time_window\r\n #define _nodes_cuda 32\r\n"
                },
                {
                    "date": 1692688388237,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n \r\n #define _JDOF 7\r\n #define OUTPUT_SIZE 1\r\n #define _sampling_num 128\r\n-#define _time_window 16\r\n+#define _time_window 32\r\n #define _dt_cuda 0.005\r\n #define _dt2_window 16\r\n #define N _sampling_num*_JDOF*_time_window\r\n #define _nodes_cuda 32\r\n"
                },
                {
                    "date": 1692688464220,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,12 +16,12 @@\n using namespace std;\r\n \r\n #define _JDOF 7\r\n #define OUTPUT_SIZE 1\r\n-#define _sampling_num 128\r\n-#define _time_window 32\r\n+#define _sampling_num 64\r\n+#define _time_window 64\r\n #define _dt_cuda 0.005\r\n-#define _dt2_window 16\r\n+#define _dt2_window 32\r\n #define N _sampling_num*_JDOF*_time_window\r\n #define _nodes_cuda 32\r\n #define _threshold_cuda 0.001\r\n #define gap_limit 0.3\r\n"
                },
                {
                    "date": 1692688532841,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n #define OUTPUT_SIZE 1\r\n #define _sampling_num 64\r\n #define _time_window 64\r\n #define _dt_cuda 0.005\r\n-#define _dt2_window 32\r\n+#define _dt2_window 8\r\n #define N _sampling_num*_JDOF*_time_window\r\n #define _nodes_cuda 32\r\n #define _threshold_cuda 0.001\r\n #define gap_limit 0.3\r\n"
                },
                {
                    "date": 1692688594459,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n \r\n #define _JDOF 7\r\n #define OUTPUT_SIZE 1\r\n #define _sampling_num 64\r\n-#define _time_window 64\r\n+#define _time_window 32\r\n #define _dt_cuda 0.005\r\n #define _dt2_window 8\r\n #define N _sampling_num*_JDOF*_time_window\r\n #define _nodes_cuda 32\r\n"
                },
                {
                    "date": 1692688641741,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,10 +18,10 @@\n #define _JDOF 7\r\n #define OUTPUT_SIZE 1\r\n #define _sampling_num 64\r\n #define _time_window 32\r\n-#define _dt_cuda 0.005\r\n-#define _dt2_window 8\r\n+#define _dt_cuda 0.003\r\n+#define _dt2_window 5\r\n #define N _sampling_num*_JDOF*_time_window\r\n #define _nodes_cuda 32\r\n #define _threshold_cuda 0.001\r\n #define gap_limit 0.3\r\n"
                },
                {
                    "date": 1692689588349,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n \t\r\n \tpublic:\r\n \t\tCudaTest(void);\r\n \t\tvirtual ~CudaTest(void);\r\n-\t\tvoid cuda_cal(double *_init_pos,double *_init_vel, double *_goal_pos_cuda, int control_mode, double *alpha, double *beta, double *time_rl, double *returnArray);\r\n+\t\tvoid cuda_cal(double *_init_pos,double *_init_vel, double *_goal_pos_cuda, int control_modedouble *returnArray);\r\n \t\tdouble returnArray[_JDOF*3];\r\n \t\tvoid cuda_memory_free();\r\n \t\tvoid cpu_memory_save();\r\n \t\tvoid initialize();\r\n"
                },
                {
                    "date": 1692693817795,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n #define _JDOF 7\r\n #define OUTPUT_SIZE 1\r\n #define _sampling_num 64\r\n #define _time_window 32\r\n-#define _dt_cuda 0.003\r\n+#define _dt_cuda 0.005\r\n #define _dt2_window 5\r\n #define N _sampling_num*_JDOF*_time_window\r\n #define _nodes_cuda 32\r\n #define _threshold_cuda 0.001\r\n@@ -32,9 +32,9 @@\n \t\r\n \tpublic:\r\n \t\tCudaTest(void);\r\n \t\tvirtual ~CudaTest(void);\r\n-\t\tvoid cuda_cal(double *_init_pos,double *_init_vel, double *_goal_pos_cuda, int control_modedouble *returnArray);\r\n+\t\tvoid cuda_cal(double *_init_pos,double *_init_vel, double *_goal_pos_cuda, int control_mode, double *returnArray);\r\n \t\tdouble returnArray[_JDOF*3];\r\n \t\tvoid cuda_memory_free();\r\n \t\tvoid cpu_memory_save();\r\n \t\tvoid initialize();\r\n"
                },
                {
                    "date": 1692693944206,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n #define _JDOF 7\r\n #define OUTPUT_SIZE 1\r\n #define _sampling_num 64\r\n #define _time_window 32\r\n-#define _dt_cuda 0.005\r\n+#define _dt_cuda 0.003\r\n #define _dt2_window 5\r\n #define N _sampling_num*_JDOF*_time_window\r\n #define _nodes_cuda 32\r\n #define _threshold_cuda 0.001\r\n"
                },
                {
                    "date": 1692777181356,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,10 +52,10 @@\n \t\tdouble *d_inputs, *d_weights0, *d_weights1, *d_weights2, *d_weights3, *d_weights4, *d_weights5, *d_outputs;\r\n \t\tdouble *dev_min_joint_position_for_NN, *dev_max_joint_position_for_NN, *dev_inputs;\r\n \t\tdouble _matrix_for_cuda[N], _return_cost[_sampling_num], _cost[_sampling_num];\r\n \t\tdouble _cen_joint_position[_JDOF], _max_joint_position[_JDOF], _min_joint_position[_JDOF], _q_des[_JDOF], _qdot_des[_JDOF], _A[_JDOF], _weighted_A[_JDOF], _hat_min_joint_position[_JDOF], _hat_max_joint_position[_JDOF];\r\n-\t\tdouble _min_cost, _sol_cost, weight_sum, position_sec1[1], position_sec2[1], velocity_lim[1], _prev_x[3], _prev_r[3], now_pos_gap[1];\r\n-\t\tdouble *a, *b, *c, *dev_jacobian, *dev_jacobian_transpose, *dev_manipulability, *dev_now_pos_gap;\r\n+\t\tdouble _min_cost, _sol_cost, weight_sum, position_sec1[1], position_sec2[1], velocity_lim[1], _prev_x[3], _prev_r[3], now_pos_gap[1], now_pos_gap_all[1];\r\n+\t\tdouble *a, *b, *c, *dev_jacobian, *dev_jacobian_transpose, *dev_manipulability, *dev_now_pos_gap, *dev_now_pos_gap_all;\r\n     \tdouble *dev_rot_EE, *dev_a, *dev_b, *dev_c, *dev_d, *dev_e, *dev_cost, *dev_x_goal, *dev_q_goal, *dev_rot_goal, *dev_rot_goal_T, *hidden0, *hidden1, *dev_velocity_lim, *dev_position_sec1, *dev_position_sec2, *dev_joint_min_limit_for_cost, *dev_joint_max_limit_for_cost, *dev_orientation_EE, *dev_position_EE, *dev_pos_tmp, *dev_prev_position_EE, *dev_prev_orientation_EE, *dev_velocity_EE, *dev_velocity_ori_EE, *dev_cost_x, *dev_cen_joint_position;\r\n \t\tdouble *dev__A, *dev__mean_matrix, *dev__matrix_for_cuda, *dev__prev_matrix_for_cuda, *dev_FK_a, *dev_FK_d, *dev_FK_alpha;\r\n \t\tdouble inputs[_JDOF * _sampling_num], _mean_matrix[N], d[N], e[N], f[N],cost_jointlimit[N], cost_xerr[_sampling_num * _time_window], position_EE[3 * _sampling_num * _time_window], orientation_EE[3 * _sampling_num * _time_window], velocity_EE[3 * _sampling_num * _time_window], velocity_ori_EE[3 * _sampling_num * _time_window], FK_d[9], FK_a[9], FK_alpha[9];\r\n \t\tdouble tmp_goal[_JDOF * _sampling_num], jacobian[_JDOF * 6 * _sampling_num * _time_window], jacobian_transpose[_JDOF * 6 * _sampling_num * _time_window], manipulability[_sampling_num * _time_window], prev_position_EE[3], prev_orientation_EE[3], prev_x_cost;\r\n"
                },
                {
                    "date": 1693385112057,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n #define _JDOF 7\r\n #define OUTPUT_SIZE 1\r\n #define _sampling_num 64\r\n #define _time_window 32\r\n-#define _dt_cuda 0.003\r\n+#define _dt_cuda 0.005\r\n #define _dt2_window 5\r\n #define N _sampling_num*_JDOF*_time_window\r\n #define _nodes_cuda 32\r\n #define _threshold_cuda 0.001\r\n"
                },
                {
                    "date": 1693385144810,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n #define _JDOF 7\r\n #define OUTPUT_SIZE 1\r\n #define _sampling_num 64\r\n #define _time_window 32\r\n-#define _dt_cuda 0.005\r\n+#define _dt_cuda 0.001\r\n #define _dt2_window 5\r\n #define N _sampling_num*_JDOF*_time_window\r\n #define _nodes_cuda 32\r\n #define _threshold_cuda 0.001\r\n"
                },
                {
                    "date": 1693468540258,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n #define _JDOF 7\r\n #define OUTPUT_SIZE 1\r\n #define _sampling_num 64\r\n #define _time_window 32\r\n-#define _dt_cuda 0.001\r\n+#define _dt_cuda 0.003\r\n #define _dt2_window 5\r\n #define N _sampling_num*_JDOF*_time_window\r\n #define _nodes_cuda 32\r\n #define _threshold_cuda 0.001\r\n"
                }
            ],
            "date": 1689747404772,
            "name": "Commit-0",
            "content": "#pragma once\r\n#include <iostream>\r\n#include <stdio.h>\r\n#include <iostream>\r\n#include <stdio.h>\r\n#include <chrono>\r\n#include <random>\r\n#include <fstream>\r\n#include <cstdio>\r\n#include <cstdarg>\r\n#include <ctime>\r\n#include <sstream>\r\n// #include <curand.h>\r\n#include <curand_kernel.h>\r\n#define PI_CUDA 3.1415926535897932384626433\r\n\r\nusing namespace std;\r\n\r\n\r\n// #define sam1 15\r\n// #define sam2 9\r\n// #define _sampling_num sam1 * sam2\r\n\r\n\r\n\r\n#define _JDOF 7\r\n#define OUTPUT_SIZE 1\r\n#define _sampling_num 64\r\n#define _time_window 32\r\n#define _dt_cuda 0.003\r\n#define _dt2_window 5\r\n// #define _dt_cuda2 0.5\r\n// #define delta_T1 _dt_cuda\r\n// #define delta_T2 0.1\r\n// #define timestep_T1 7\r\n// #define timestep_T2 8\r\n// #define _time_window (timestep_T1+timestep_T2)\r\n#define N _sampling_num*_JDOF*_time_window\r\n#define _nodes_cuda 32\r\n#define _threshold_cuda 0.001\r\n\r\nclass CudaTest\r\n{\t\r\n\tcurandState* dev_states;\r\n\t\r\n\tpublic:\r\n\t\tCudaTest(void);\r\n\t\tvirtual ~CudaTest(void);\r\n\t\tvoid cuda_cal(double *_init_pos,double *_init_vel, double *_goal_pos_cuda, int control_mode, double *returnArray);\r\n\t\tdouble returnArray[_JDOF*3];\r\n\t\tvoid cuda_memory_free();\t\t\r\n\t\t\r\n\tprivate:\r\n\t\tdouble weights0[_JDOF*_nodes_cuda], weights1[_nodes_cuda], weights2[_nodes_cuda*_nodes_cuda], weights3[_nodes_cuda], weights4[_nodes_cuda];\r\n\t\tdouble weights5[OUTPUT_SIZE];\r\n\t\tdouble outputs[_sampling_num];\r\n\r\n\t\tdouble *d_inputs, *d_weights0, *d_weights1, *d_weights2, *d_weights3, *d_weights4, *d_weights5, *d_outputs;\r\n\t\tdouble *dev_min_joint_position_for_NN, *dev_max_joint_position_for_NN, *dev_inputs;\r\n\t\tdouble _matrix_for_cuda[N], _return_cost[_sampling_num], _cost[_sampling_num];\r\n\t\tdouble _cen_joint_position[_JDOF], _max_joint_position[_JDOF], _min_joint_position[_JDOF], _q_des[_JDOF], _qdot_des[_JDOF], _A[_JDOF], _weighted_A[_JDOF], _hat_min_joint_position[_JDOF], _hat_max_joint_position[_JDOF];\r\n\t\tdouble _min_cost, weight_sum, position_sec1[1], position_sec2[1], velocity_lim[1], _prev_x[3], _prev_r[3], now_pos_gap[1];\r\n\t\tdouble *a, *b, *c, *dev_jacobian, *dev_jacobian_transpose, *dev_manipulability, *dev_now_pos_gap;\r\n    \tdouble *dev_rot_EE, *dev_a, *dev_b, *dev_c, *dev_d, *dev_e, *dev_cost, *dev_x_goal, *dev_q_goal, *dev_rot_goal, *dev_rot_goal_T, *hidden0, *hidden1, *dev_velocity_lim, *dev_position_sec1, *dev_position_sec2, *dev_joint_min_limit_for_cost, *dev_joint_max_limit_for_cost, *dev_orientation_EE, *dev_position_EE, *dev_pos_tmp, *dev_prev_position_EE, *dev_prev_orientation_EE, *dev_velocity_EE, *dev_velocity_ori_EE, *dev_cost_x, *dev_cen_joint_position;\r\n\t\tdouble *dev__A, *dev__mean_matrix, *dev__matrix_for_cuda, *dev__prev_matrix_for_cuda, *dev_FK_a, *dev_FK_d, *dev_FK_alpha;\r\n\t\tdouble inputs[_JDOF * _sampling_num], _mean_matrix[N], d[N], e[N], f[N],cost_jointlimit[N], cost_xerr[_sampling_num * _time_window], position_EE[3 * _sampling_num * _time_window], orientation_EE[3 * _sampling_num * _time_window], velocity_EE[3 * _sampling_num * _time_window], velocity_ori_EE[3 * _sampling_num * _time_window], FK_d[9], FK_a[9], FK_alpha[9];\r\n\t\tdouble tmp_goal[_JDOF * _sampling_num], jacobian[_JDOF * 6 * _sampling_num * _time_window], jacobian_transpose[_JDOF * 6 * _sampling_num * _time_window], manipulability[_sampling_num * _time_window], prev_position_EE[3], prev_orientation_EE[3], prev_x_cost;\r\n\t\tdouble _dt_cuda2[1], tmp_find_goal;\r\n\t\tdouble *dev_dt_cuda2, *dev_found_sol;\r\n\t\tdouble found_goal_list[_sampling_num];\r\n\t\t\r\n\t\tint found_goal;\r\n\t\tint *dev_found_goal;\r\n\t\t// double _random_matrix[_sampling_num][_JDOF][_time_window], _mean_matrix[_sampling_num][_JDOF][_time_window];\r\n\r\n\t\tifstream weight0;\r\n\t\tostringstream filename_NN[6];\r\n\t\t// int numBlocks, numBlocks2;\r\n\r\n\t\tvoid cpu_memory_save();\r\n\t\tvoid initialize();\r\n\t\tvoid cuda_memory_save();\r\n\t\tvoid generate_random();\r\n\t\tvoid load_weight();\r\n};\r\n"
        }
    ]
}