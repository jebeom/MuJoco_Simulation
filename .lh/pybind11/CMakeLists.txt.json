{
    "sourceFile": "pybind11/CMakeLists.txt",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 11,
            "patches": [
                {
                    "date": 1691477339611,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1691477371616,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -104,12 +104,12 @@\n cmake_dependent_option(\n   USE_PYTHON_INCLUDE_DIR\n   \"Install pybind11 headers in Python include directory instead of default installation prefix\"\n   OFF \"PYBIND11_INSTALL\" OFF)\n-\n+  message(STATUS \"adssadasdadadsads\")\n cmake_dependent_option(PYBIND11_FINDPYTHON \"Force new FindPython\" OFF\n                        \"NOT CMAKE_VERSION VERSION_LESS 3.12\" OFF)\n-                       message(STATUS \"adssadasdadadsads\")\n+                       \n # NB: when adding a header don't forget to also add it to setup.py\n set(PYBIND11_HEADERS\n     include/pybind11/detail/class.h\n     include/pybind11/detail/common.h\n"
                },
                {
                    "date": 1691477390054,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -104,9 +104,9 @@\n cmake_dependent_option(\n   USE_PYTHON_INCLUDE_DIR\n   \"Install pybind11 headers in Python include directory instead of default installation prefix\"\n   OFF \"PYBIND11_INSTALL\" OFF)\n-  message(STATUS \"adssadasdadadsads\")\n+  \n cmake_dependent_option(PYBIND11_FINDPYTHON \"Force new FindPython\" OFF\n                        \"NOT CMAKE_VERSION VERSION_LESS 3.12\" OFF)\n                        \n # NB: when adding a header don't forget to also add it to setup.py\n@@ -158,9 +158,9 @@\n   if(_pybind11_disk_only)\n     message(AUTHOR_WARNING \"PYBIND11_HEADERS is missing files:\" ${_pybind11_disk_only})\n   endif()\n endif()\n-\n+message(STATUS \"adssadasdadadsads\")\n # CMake 3.12 added list(TRANSFORM <list> PREPEND\n # But we can't use it yet\n string(REPLACE \"include/\" \"${CMAKE_CURRENT_SOURCE_DIR}/include/\" PYBIND11_HEADERS\n                \"${PYBIND11_HEADERS}\")\n"
                },
                {
                    "date": 1691477397627,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -158,9 +158,9 @@\n   if(_pybind11_disk_only)\n     message(AUTHOR_WARNING \"PYBIND11_HEADERS is missing files:\" ${_pybind11_disk_only})\n   endif()\n endif()\n-message(STATUS \"adssadasdadadsads\")\n+\n # CMake 3.12 added list(TRANSFORM <list> PREPEND\n # But we can't use it yet\n string(REPLACE \"include/\" \"${CMAKE_CURRENT_SOURCE_DIR}/include/\" PYBIND11_HEADERS\n                \"${PYBIND11_HEADERS}\")\n@@ -175,9 +175,9 @@\n   set(PYBIND11_INCLUDE_DIR\n       \"${pybind11_INCLUDE_DIR}\"\n       CACHE INTERNAL \"\")\n endif()\n-\n+message(STATUS \"adssadasdadadsads\")\n # Note: when creating targets, you cannot use if statements at configure time -\n # you need generator expressions, because those will be placed in the target file.\n # You can also place ifs *in* the Config.in, but not here.\n \n"
                },
                {
                    "date": 1691477403520,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -175,9 +175,9 @@\n   set(PYBIND11_INCLUDE_DIR\n       \"${pybind11_INCLUDE_DIR}\"\n       CACHE INTERNAL \"\")\n endif()\n-message(STATUS \"adssadasdadadsads\")\n+\n # Note: when creating targets, you cannot use if statements at configure time -\n # you need generator expressions, because those will be placed in the target file.\n # You can also place ifs *in* the Config.in, but not here.\n \n@@ -203,9 +203,9 @@\n else()\n   # It is invalid to install a target twice, too.\n   set(PYBIND11_INSTALL OFF)\n endif()\n-\n+message(STATUS \"adssadasdadadsads\")\n include(\"${CMAKE_CURRENT_SOURCE_DIR}/tools/pybind11Common.cmake\")\n # https://github.com/jtojnar/cmake-snips/#concatenating-paths-when-building-pkg-config-files\n # TODO: cmake 3.20 adds the cmake_path() function, which obsoletes this snippet\n include(\"${CMAKE_CURRENT_SOURCE_DIR}/tools/JoinPaths.cmake\")\n"
                },
                {
                    "date": 1691477409965,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -203,14 +203,14 @@\n else()\n   # It is invalid to install a target twice, too.\n   set(PYBIND11_INSTALL OFF)\n endif()\n-message(STATUS \"adssadasdadadsads\")\n+\n include(\"${CMAKE_CURRENT_SOURCE_DIR}/tools/pybind11Common.cmake\")\n # https://github.com/jtojnar/cmake-snips/#concatenating-paths-when-building-pkg-config-files\n # TODO: cmake 3.20 adds the cmake_path() function, which obsoletes this snippet\n include(\"${CMAKE_CURRENT_SOURCE_DIR}/tools/JoinPaths.cmake\")\n-\n+message(STATUS \"adssadasdadadsads\")\n # Relative directory setting\n if(USE_PYTHON_INCLUDE_DIR AND DEFINED Python_INCLUDE_DIRS)\n   file(RELATIVE_PATH CMAKE_INSTALL_INCLUDEDIR ${CMAKE_INSTALL_PREFIX} ${Python_INCLUDE_DIRS})\n elseif(USE_PYTHON_INCLUDE_DIR AND DEFINED PYTHON_INCLUDE_DIR)\n"
                },
                {
                    "date": 1691477418026,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -203,9 +203,9 @@\n else()\n   # It is invalid to install a target twice, too.\n   set(PYBIND11_INSTALL OFF)\n endif()\n-\n+message(STATUS \"adssadasdadadsads\")\n include(\"${CMAKE_CURRENT_SOURCE_DIR}/tools/pybind11Common.cmake\")\n # https://github.com/jtojnar/cmake-snips/#concatenating-paths-when-building-pkg-config-files\n # TODO: cmake 3.20 adds the cmake_path() function, which obsoletes this snippet\n include(\"${CMAKE_CURRENT_SOURCE_DIR}/tools/JoinPaths.cmake\")\n"
                },
                {
                    "date": 1691477471261,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -208,16 +208,16 @@\n include(\"${CMAKE_CURRENT_SOURCE_DIR}/tools/pybind11Common.cmake\")\n # https://github.com/jtojnar/cmake-snips/#concatenating-paths-when-building-pkg-config-files\n # TODO: cmake 3.20 adds the cmake_path() function, which obsoletes this snippet\n include(\"${CMAKE_CURRENT_SOURCE_DIR}/tools/JoinPaths.cmake\")\n-message(STATUS \"adssadasdadadsads\")\n+\n # Relative directory setting\n if(USE_PYTHON_INCLUDE_DIR AND DEFINED Python_INCLUDE_DIRS)\n   file(RELATIVE_PATH CMAKE_INSTALL_INCLUDEDIR ${CMAKE_INSTALL_PREFIX} ${Python_INCLUDE_DIRS})\n elseif(USE_PYTHON_INCLUDE_DIR AND DEFINED PYTHON_INCLUDE_DIR)\n   file(RELATIVE_PATH CMAKE_INSTALL_INCLUDEDIR ${CMAKE_INSTALL_PREFIX} ${PYTHON_INCLUDE_DIRS})\n endif()\n-\n+message(STATUS \"adssadasdadadsads\")\n if(PYBIND11_INSTALL)\n   install(DIRECTORY ${pybind11_INCLUDE_DIR}/pybind11 DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})\n   set(PYBIND11_CMAKECONFIG_INSTALL_DIR\n       \"${CMAKE_INSTALL_DATAROOTDIR}/cmake/${PROJECT_NAME}\"\n"
                },
                {
                    "date": 1691477483536,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -203,14 +203,14 @@\n else()\n   # It is invalid to install a target twice, too.\n   set(PYBIND11_INSTALL OFF)\n endif()\n-message(STATUS \"adssadasdadadsads\")\n+\n include(\"${CMAKE_CURRENT_SOURCE_DIR}/tools/pybind11Common.cmake\")\n # https://github.com/jtojnar/cmake-snips/#concatenating-paths-when-building-pkg-config-files\n # TODO: cmake 3.20 adds the cmake_path() function, which obsoletes this snippet\n include(\"${CMAKE_CURRENT_SOURCE_DIR}/tools/JoinPaths.cmake\")\n-\n+message(STATUS \"adssadasdadadsads\")\n # Relative directory setting\n if(USE_PYTHON_INCLUDE_DIR AND DEFINED Python_INCLUDE_DIRS)\n   file(RELATIVE_PATH CMAKE_INSTALL_INCLUDEDIR ${CMAKE_INSTALL_PREFIX} ${Python_INCLUDE_DIRS})\n elseif(USE_PYTHON_INCLUDE_DIR AND DEFINED PYTHON_INCLUDE_DIR)\n"
                },
                {
                    "date": 1691477490539,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -215,9 +215,8 @@\n   file(RELATIVE_PATH CMAKE_INSTALL_INCLUDEDIR ${CMAKE_INSTALL_PREFIX} ${Python_INCLUDE_DIRS})\n elseif(USE_PYTHON_INCLUDE_DIR AND DEFINED PYTHON_INCLUDE_DIR)\n   file(RELATIVE_PATH CMAKE_INSTALL_INCLUDEDIR ${CMAKE_INSTALL_PREFIX} ${PYTHON_INCLUDE_DIRS})\n endif()\n-message(STATUS \"adssadasdadadsads\")\n if(PYBIND11_INSTALL)\n   install(DIRECTORY ${pybind11_INCLUDE_DIR}/pybind11 DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})\n   set(PYBIND11_CMAKECONFIG_INSTALL_DIR\n       \"${CMAKE_INSTALL_DATAROOTDIR}/cmake/${PROJECT_NAME}\"\n"
                },
                {
                    "date": 1691477517457,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -208,9 +208,9 @@\n include(\"${CMAKE_CURRENT_SOURCE_DIR}/tools/pybind11Common.cmake\")\n # https://github.com/jtojnar/cmake-snips/#concatenating-paths-when-building-pkg-config-files\n # TODO: cmake 3.20 adds the cmake_path() function, which obsoletes this snippet\n include(\"${CMAKE_CURRENT_SOURCE_DIR}/tools/JoinPaths.cmake\")\n-message(STATUS \"adssadasdadadsads\")\n+\n # Relative directory setting\n if(USE_PYTHON_INCLUDE_DIR AND DEFINED Python_INCLUDE_DIRS)\n   file(RELATIVE_PATH CMAKE_INSTALL_INCLUDEDIR ${CMAKE_INSTALL_PREFIX} ${Python_INCLUDE_DIRS})\n elseif(USE_PYTHON_INCLUDE_DIR AND DEFINED PYTHON_INCLUDE_DIR)\n"
                },
                {
                    "date": 1691477583726,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -203,10 +203,11 @@\n else()\n   # It is invalid to install a target twice, too.\n   set(PYBIND11_INSTALL OFF)\n endif()\n-\n+message(STATUS \"adssadasdadadsads\")\n include(\"${CMAKE_CURRENT_SOURCE_DIR}/tools/pybind11Common.cmake\")\n+message(STATUS \"adssadasdadadsads\")\n # https://github.com/jtojnar/cmake-snips/#concatenating-paths-when-building-pkg-config-files\n # TODO: cmake 3.20 adds the cmake_path() function, which obsoletes this snippet\n include(\"${CMAKE_CURRENT_SOURCE_DIR}/tools/JoinPaths.cmake\")\n \n"
                }
            ],
            "date": 1691477339611,
            "name": "Commit-0",
            "content": "# CMakeLists.txt -- Build system for the pybind11 modules\n#\n# Copyright (c) 2015 Wenzel Jakob <wenzel@inf.ethz.ch>\n#\n# All rights reserved. Use of this source code is governed by a\n# BSD-style license that can be found in the LICENSE file.\n\ncmake_minimum_required(VERSION 3.4)\n\n# The `cmake_minimum_required(VERSION 3.4...3.22)` syntax does not work with\n# some versions of VS that have a patched CMake 3.11. This forces us to emulate\n# the behavior using the following workaround:\nif(${CMAKE_VERSION} VERSION_LESS 3.22)\n  cmake_policy(VERSION ${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION})\nelse()\n  cmake_policy(VERSION 3.22)\nendif()\n\n# Avoid infinite recursion if tests include this as a subdirectory\nif(DEFINED PYBIND11_MASTER_PROJECT)\n  return()\nendif()\n\n# Extract project version from source\nfile(STRINGS \"${CMAKE_CURRENT_SOURCE_DIR}/include/pybind11/detail/common.h\"\n     pybind11_version_defines REGEX \"#define PYBIND11_VERSION_(MAJOR|MINOR|PATCH) \")\n\nforeach(ver ${pybind11_version_defines})\n  if(ver MATCHES [[#define PYBIND11_VERSION_(MAJOR|MINOR|PATCH) +([^ ]+)$]])\n    set(PYBIND11_VERSION_${CMAKE_MATCH_1} \"${CMAKE_MATCH_2}\")\n  endif()\nendforeach()\n\nif(PYBIND11_VERSION_PATCH MATCHES [[\\.([a-zA-Z0-9]+)$]])\n  set(pybind11_VERSION_TYPE \"${CMAKE_MATCH_1}\")\nendif()\nstring(REGEX MATCH \"^[0-9]+\" PYBIND11_VERSION_PATCH \"${PYBIND11_VERSION_PATCH}\")\n\nproject(\n  pybind11\n  LANGUAGES CXX\n  VERSION \"${PYBIND11_VERSION_MAJOR}.${PYBIND11_VERSION_MINOR}.${PYBIND11_VERSION_PATCH}\")\n\n# Standard includes\ninclude(GNUInstallDirs)\ninclude(CMakePackageConfigHelpers)\ninclude(CMakeDependentOption)\n\nif(NOT pybind11_FIND_QUIETLY)\n  message(STATUS \"pybind11 v${pybind11_VERSION} ${pybind11_VERSION_TYPE}\")\nendif()\n\n# Check if pybind11 is being used directly or via add_subdirectory\nif(CMAKE_SOURCE_DIR STREQUAL PROJECT_SOURCE_DIR)\n  ### Warn if not an out-of-source builds\n  if(CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_CURRENT_BINARY_DIR)\n    set(lines\n        \"You are building in-place. If that is not what you intended to \"\n        \"do, you can clean the source directory with:\\n\"\n        \"rm -r CMakeCache.txt CMakeFiles/ cmake_uninstall.cmake pybind11Config.cmake \"\n        \"pybind11ConfigVersion.cmake tests/CMakeFiles/\\n\")\n    message(AUTHOR_WARNING ${lines})\n  endif()\n\n  set(PYBIND11_MASTER_PROJECT ON)\n\n  if(OSX AND CMAKE_VERSION VERSION_LESS 3.7)\n    # Bug in macOS CMake < 3.7 is unable to download catch\n    message(WARNING \"CMAKE 3.7+ needed on macOS to download catch, and newer HIGHLY recommended\")\n  elseif(WINDOWS AND CMAKE_VERSION VERSION_LESS 3.8)\n    # Only tested with 3.8+ in CI.\n    message(WARNING \"CMAKE 3.8+ tested on Windows, previous versions untested\")\n  endif()\n\n  message(STATUS \"CMake ${CMAKE_VERSION}\")\n\n  if(CMAKE_CXX_STANDARD)\n    set(CMAKE_CXX_EXTENSIONS OFF)\n    set(CMAKE_CXX_STANDARD_REQUIRED ON)\n  endif()\n\n  set(pybind11_system \"\")\n\n  set_property(GLOBAL PROPERTY USE_FOLDERS ON)\nelse()\n  set(PYBIND11_MASTER_PROJECT OFF)\n  set(pybind11_system SYSTEM)\nendif()\n\n# Options\noption(PYBIND11_INSTALL \"Install pybind11 header files?\" ${PYBIND11_MASTER_PROJECT})\noption(PYBIND11_TEST \"Build pybind11 test suite?\" ${PYBIND11_MASTER_PROJECT})\noption(PYBIND11_NOPYTHON \"Disable search for Python\" OFF)\noption(PYBIND11_SIMPLE_GIL_MANAGEMENT\n       \"Use simpler GIL management logic that does not support disassociation\" OFF)\nset(PYBIND11_INTERNALS_VERSION\n    \"\"\n    CACHE STRING \"Override the ABI version, may be used to enable the unstable ABI.\")\n\nif(PYBIND11_SIMPLE_GIL_MANAGEMENT)\n  add_compile_definitions(PYBIND11_SIMPLE_GIL_MANAGEMENT)\nendif()\n\ncmake_dependent_option(\n  USE_PYTHON_INCLUDE_DIR\n  \"Install pybind11 headers in Python include directory instead of default installation prefix\"\n  OFF \"PYBIND11_INSTALL\" OFF)\n\ncmake_dependent_option(PYBIND11_FINDPYTHON \"Force new FindPython\" OFF\n                       \"NOT CMAKE_VERSION VERSION_LESS 3.12\" OFF)\n                       message(STATUS \"adssadasdadadsads\")\n# NB: when adding a header don't forget to also add it to setup.py\nset(PYBIND11_HEADERS\n    include/pybind11/detail/class.h\n    include/pybind11/detail/common.h\n    include/pybind11/detail/descr.h\n    include/pybind11/detail/init.h\n    include/pybind11/detail/internals.h\n    include/pybind11/detail/type_caster_base.h\n    include/pybind11/detail/typeid.h\n    include/pybind11/attr.h\n    include/pybind11/buffer_info.h\n    include/pybind11/cast.h\n    include/pybind11/chrono.h\n    include/pybind11/common.h\n    include/pybind11/complex.h\n    include/pybind11/options.h\n    include/pybind11/eigen.h\n    include/pybind11/eigen/matrix.h\n    include/pybind11/eigen/tensor.h\n    include/pybind11/embed.h\n    include/pybind11/eval.h\n    include/pybind11/gil.h\n    include/pybind11/iostream.h\n    include/pybind11/functional.h\n    include/pybind11/numpy.h\n    include/pybind11/operators.h\n    include/pybind11/pybind11.h\n    include/pybind11/pytypes.h\n    include/pybind11/stl.h\n    include/pybind11/stl_bind.h\n    include/pybind11/stl/filesystem.h)\n\n# Compare with grep and warn if mismatched\nif(PYBIND11_MASTER_PROJECT AND NOT CMAKE_VERSION VERSION_LESS 3.12)\n  file(\n    GLOB_RECURSE _pybind11_header_check\n    LIST_DIRECTORIES false\n    RELATIVE \"${CMAKE_CURRENT_SOURCE_DIR}\"\n    CONFIGURE_DEPENDS \"include/pybind11/*.h\")\n  set(_pybind11_here_only ${PYBIND11_HEADERS})\n  set(_pybind11_disk_only ${_pybind11_header_check})\n  list(REMOVE_ITEM _pybind11_here_only ${_pybind11_header_check})\n  list(REMOVE_ITEM _pybind11_disk_only ${PYBIND11_HEADERS})\n  if(_pybind11_here_only)\n    message(AUTHOR_WARNING \"PYBIND11_HEADERS has extra files:\" ${_pybind11_here_only})\n  endif()\n  if(_pybind11_disk_only)\n    message(AUTHOR_WARNING \"PYBIND11_HEADERS is missing files:\" ${_pybind11_disk_only})\n  endif()\nendif()\n\n# CMake 3.12 added list(TRANSFORM <list> PREPEND\n# But we can't use it yet\nstring(REPLACE \"include/\" \"${CMAKE_CURRENT_SOURCE_DIR}/include/\" PYBIND11_HEADERS\n               \"${PYBIND11_HEADERS}\")\n\n# Cache variable so this can be used in parent projects\nset(pybind11_INCLUDE_DIR\n    \"${CMAKE_CURRENT_LIST_DIR}/include\"\n    CACHE INTERNAL \"Directory where pybind11 headers are located\")\n\n# Backward compatible variable for add_subdirectory mode\nif(NOT PYBIND11_MASTER_PROJECT)\n  set(PYBIND11_INCLUDE_DIR\n      \"${pybind11_INCLUDE_DIR}\"\n      CACHE INTERNAL \"\")\nendif()\n\n# Note: when creating targets, you cannot use if statements at configure time -\n# you need generator expressions, because those will be placed in the target file.\n# You can also place ifs *in* the Config.in, but not here.\n\n# This section builds targets, but does *not* touch Python\n# Non-IMPORT targets cannot be defined twice\nif(NOT TARGET pybind11_headers)\n  # Build the headers-only target (no Python included):\n  # (long name used here to keep this from clashing in subdirectory mode)\n  add_library(pybind11_headers INTERFACE)\n  add_library(pybind11::pybind11_headers ALIAS pybind11_headers) # to match exported target\n  add_library(pybind11::headers ALIAS pybind11_headers) # easier to use/remember\n\n  target_include_directories(\n    pybind11_headers ${pybind11_system} INTERFACE $<BUILD_INTERFACE:${pybind11_INCLUDE_DIR}>\n                                                  $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>)\n\n  target_compile_features(pybind11_headers INTERFACE cxx_inheriting_constructors cxx_user_literals\n                                                     cxx_right_angle_brackets)\n  if(NOT \"${PYBIND11_INTERNALS_VERSION}\" STREQUAL \"\")\n    target_compile_definitions(\n      pybind11_headers INTERFACE \"PYBIND11_INTERNALS_VERSION=${PYBIND11_INTERNALS_VERSION}\")\n  endif()\nelse()\n  # It is invalid to install a target twice, too.\n  set(PYBIND11_INSTALL OFF)\nendif()\n\ninclude(\"${CMAKE_CURRENT_SOURCE_DIR}/tools/pybind11Common.cmake\")\n# https://github.com/jtojnar/cmake-snips/#concatenating-paths-when-building-pkg-config-files\n# TODO: cmake 3.20 adds the cmake_path() function, which obsoletes this snippet\ninclude(\"${CMAKE_CURRENT_SOURCE_DIR}/tools/JoinPaths.cmake\")\n\n# Relative directory setting\nif(USE_PYTHON_INCLUDE_DIR AND DEFINED Python_INCLUDE_DIRS)\n  file(RELATIVE_PATH CMAKE_INSTALL_INCLUDEDIR ${CMAKE_INSTALL_PREFIX} ${Python_INCLUDE_DIRS})\nelseif(USE_PYTHON_INCLUDE_DIR AND DEFINED PYTHON_INCLUDE_DIR)\n  file(RELATIVE_PATH CMAKE_INSTALL_INCLUDEDIR ${CMAKE_INSTALL_PREFIX} ${PYTHON_INCLUDE_DIRS})\nendif()\n\nif(PYBIND11_INSTALL)\n  install(DIRECTORY ${pybind11_INCLUDE_DIR}/pybind11 DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})\n  set(PYBIND11_CMAKECONFIG_INSTALL_DIR\n      \"${CMAKE_INSTALL_DATAROOTDIR}/cmake/${PROJECT_NAME}\"\n      CACHE STRING \"install path for pybind11Config.cmake\")\n\n  if(IS_ABSOLUTE \"${CMAKE_INSTALL_INCLUDEDIR}\")\n    set(pybind11_INCLUDEDIR \"${CMAKE_INSTALL_FULL_INCLUDEDIR}\")\n  else()\n    set(pybind11_INCLUDEDIR \"\\$\\{PACKAGE_PREFIX_DIR\\}/${CMAKE_INSTALL_INCLUDEDIR}\")\n  endif()\n\n  configure_package_config_file(\n    tools/${PROJECT_NAME}Config.cmake.in \"${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Config.cmake\"\n    INSTALL_DESTINATION ${PYBIND11_CMAKECONFIG_INSTALL_DIR})\n\n  if(CMAKE_VERSION VERSION_LESS 3.14)\n    # Remove CMAKE_SIZEOF_VOID_P from ConfigVersion.cmake since the library does\n    # not depend on architecture specific settings or libraries.\n    set(_PYBIND11_CMAKE_SIZEOF_VOID_P ${CMAKE_SIZEOF_VOID_P})\n    unset(CMAKE_SIZEOF_VOID_P)\n\n    write_basic_package_version_file(\n      ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake\n      VERSION ${PROJECT_VERSION}\n      COMPATIBILITY AnyNewerVersion)\n\n    set(CMAKE_SIZEOF_VOID_P ${_PYBIND11_CMAKE_SIZEOF_VOID_P})\n  else()\n    # CMake 3.14+ natively supports header-only libraries\n    write_basic_package_version_file(\n      ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake\n      VERSION ${PROJECT_VERSION}\n      COMPATIBILITY AnyNewerVersion ARCH_INDEPENDENT)\n  endif()\n\n  install(\n    FILES ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Config.cmake\n          ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake\n          tools/FindPythonLibsNew.cmake\n          tools/pybind11Common.cmake\n          tools/pybind11Tools.cmake\n          tools/pybind11NewTools.cmake\n    DESTINATION ${PYBIND11_CMAKECONFIG_INSTALL_DIR})\n\n  if(NOT PYBIND11_EXPORT_NAME)\n    set(PYBIND11_EXPORT_NAME \"${PROJECT_NAME}Targets\")\n  endif()\n\n  install(TARGETS pybind11_headers EXPORT \"${PYBIND11_EXPORT_NAME}\")\n\n  install(\n    EXPORT \"${PYBIND11_EXPORT_NAME}\"\n    NAMESPACE \"pybind11::\"\n    DESTINATION ${PYBIND11_CMAKECONFIG_INSTALL_DIR})\n\n  # pkg-config support\n  if(NOT prefix_for_pc_file)\n    set(prefix_for_pc_file \"${CMAKE_INSTALL_PREFIX}\")\n  endif()\n  join_paths(includedir_for_pc_file \"\\${prefix}\" \"${CMAKE_INSTALL_INCLUDEDIR}\")\n  configure_file(\"${CMAKE_CURRENT_SOURCE_DIR}/tools/pybind11.pc.in\"\n                 \"${CMAKE_CURRENT_BINARY_DIR}/pybind11.pc\" @ONLY)\n  install(FILES \"${CMAKE_CURRENT_BINARY_DIR}/pybind11.pc\"\n          DESTINATION \"${CMAKE_INSTALL_DATAROOTDIR}/pkgconfig/\")\n\n  # Uninstall target\n  if(PYBIND11_MASTER_PROJECT)\n    configure_file(\"${CMAKE_CURRENT_SOURCE_DIR}/tools/cmake_uninstall.cmake.in\"\n                   \"${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake\" IMMEDIATE @ONLY)\n\n    add_custom_target(uninstall COMMAND ${CMAKE_COMMAND} -P\n                                        ${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake)\n  endif()\nendif()\n\n# BUILD_TESTING takes priority, but only if this is the master project\nif(PYBIND11_MASTER_PROJECT AND DEFINED BUILD_TESTING)\n  if(BUILD_TESTING)\n    if(_pybind11_nopython)\n      message(FATAL_ERROR \"Cannot activate tests in NOPYTHON mode\")\n    else()\n      add_subdirectory(tests)\n    endif()\n  endif()\nelse()\n  if(PYBIND11_TEST)\n    if(_pybind11_nopython)\n      message(FATAL_ERROR \"Cannot activate tests in NOPYTHON mode\")\n    else()\n      add_subdirectory(tests)\n    endif()\n  endif()\nendif()\n\n# Better symmetry with find_package(pybind11 CONFIG) mode.\nif(NOT PYBIND11_MASTER_PROJECT)\n  set(pybind11_FOUND\n      TRUE\n      CACHE INTERNAL \"True if pybind11 and all required components found on the system\")\nendif()\n"
        }
    ]
}