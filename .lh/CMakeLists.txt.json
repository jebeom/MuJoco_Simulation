{
    "sourceFile": "CMakeLists.txt",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 218,
            "patches": [
                {
                    "date": 1691458998055,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1691459020429,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -108,9 +108,10 @@\n )\r\n set_property(TARGET mppi \r\n              PROPERTY CUDA_SEPARABLE_COMPILATION ON)\r\n \r\n-pybind11_add_module(controller simulate/controller.cpp)\r\n+pybind11_add_module(controller src/controller.cpp)\r\n+\r\n target_link_libraries(controller\r\n PUBLIC\r\n     ${catkin_LIBRARIES}\r\n     Eigen3::Eigen\r\n"
                },
                {
                    "date": 1691459107490,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -114,19 +114,19 @@\n target_link_libraries(controller\r\n PUBLIC\r\n     ${catkin_LIBRARIES}\r\n     Eigen3::Eigen\r\n-    franka_emika_lib_py\r\n-    -lrbdl\r\n-      -lrbdl_urdfreader\r\n-      -lpthread\r\n-      OpenGL::OpenGL\r\n-    OpenGL::EGL\r\n+    mppi\r\n+    # -lrbdl\r\n+    #   -lrbdl_urdfreader\r\n+    #   -lpthread\r\n+    #   OpenGL::OpenGL\r\n+    # OpenGL::EGL\r\n     -lpython3.8\r\n-    ${COM_LIB} \r\n-    ${X11_LIBRARIES} \r\n-    GLEW::GLEW\r\n+    # ${COM_LIB} \r\n+    # ${X11_LIBRARIES} \r\n+    # GLEW::GLEW\r\n     pybind11::pybind11\r\n-    ${OMPL_LIBRARIES}\r\n-    ${GLEW_LIBRARIES}\r\n-\t  ${OPENGL_LIBRARIES}\r\n+    # ${OMPL_LIBRARIES}\r\n+    # ${GLEW_LIBRARIES}\r\n+\t#   ${OPENGL_LIBRARIES}\r\n )\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691467359363,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,8 +28,10 @@\n include_directories(${CMAKE_CURRENT_SOURCE_DIR}/include\r\n ${EIGEN3_INCLUDE_DIRS}\r\n )\r\n \r\n+# include_directories(\"\")\r\n+\r\n #link_directories(${CMAKE_CURRENT_SOURCE_DIR}/lib/)\r\n link_directories(\r\n     ${CMAKE_CURRENT_SOURCE_DIR}/lib/\r\n )\r\n"
                },
                {
                    "date": 1691467398582,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,8 +33,9 @@\n \r\n #link_directories(${CMAKE_CURRENT_SOURCE_DIR}/lib/)\r\n link_directories(\r\n     ${CMAKE_CURRENT_SOURCE_DIR}/lib/\r\n+    /usr/include/python3.8\r\n )\r\n \r\n #$ENV{EIGEN3_INCLUDE_DIR}\r\n \r\n"
                },
                {
                    "date": 1691467431120,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,8 +34,9 @@\n #link_directories(${CMAKE_CURRENT_SOURCE_DIR}/lib/)\r\n link_directories(\r\n     ${CMAKE_CURRENT_SOURCE_DIR}/lib/\r\n     /usr/include/python3.8\r\n+    /pybind11\r\n )\r\n \r\n #$ENV{EIGEN3_INCLUDE_DIR}\r\n \r\n"
                },
                {
                    "date": 1691467451392,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,11 @@\n #fing eigen library\r\n find_package (Eigen3 3.3 REQUIRED)\r\n find_package(OpenGL REQUIRED)\r\n find_package(GLEW REQUIRED)\r\n+find_package(pybind11 REQUIRED)\r\n \r\n+\r\n message(STATUS \"Eigen3 : \" ${EIGEN3_INCLUDE_DIR}/Eigen)\r\n message(STATUS \"current : \" ${CMAKE_CURRENT_SOURCE_DIR})\r\n \r\n \r\n"
                },
                {
                    "date": 1691467473993,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,9 +94,9 @@\n \r\n # set_target_properties( COM_LIB\r\n #                        PROPERTIES CUDA_SEPARABLE_COMPILATION ON)\r\n \r\n-add_executable(mppi ${COM_SRC})\r\n+# add_executable(mppi ${COM_SRC})\r\n #add_executable(${PROJECT_NAME} simulate/main.cc)\r\n target_link_libraries(mppi \r\n \t${COM_LIB} \r\n \t${CMAKE_DL_LIBS} \r\n"
                },
                {
                    "date": 1691467926794,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,9 @@\n #link_directories(${CMAKE_CURRENT_SOURCE_DIR}/lib/)\r\n link_directories(\r\n     ${CMAKE_CURRENT_SOURCE_DIR}/lib/\r\n     /usr/include/python3.8\r\n-    /pybind11\r\n+    # /pybind11\r\n )\r\n \r\n #$ENV{EIGEN3_INCLUDE_DIR}\r\n \r\n"
                },
                {
                    "date": 1691467998157,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -120,9 +120,9 @@\n target_link_libraries(controller\r\n PUBLIC\r\n     ${catkin_LIBRARIES}\r\n     Eigen3::Eigen\r\n-    mppi\r\n+    # mppi\r\n     # -lrbdl\r\n     #   -lrbdl_urdfreader\r\n     #   -lpthread\r\n     #   OpenGL::OpenGL\r\n"
                },
                {
                    "date": 1691468041547,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,8 +94,12 @@\n \r\n # set_target_properties( COM_LIB\r\n #                        PROPERTIES CUDA_SEPARABLE_COMPILATION ON)\r\n \r\n+add_library(mppi_\r\n+    $(COM_SRC)\r\n+)\r\n+\r\n # add_executable(mppi ${COM_SRC})\r\n #add_executable(${PROJECT_NAME} simulate/main.cc)\r\n target_link_libraries(mppi \r\n \t${COM_LIB} \r\n"
                },
                {
                    "date": 1691468049595,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -124,8 +124,9 @@\n target_link_libraries(controller\r\n PUBLIC\r\n     ${catkin_LIBRARIES}\r\n     Eigen3::Eigen\r\n+    mppi_\r\n     # mppi\r\n     # -lrbdl\r\n     #   -lrbdl_urdfreader\r\n     #   -lpthread\r\n"
                },
                {
                    "date": 1691468079251,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,15 +126,15 @@\n     ${catkin_LIBRARIES}\r\n     Eigen3::Eigen\r\n     mppi_\r\n     # mppi\r\n-    # -lrbdl\r\n-    #   -lrbdl_urdfreader\r\n-    #   -lpthread\r\n-    #   OpenGL::OpenGL\r\n-    # OpenGL::EGL\r\n+    -lrbdl\r\n+      -lrbdl_urdfreader\r\n+      -lpthread\r\n+      OpenGL::OpenGL\r\n+    OpenGL::EGL\r\n     -lpython3.8\r\n-    # ${COM_LIB} \r\n+    ${COM_LIB} \r\n     # ${X11_LIBRARIES} \r\n     # GLEW::GLEW\r\n     pybind11::pybind11\r\n     # ${OMPL_LIBRARIES}\r\n"
                },
                {
                    "date": 1691468085071,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -134,10 +134,10 @@\n     OpenGL::EGL\r\n     -lpython3.8\r\n     ${COM_LIB} \r\n     # ${X11_LIBRARIES} \r\n-    # GLEW::GLEW\r\n+    GLEW::GLEW\r\n     pybind11::pybind11\r\n     # ${OMPL_LIBRARIES}\r\n-    # ${GLEW_LIBRARIES}\r\n-\t#   ${OPENGL_LIBRARIES}\r\n+    ${GLEW_LIBRARIES}\r\n+\t  ${OPENGL_LIBRARIES}\r\n )\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691468092054,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -139,5 +139,6 @@\n     pybind11::pybind11\r\n     # ${OMPL_LIBRARIES}\r\n     ${GLEW_LIBRARIES}\r\n \t  ${OPENGL_LIBRARIES}\r\n+      -lpython3.8\r\n )\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691468098520,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -133,12 +133,12 @@\n       OpenGL::OpenGL\r\n     OpenGL::EGL\r\n     -lpython3.8\r\n     ${COM_LIB} \r\n-    # ${X11_LIBRARIES} \r\n+    ${X11_LIBRARIES} \r\n     GLEW::GLEW\r\n     pybind11::pybind11\r\n     # ${OMPL_LIBRARIES}\r\n     ${GLEW_LIBRARIES}\r\n-\t  ${OPENGL_LIBRARIES}\r\n-      -lpython3.8\r\n+\t${OPENGL_LIBRARIES}\r\n+    -lpython3.8\r\n )\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691468131861,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -115,8 +115,9 @@\n     -lcurand\r\n \t${GLEW_LIBRARIES}\r\n \t${OPENGL_LIBRARIES}\r\n )\r\n+\r\n set_property(TARGET mppi \r\n              PROPERTY CUDA_SEPARABLE_COMPILATION ON)\r\n \r\n pybind11_add_module(controller src/controller.cpp)\r\n@@ -140,5 +141,8 @@\n     # ${OMPL_LIBRARIES}\r\n     ${GLEW_LIBRARIES}\r\n \t${OPENGL_LIBRARIES}\r\n     -lpython3.8\r\n-)\n\\ No newline at end of file\n+)\r\n+\r\n+set_property(TARGET controller \r\n+             PROPERTY CUDA_SEPARABLE_COMPILATION ON)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691468142725,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,9 +98,9 @@\n add_library(mppi_\r\n     $(COM_SRC)\r\n )\r\n \r\n-# add_executable(mppi ${COM_SRC})\r\n+add_executable(mppi ${COM_SRC})\r\n #add_executable(${PROJECT_NAME} simulate/main.cc)\r\n target_link_libraries(mppi \r\n \t${COM_LIB} \r\n \t${CMAKE_DL_LIBS} \r\n"
                },
                {
                    "date": 1691468157823,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -95,9 +95,9 @@\n # set_target_properties( COM_LIB\r\n #                        PROPERTIES CUDA_SEPARABLE_COMPILATION ON)\r\n \r\n add_library(mppi_\r\n-    $(COM_SRC)\r\n+    ${COM_SRC}\r\n )\r\n \r\n add_executable(mppi ${COM_SRC})\r\n #add_executable(${PROJECT_NAME} simulate/main.cc)\r\n"
                },
                {
                    "date": 1691468319771,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,13 +55,13 @@\n     /usr/local/cuda/include\r\n )\r\n \r\n set(COM_SRC\r\n-    src/main.cc\r\n-    ${MUJOCO_HOME}/simulate/glfw_dispatch.cc\r\n-    ${MUJOCO_HOME}/simulate/glfw_adapter.cc\r\n-    ${MUJOCO_HOME}/simulate/simulate.cc\r\n-    ${MUJOCO_HOME}/simulate/platform_ui_adapter.cc    \r\n+    # src/main.cc\r\n+    # ${MUJOCO_HOME}/simulate/glfw_dispatch.cc\r\n+    # ${MUJOCO_HOME}/simulate/glfw_adapter.cc\r\n+    # ${MUJOCO_HOME}/simulate/simulate.cc\r\n+    # ${MUJOCO_HOME}/simulate/platform_ui_adapter.cc    \r\n     \r\n         \r\n         src/controller.cpp\r\n         src/cuda.cu\r\n"
                },
                {
                    "date": 1691468817737,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,11 +59,9 @@\n     # src/main.cc\r\n     # ${MUJOCO_HOME}/simulate/glfw_dispatch.cc\r\n     # ${MUJOCO_HOME}/simulate/glfw_adapter.cc\r\n     # ${MUJOCO_HOME}/simulate/simulate.cc\r\n-    # ${MUJOCO_HOME}/simulate/platform_ui_adapter.cc    \r\n-    \r\n-        \r\n+    # ${MUJOCO_HOME}/simulate/platform_ui_adapter.cc        \r\n         src/controller.cpp\r\n         src/cuda.cu\r\n         src/robotmodel.cpp\r\n         src/trajectory.cpp\r\n"
                },
                {
                    "date": 1691468835171,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -138,9 +138,8 @@\n     pybind11::pybind11\r\n     # ${OMPL_LIBRARIES}\r\n     ${GLEW_LIBRARIES}\r\n \t${OPENGL_LIBRARIES}\r\n-    -lpython3.8\r\n )\r\n \r\n set_property(TARGET controller \r\n              PROPERTY CUDA_SEPARABLE_COMPILATION ON)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691468883435,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,10 +2,12 @@\n project(simulation)\r\n \r\n \r\n set(CMAKE_CXX_STANDARD 17)\r\n+add_compile_options(-fpic -std=c++11 -O)\r\n+set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -fpic\")\r\n+set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fpic\")\r\n \r\n-\r\n set(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_CXX_FLAGS} -Wl,-no-as-needed\")\r\n #fing eigen library\r\n find_package (Eigen3 3.3 REQUIRED)\r\n find_package(OpenGL REQUIRED)\r\n"
                },
                {
                    "date": 1691468895512,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n add_compile_options(-fpic -std=c++11 -O)\r\n set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -fpic\")\r\n set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fpic\")\r\n \r\n-set(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_CXX_FLAGS} -Wl,-no-as-needed\")\r\n+# set(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_CXX_FLAGS} -Wl,-no-as-needed\")\r\n #fing eigen library\r\n find_package (Eigen3 3.3 REQUIRED)\r\n find_package(OpenGL REQUIRED)\r\n find_package(GLEW REQUIRED)\r\n"
                },
                {
                    "date": 1691468950771,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -133,9 +133,9 @@\n       -lpthread\r\n       OpenGL::OpenGL\r\n     OpenGL::EGL\r\n     -lpython3.8\r\n-    ${COM_LIB} \r\n+    # ${COM_LIB} \r\n     ${X11_LIBRARIES} \r\n     GLEW::GLEW\r\n     pybind11::pybind11\r\n     # ${OMPL_LIBRARIES}\r\n"
                },
                {
                    "date": 1691469301069,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n \r\n #link_directories(${CMAKE_CURRENT_SOURCE_DIR}/lib/)\r\n link_directories(\r\n     ${CMAKE_CURRENT_SOURCE_DIR}/lib/\r\n-    /usr/include/python3.8\r\n+    # /usr/include/python3.8\r\n     # /pybind11\r\n )\r\n \r\n #$ENV{EIGEN3_INCLUDE_DIR}\r\n"
                },
                {
                    "date": 1691469413380,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,8 +30,9 @@\n enable_language(CUDA)\r\n \r\n include_directories(${CMAKE_CURRENT_SOURCE_DIR}/include\r\n ${EIGEN3_INCLUDE_DIRS}\r\n+/usr/include/python3.8\r\n )\r\n \r\n # include_directories(\"\")\r\n \r\n@@ -98,28 +99,28 @@\n add_library(mppi_\r\n     ${COM_SRC}\r\n )\r\n \r\n-add_executable(mppi ${COM_SRC})\r\n-#add_executable(${PROJECT_NAME} simulate/main.cc)\r\n-target_link_libraries(mppi \r\n-\t${COM_LIB} \r\n-\t${CMAKE_DL_LIBS} \r\n-\t${X11_LIBRARIES}\r\n-\t-lrbdl\r\n-    \t-lrbdl_urdfreader\r\n-    \t-lpthread\r\n-    \tOpenGL::OpenGL\r\n-\tOpenGL::EGL\r\n-\tGLEW::GLEW\r\n-    -lcudart\r\n-    -lcurand\r\n-\t${GLEW_LIBRARIES}\r\n-\t${OPENGL_LIBRARIES}\r\n-)\r\n+# add_executable(mppi ${COM_SRC})\r\n+# #add_executable(${PROJECT_NAME} simulate/main.cc)\r\n+# target_link_libraries(mppi \r\n+# \t${COM_LIB} \r\n+# \t${CMAKE_DL_LIBS} \r\n+# \t${X11_LIBRARIES}\r\n+# \t-lrbdl\r\n+#     \t-lrbdl_urdfreader\r\n+#     \t-lpthread\r\n+#     \tOpenGL::OpenGL\r\n+# \tOpenGL::EGL\r\n+# \tGLEW::GLEW\r\n+#     -lcudart\r\n+#     -lcurand\r\n+# \t${GLEW_LIBRARIES}\r\n+# \t${OPENGL_LIBRARIES}\r\n+# )\r\n \r\n-set_property(TARGET mppi \r\n-             PROPERTY CUDA_SEPARABLE_COMPILATION ON)\r\n+# set_property(TARGET mppi \r\n+#              PROPERTY CUDA_SEPARABLE_COMPILATION ON)\r\n \r\n pybind11_add_module(controller src/controller.cpp)\r\n \r\n target_link_libraries(controller\r\n"
                },
                {
                    "date": 1691469422278,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,15 +84,15 @@\n # )\r\n \r\n \r\n \r\n-set(COM_LIB \r\n-${MUJOCO_HOME}/lib/libmujoco.so\r\n-${MUJOCO_HOME}/lib/libmujoco.so.2.3.3\r\n-${MUJOCO_HOME}/bin/mujoco_plugin/libelasticity.so\r\n-${GLFW}\r\n--lqpOASES\r\n-)\r\n+# set(COM_LIB \r\n+# ${MUJOCO_HOME}/lib/libmujoco.so\r\n+# ${MUJOCO_HOME}/lib/libmujoco.so.2.3.3\r\n+# ${MUJOCO_HOME}/bin/mujoco_plugin/libelasticity.so\r\n+# ${GLFW}\r\n+# -lqpOASES\r\n+# )\r\n \r\n # set_target_properties( COM_LIB\r\n #                        PROPERTIES CUDA_SEPARABLE_COMPILATION ON)\r\n \r\n"
                },
                {
                    "date": 1691469437352,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,8 @@\n enable_language(CUDA)\r\n \r\n include_directories(${CMAKE_CURRENT_SOURCE_DIR}/include\r\n ${EIGEN3_INCLUDE_DIRS}\r\n-/usr/include/python3.8\r\n )\r\n \r\n # include_directories(\"\")\r\n \r\n@@ -55,8 +54,9 @@\n     /usr/local/lib\r\n     /usr/local/cuda-11.6\r\n     /usr/local/cuda\r\n     /usr/local/cuda/include\r\n+    /usr/include/python3.8\r\n )\r\n \r\n set(COM_SRC\r\n     # src/main.cc\r\n"
                },
                {
                    "date": 1691469450278,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,12 +43,24 @@\n )\r\n \r\n #$ENV{EIGEN3_INCLUDE_DIR}\r\n \r\n+# include_directories(\r\n+#     ${CMAKE_CURRENT_SOURCE_DIR}/include\r\n+#     ${CMAKE_CURRENT_SOURCE_DIR}/mujoco-2.3.3/include\r\n+#     ${CMAKE_CURRENT_SOURCE_DIR}/mujoco-2.3.3/simulate\r\n+#   $ENV{EIGEN3_INCLUDE_DIR}/Eigen/\r\n+#   ${GLEW_INCLUDE_DIRS}\r\n+#     /usr/local/include/rbdl\r\n+#     /usr/local/lib\r\n+#     /usr/local/cuda-11.6\r\n+#     /usr/local/cuda\r\n+#     /usr/local/cuda/include\r\n+#     /usr/include/python3.8\r\n+# )\r\n+\r\n include_directories(\r\n     ${CMAKE_CURRENT_SOURCE_DIR}/include\r\n-    ${CMAKE_CURRENT_SOURCE_DIR}/mujoco-2.3.3/include\r\n-    ${CMAKE_CURRENT_SOURCE_DIR}/mujoco-2.3.3/simulate\r\n   $ENV{EIGEN3_INCLUDE_DIR}/Eigen/\r\n   ${GLEW_INCLUDE_DIRS}\r\n     /usr/local/include/rbdl\r\n     /usr/local/lib\r\n"
                },
                {
                    "date": 1691469474633,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n \r\n \r\n set(CMAKE_CXX_STANDARD 17)\r\n add_compile_options(-fpic -std=c++11 -O)\r\n-set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -fpic\")\r\n+# set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -fpic\")\r\n set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fpic\")\r\n \r\n # set(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_CXX_FLAGS} -Wl,-no-as-needed\")\r\n #fing eigen library\r\n"
                },
                {
                    "date": 1691469497166,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n \r\n \r\n set(CMAKE_CXX_STANDARD 17)\r\n add_compile_options(-fpic -std=c++11 -O)\r\n-# set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -fpic\")\r\n+set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -fpic\")\r\n set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fpic\")\r\n \r\n # set(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_CXX_FLAGS} -Wl,-no-as-needed\")\r\n #fing eigen library\r\n"
                },
                {
                    "date": 1691469506810,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n cmake_minimum_required(VERSION 3.15)\r\n project(simulation)\r\n \r\n \r\n-set(CMAKE_CXX_STANDARD 17)\r\n+# set(CMAKE_CXX_STANDARD 17)\r\n add_compile_options(-fpic -std=c++11 -O)\r\n set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -fpic\")\r\n set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fpic\")\r\n \r\n"
                },
                {
                    "date": 1691469513702,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,14 @@\n cmake_minimum_required(VERSION 3.15)\r\n project(simulation)\r\n \r\n \r\n-# set(CMAKE_CXX_STANDARD 17)\r\n-add_compile_options(-fpic -std=c++11 -O)\r\n-set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -fpic\")\r\n-set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fpic\")\r\n+set(CMAKE_CXX_STANDARD 17)\r\n+# add_compile_options(-fpic -std=c++11 -O)\r\n+# set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -fpic\")\r\n+# set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fpic\")\r\n \r\n-# set(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_CXX_FLAGS} -Wl,-no-as-needed\")\r\n+set(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_CXX_FLAGS} -Wl,-no-as-needed\")\r\n #fing eigen library\r\n find_package (Eigen3 3.3 REQUIRED)\r\n find_package(OpenGL REQUIRED)\r\n find_package(GLEW REQUIRED)\r\n"
                },
                {
                    "date": 1691469637053,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,160 +1,126 @@\n-cmake_minimum_required(VERSION 3.15)\r\n-project(simulation)\r\n+cmake_minimum_required(VERSION 3.0.2)\r\n \r\n+project(franka_panda)\r\n \r\n-set(CMAKE_CXX_STANDARD 17)\r\n-# add_compile_options(-fpic -std=c++11 -O)\r\n-# set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -fpic\")\r\n-# set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fpic\")\r\n+add_compile_options(-fpic -std=c++11 -O)\r\n+set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -fpic\")\r\n+set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fpic\")\r\n \r\n-set(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_CXX_FLAGS} -Wl,-no-as-needed\")\r\n-#fing eigen library\r\n-find_package (Eigen3 3.3 REQUIRED)\r\n+# find_package(catkin REQUIRED COMPONENTS\r\n+#     #roscpp\r\n+#     std_msgs\r\n+#     tf\r\n+# )\r\n+\r\n+find_package(Eigen3 3.3 REQUIRED)\r\n find_package(OpenGL REQUIRED)\r\n find_package(GLEW REQUIRED)\r\n find_package(pybind11 REQUIRED)\r\n \r\n-\r\n-message(STATUS \"Eigen3 : \" ${EIGEN3_INCLUDE_DIR}/Eigen)\r\n-message(STATUS \"current : \" ${CMAKE_CURRENT_SOURCE_DIR})\r\n-\r\n-\r\n-add_definitions(-DMJSIMULATE_STATIC) # use static =,solve the \"error LNK2001/LNK2019\" in windows\r\n-\r\n-find_package (X11)\r\n-find_library(GLFW libglfw.so.3 HINTS ${CMAKE_SOURCE_DIR}/mujoco200/bin)\r\n-# set MUJOCO root\r\n-set(MUJOCO_HOME ${CMAKE_SOURCE_DIR}/mujoco-2.3.3/)\r\n-message(STATUS \"MUJOCO_HOME: \" ${MUJOCO_HOME})\r\n-\r\n-enable_language(CUDA)\r\n-\r\n-include_directories(${CMAKE_CURRENT_SOURCE_DIR}/include\r\n-${EIGEN3_INCLUDE_DIRS}\r\n+set(SRC_FILES\r\n+    src/controller.cpp\r\n+    src/robotmodel.cpp\r\n+    # src/trajectory.cpp\r\n+    # src/quadraticprogram.cpp\r\n )\r\n \r\n-# include_directories(\"\")\r\n-\r\n-#link_directories(${CMAKE_CURRENT_SOURCE_DIR}/lib/)\r\n-link_directories(\r\n-    ${CMAKE_CURRENT_SOURCE_DIR}/lib/\r\n-    # /usr/include/python3.8\r\n-    # /pybind11\r\n+set(MUJOCO_PATH\r\n+    # /home/kist-robot2/mujoco200\r\n+    /home/kist/KDH/Backup/franka_panda/mujoco200\r\n+    # /home/kist-robot/franka_panda/mujoco200\r\n )\r\n \r\n-#$ENV{EIGEN3_INCLUDE_DIR}\r\n+# set(OpenGL_GL_PREFERENCE LEGACY)\r\n \r\n-# include_directories(\r\n-#     ${CMAKE_CURRENT_SOURCE_DIR}/include\r\n-#     ${CMAKE_CURRENT_SOURCE_DIR}/mujoco-2.3.3/include\r\n-#     ${CMAKE_CURRENT_SOURCE_DIR}/mujoco-2.3.3/simulate\r\n-#   $ENV{EIGEN3_INCLUDE_DIR}/Eigen/\r\n-#   ${GLEW_INCLUDE_DIRS}\r\n-#     /usr/local/include/rbdl\r\n-#     /usr/local/lib\r\n-#     /usr/local/cuda-11.6\r\n-#     /usr/local/cuda\r\n-#     /usr/local/cuda/include\r\n-#     /usr/include/python3.8\r\n-# )\r\n+message(\"------------------------------------\")\r\n+message(\"Mujoco Path : \" ${MUJOCO_PATH})\r\n \r\n include_directories(\r\n     ${CMAKE_CURRENT_SOURCE_DIR}/include\r\n-  $ENV{EIGEN3_INCLUDE_DIR}/Eigen/\r\n-  ${GLEW_INCLUDE_DIRS}\r\n-    /usr/local/include/rbdl\r\n-    /usr/local/lib\r\n-    /usr/local/cuda-11.6\r\n-    /usr/local/cuda\r\n-    /usr/local/cuda/include\r\n+    ${EIGEN3_INCLUDE_DIRS}\r\n+    ${GLEW_INCLUDE_DIRS}\r\n+    ${MUJOCO_PATH}/include\r\n+    # /usr/local/include/qpOASES\r\n+    ${OMPL_INCLUDE_DIRS}\r\n+    /usr/include/python3.8  # for pybind11\r\n+)\r\n+\r\n+link_directories(\r\n+    ${MUJOCO_PATH}/bin\r\n     /usr/include/python3.8\r\n )\r\n \r\n-set(COM_SRC\r\n-    # src/main.cc\r\n-    # ${MUJOCO_HOME}/simulate/glfw_dispatch.cc\r\n-    # ${MUJOCO_HOME}/simulate/glfw_adapter.cc\r\n-    # ${MUJOCO_HOME}/simulate/simulate.cc\r\n-    # ${MUJOCO_HOME}/simulate/platform_ui_adapter.cc        \r\n-        src/controller.cpp\r\n-        src/cuda.cu\r\n-        src/robotmodel.cpp\r\n-        src/trajectory.cpp\r\n-        src/quadraticprogram.cpp\r\n-        )\r\n+file(GLOB LIB_MUJOCO ${MUJOCO_PATH}/bin/libmujoco200.so)\r\n \r\n-# set(EXE_SRC\r\n-#     simulate/main.cc    \r\n-#     simulate/simulate.cc\r\n-#     simulate/controller.cpp\r\n-#     simulate/robotmodel.cpp\r\n-#     simulate/trajectory.cpp\r\n-    \r\n-# )\r\n-# add_library(franka_emika_lib\r\n-#     ${COM_SRC}\r\n-# )\r\n+file(GLOB UI_SRC ${MUJOCO_PATH}/include/uitools.c)\r\n \r\n+add_library(franka_lib\r\n+    ${UI_SRC}\r\n+    ${SRC_FILES}\r\n+    # ${catkin_LIBRARIES}\r\n+)\r\n \r\n \r\n-# set(COM_LIB \r\n-# ${MUJOCO_HOME}/lib/libmujoco.so\r\n-# ${MUJOCO_HOME}/lib/libmujoco.so.2.3.3\r\n-# ${MUJOCO_HOME}/bin/mujoco_plugin/libelasticity.so\r\n-# ${GLFW}\r\n-# -lqpOASES\r\n-# )\r\n+# for pybind11\r\n+add_library(franka_lib_\r\n+    ${SRC_FILES}\r\n+)\r\n \r\n-# set_target_properties( COM_LIB\r\n-#                        PROPERTIES CUDA_SEPARABLE_COMPILATION ON)\r\n-\r\n-add_library(mppi_\r\n-    ${COM_SRC}\r\n+add_executable(franka_panda\r\n+    src/simulate.cpp\r\n )\r\n\\ No newline at end of file\n \r\n-# add_executable(mppi ${COM_SRC})\r\n-# #add_executable(${PROJECT_NAME} simulate/main.cc)\r\n-# target_link_libraries(mppi \r\n-# \t${COM_LIB} \r\n-# \t${CMAKE_DL_LIBS} \r\n-# \t${X11_LIBRARIES}\r\n-# \t-lrbdl\r\n-#     \t-lrbdl_urdfreader\r\n-#     \t-lpthread\r\n-#     \tOpenGL::OpenGL\r\n-# \tOpenGL::EGL\r\n-# \tGLEW::GLEW\r\n-#     -lcudart\r\n-#     -lcurand\r\n-# \t${GLEW_LIBRARIES}\r\n-# \t${OPENGL_LIBRARIES}\r\n-# )\r\n+target_link_libraries(franka_panda\r\n+PUBLIC\r\n+    Eigen3::Eigen\r\n+    franka_lib\r\n+    -lrbdl\r\n+    -lrbdl_urdfreader\r\n+    -lpthread\r\n+    # ${OMPL_LIBRARIES}\r\n+    -lqpOASES\r\n \r\n-# set_property(TARGET mppi \r\n-#              PROPERTY CUDA_SEPARABLE_COMPILATION ON)\r\n+    ${MUJOCO_PATH}/bin/libglew.so\r\n+    ${MUJOCO_PATH}/bin/libglfw.so.3\r\n+    #GL\r\n+    ${LIB_MUJOCO}\r\n+    OpenGL::OpenGL\r\n+    OpenGL::EGL\r\n+    GLEW::GLEW\r\n+    ${GLEW_LIBRARIES}\r\n+    ${OPENGL_LIBRARIES}\r\n+    -lpython3.8\r\n+)\r\n+#message(\"--------------??----------------------\")\r\n+#add_subdirectory(pybind11)\r\n \r\n pybind11_add_module(controller src/controller.cpp)\r\n \r\n target_link_libraries(controller\r\n PUBLIC\r\n-    ${catkin_LIBRARIES}\r\n     Eigen3::Eigen\r\n-    mppi_\r\n-    # mppi\r\n+    franka_lib_\r\n     -lrbdl\r\n-      -lrbdl_urdfreader\r\n-      -lpthread\r\n-      OpenGL::OpenGL\r\n-    OpenGL::EGL\r\n+    -lrbdl_urdfreader\r\n+    -lpthread\r\n+    -lqpOASES\r\n     -lpython3.8\r\n-    # ${COM_LIB} \r\n-    ${X11_LIBRARIES} \r\n-    GLEW::GLEW\r\n     pybind11::pybind11\r\n-    # ${OMPL_LIBRARIES}\r\n-    ${GLEW_LIBRARIES}\r\n-\t${OPENGL_LIBRARIES}\r\n+    ${OMPL_LIBRARIES}\r\n )\r\n \r\n-set_property(TARGET controller \r\n-             PROPERTY CUDA_SEPARABLE_COMPILATION ON)\n+\r\n+################# For ROS ###########################\r\n+# install(DIRECTORY include/${PROJECT_NAME}/\r\n+#   DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}\r\n+#    FILES_MATCHING PATTERN \"*.h\"\r\n+#    PATTERN \".svn\" EXCLUDE\r\n+#  )\r\n+\r\n+ ################# For cmake ###########################\r\n+#install(TARGETS dualarm_exe DESTINATION bin)\r\n+\r\n+#target_include_directories(dualarm_lib\r\n+#PUBLIC\r\n+#    ${CMAKE_SOURCE_DIR}/include\r\n+#)\r\n"
                },
                {
                    "date": 1691469658709,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,11 +18,12 @@\n find_package(pybind11 REQUIRED)\r\n \r\n set(SRC_FILES\r\n     src/controller.cpp\r\n+    src/cuda.cu\r\n     src/robotmodel.cpp\r\n-    # src/trajectory.cpp\r\n-    # src/quadraticprogram.cpp\r\n+    src/trajectory.cpp\r\n+    src/quadraticprogram.cpp\r\n )\r\n \r\n set(MUJOCO_PATH\r\n     # /home/kist-robot2/mujoco200\r\n@@ -122,5 +123,5 @@\n \r\n #target_include_directories(dualarm_lib\r\n #PUBLIC\r\n #    ${CMAKE_SOURCE_DIR}/include\r\n-#)\n\\ No newline at end of file\n+#)\r\n"
                },
                {
                    "date": 1691469727974,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,24 +24,12 @@\n     src/trajectory.cpp\r\n     src/quadraticprogram.cpp\r\n )\r\n \r\n-set(MUJOCO_PATH\r\n-    # /home/kist-robot2/mujoco200\r\n-    /home/kist/KDH/Backup/franka_panda/mujoco200\r\n-    # /home/kist-robot/franka_panda/mujoco200\r\n-)\r\n-\r\n-# set(OpenGL_GL_PREFERENCE LEGACY)\r\n-\r\n-message(\"------------------------------------\")\r\n-message(\"Mujoco Path : \" ${MUJOCO_PATH})\r\n-\r\n include_directories(\r\n     ${CMAKE_CURRENT_SOURCE_DIR}/include\r\n     ${EIGEN3_INCLUDE_DIRS}\r\n     ${GLEW_INCLUDE_DIRS}\r\n-    ${MUJOCO_PATH}/include\r\n     # /usr/local/include/qpOASES\r\n     ${OMPL_INCLUDE_DIRS}\r\n     /usr/include/python3.8  # for pybind11\r\n )\r\n@@ -50,49 +38,13 @@\n     ${MUJOCO_PATH}/bin\r\n     /usr/include/python3.8\r\n )\r\n \r\n-file(GLOB LIB_MUJOCO ${MUJOCO_PATH}/bin/libmujoco200.so)\r\n \r\n-file(GLOB UI_SRC ${MUJOCO_PATH}/include/uitools.c)\r\n-\r\n-add_library(franka_lib\r\n-    ${UI_SRC}\r\n-    ${SRC_FILES}\r\n-    # ${catkin_LIBRARIES}\r\n-)\r\n-\r\n-\r\n # for pybind11\r\n add_library(franka_lib_\r\n     ${SRC_FILES}\r\n )\r\n-\r\n-add_executable(franka_panda\r\n-    src/simulate.cpp\r\n-)\r\n-\r\n-target_link_libraries(franka_panda\r\n-PUBLIC\r\n-    Eigen3::Eigen\r\n-    franka_lib\r\n-    -lrbdl\r\n-    -lrbdl_urdfreader\r\n-    -lpthread\r\n-    # ${OMPL_LIBRARIES}\r\n-    -lqpOASES\r\n-\r\n-    ${MUJOCO_PATH}/bin/libglew.so\r\n-    ${MUJOCO_PATH}/bin/libglfw.so.3\r\n-    #GL\r\n-    ${LIB_MUJOCO}\r\n-    OpenGL::OpenGL\r\n-    OpenGL::EGL\r\n-    GLEW::GLEW\r\n-    ${GLEW_LIBRARIES}\r\n-    ${OPENGL_LIBRARIES}\r\n-    -lpython3.8\r\n-)\r\n #message(\"--------------??----------------------\")\r\n #add_subdirectory(pybind11)\r\n \r\n pybind11_add_module(controller src/controller.cpp)\r\n@@ -109,8 +61,10 @@\n     pybind11::pybind11\r\n     ${OMPL_LIBRARIES}\r\n )\r\n \r\n+set_property(TARGET controller \r\n+             PROPERTY CUDA_SEPARABLE_COMPILATION ON)\r\n \r\n ################# For ROS ###########################\r\n # install(DIRECTORY include/${PROJECT_NAME}/\r\n #   DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}\r\n"
                },
                {
                    "date": 1691469765045,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,81 +1,112 @@\n-cmake_minimum_required(VERSION 3.0.2)\r\n+cmake_minimum_required(VERSION 3.15)\r\n+project(simulation)\r\n \r\n-project(franka_panda)\r\n \r\n-add_compile_options(-fpic -std=c++11 -O)\r\n-set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -fpic\")\r\n-set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fpic\")\r\n+set(CMAKE_CXX_STANDARD 17)\r\n \r\n-# find_package(catkin REQUIRED COMPONENTS\r\n-#     #roscpp\r\n-#     std_msgs\r\n-#     tf\r\n-# )\r\n \r\n-find_package(Eigen3 3.3 REQUIRED)\r\n+set(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_CXX_FLAGS} -Wl,-no-as-needed\")\r\n+#fing eigen library\r\n+find_package (Eigen3 3.3 REQUIRED)\r\n find_package(OpenGL REQUIRED)\r\n find_package(GLEW REQUIRED)\r\n-find_package(pybind11 REQUIRED)\r\n \r\n-set(SRC_FILES\r\n-    src/controller.cpp\r\n-    src/cuda.cu\r\n-    src/robotmodel.cpp\r\n-    src/trajectory.cpp\r\n-    src/quadraticprogram.cpp\r\n+message(STATUS \"Eigen3 : \" ${EIGEN3_INCLUDE_DIR}/Eigen)\r\n+message(STATUS \"current : \" ${CMAKE_CURRENT_SOURCE_DIR})\r\n+\r\n+\r\n+add_definitions(-DMJSIMULATE_STATIC) # use static =,solve the \"error LNK2001/LNK2019\" in windows\r\n+\r\n+find_package (X11)\r\n+find_library(GLFW libglfw.so.3 HINTS ${CMAKE_SOURCE_DIR}/mujoco200/bin)\r\n+# set MUJOCO root\r\n+set(MUJOCO_HOME ${CMAKE_SOURCE_DIR}/mujoco-2.3.3/)\r\n+message(STATUS \"MUJOCO_HOME: \" ${MUJOCO_HOME})\r\n+\r\n+enable_language(CUDA)\r\n+\r\n+include_directories(${CMAKE_CURRENT_SOURCE_DIR}/include\r\n+${EIGEN3_INCLUDE_DIRS}\r\n )\r\n \r\n+#link_directories(${CMAKE_CURRENT_SOURCE_DIR}/lib/)\r\n+link_directories(\r\n+    ${CMAKE_CURRENT_SOURCE_DIR}/lib/\r\n+)\r\n+\r\n+#$ENV{EIGEN3_INCLUDE_DIR}\r\n+\r\n include_directories(\r\n     ${CMAKE_CURRENT_SOURCE_DIR}/include\r\n-    ${EIGEN3_INCLUDE_DIRS}\r\n-    ${GLEW_INCLUDE_DIRS}\r\n-    # /usr/local/include/qpOASES\r\n-    ${OMPL_INCLUDE_DIRS}\r\n-    /usr/include/python3.8  # for pybind11\r\n+    ${CMAKE_CURRENT_SOURCE_DIR}/mujoco-2.3.3/include\r\n+    ${CMAKE_CURRENT_SOURCE_DIR}/mujoco-2.3.3/simulate\r\n+  $ENV{EIGEN3_INCLUDE_DIR}/Eigen/\r\n+  ${GLEW_INCLUDE_DIRS}\r\n+    /usr/local/include/rbdl\r\n+    /usr/local/lib\r\n+    /usr/local/cuda-11.6\r\n+    /usr/local/cuda\r\n+    /usr/local/cuda/include\r\n )\r\n \r\n-link_directories(\r\n-    ${MUJOCO_PATH}/bin\r\n-    /usr/include/python3.8\r\n-)\r\n+set(COM_SRC\r\n+    src/main.cc\r\n+    ${MUJOCO_HOME}/simulate/glfw_dispatch.cc\r\n+    ${MUJOCO_HOME}/simulate/glfw_adapter.cc\r\n+    ${MUJOCO_HOME}/simulate/simulate.cc\r\n+    ${MUJOCO_HOME}/simulate/platform_ui_adapter.cc    \r\n+    \r\n+        \r\n+        src/controller.cpp\r\n+        src/cuda.cu\r\n+        src/robotmodel.cpp\r\n+        src/trajectory.cpp\r\n+        src/quadraticprogram.cpp\r\n+        )\r\n \r\n+# set(EXE_SRC\r\n+#     simulate/main.cc    \r\n+#     simulate/simulate.cc\r\n+#     simulate/controller.cpp\r\n+#     simulate/robotmodel.cpp\r\n+#     simulate/trajectory.cpp\r\n+    \r\n+# )\r\n+# add_library(franka_emika_lib\r\n+#     ${COM_SRC}\r\n+# )\r\n \r\n-# for pybind11\r\n-add_library(franka_lib_\r\n-    ${SRC_FILES}\r\n+\r\n+\r\n+set(COM_LIB \r\n+${MUJOCO_HOME}/lib/libmujoco.so\r\n+${MUJOCO_HOME}/lib/libmujoco.so.2.3.3\r\n+${MUJOCO_HOME}/bin/mujoco_plugin/libelasticity.so\r\n+${GLFW}\r\n+-lqpOASES\r\n )\r\n-#message(\"--------------??----------------------\")\r\n-#add_subdirectory(pybind11)\r\n \r\n-pybind11_add_module(controller src/controller.cpp)\r\n+# set_target_properties( COM_LIB\r\n+#                        PROPERTIES CUDA_SEPARABLE_COMPILATION ON)\r\n \r\n-target_link_libraries(controller\r\n-PUBLIC\r\n-    Eigen3::Eigen\r\n-    franka_lib_\r\n-    -lrbdl\r\n-    -lrbdl_urdfreader\r\n-    -lpthread\r\n-    -lqpOASES\r\n-    -lpython3.8\r\n-    pybind11::pybind11\r\n-    ${OMPL_LIBRARIES}\r\n+add_executable(mppi ${COM_SRC})\r\n+#add_executable(${PROJECT_NAME} simulate/main.cc)\r\n+target_link_libraries(mppi \r\n+\t${COM_LIB} \r\n+\t${CMAKE_DL_LIBS} \r\n+\t${X11_LIBRARIES}\r\n+\t-lrbdl\r\n+    \t-lrbdl_urdfreader\r\n+    \t-lpthread\r\n+    \tOpenGL::OpenGL\r\n+\tOpenGL::EGL\r\n+\tGLEW::GLEW\r\n+    -lcudart\r\n+    -lcurand\r\n+\t${GLEW_LIBRARIES}\r\n+\t${OPENGL_LIBRARIES}\r\n )\r\n-\r\n-set_property(TARGET controller \r\n+set_property(TARGET mppi \r\n              PROPERTY CUDA_SEPARABLE_COMPILATION ON)\r\n \r\n-################# For ROS ###########################\r\n-# install(DIRECTORY include/${PROJECT_NAME}/\r\n-#   DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}\r\n-#    FILES_MATCHING PATTERN \"*.h\"\r\n-#    PATTERN \".svn\" EXCLUDE\r\n-#  )\r\n \r\n- ################# For cmake ###########################\r\n-#install(TARGETS dualarm_exe DESTINATION bin)\r\n-\r\n-#target_include_directories(dualarm_lib\r\n-#PUBLIC\r\n-#    ${CMAKE_SOURCE_DIR}/include\r\n-#)\r\n"
                },
                {
                    "date": 1691469815637,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,112 +1,85 @@\n-cmake_minimum_required(VERSION 3.15)\r\n-project(simulation)\r\n+cmake_minimum_required(VERSION 3.0.2)\r\n \r\n+project(franka_panda)\r\n \r\n-set(CMAKE_CXX_STANDARD 17)\r\n+add_compile_options(-fpic -std=c++11 -O)\r\n+set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -fpic\")\r\n+set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fpic\")\r\n \r\n+# find_package(catkin REQUIRED COMPONENTS\r\n+#     #roscpp\r\n+#     std_msgs\r\n+#     tf\r\n+# )\r\n \r\n-set(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_CXX_FLAGS} -Wl,-no-as-needed\")\r\n-#fing eigen library\r\n-find_package (Eigen3 3.3 REQUIRED)\r\n+find_package(Eigen3 3.3 REQUIRED)\r\n find_package(OpenGL REQUIRED)\r\n find_package(GLEW REQUIRED)\r\n+find_package(pybind11 REQUIRED)\r\n \r\n-message(STATUS \"Eigen3 : \" ${EIGEN3_INCLUDE_DIR}/Eigen)\r\n-message(STATUS \"current : \" ${CMAKE_CURRENT_SOURCE_DIR})\r\n-\r\n-\r\n-add_definitions(-DMJSIMULATE_STATIC) # use static =,solve the \"error LNK2001/LNK2019\" in windows\r\n-\r\n-find_package (X11)\r\n-find_library(GLFW libglfw.so.3 HINTS ${CMAKE_SOURCE_DIR}/mujoco200/bin)\r\n-# set MUJOCO root\r\n-set(MUJOCO_HOME ${CMAKE_SOURCE_DIR}/mujoco-2.3.3/)\r\n-message(STATUS \"MUJOCO_HOME: \" ${MUJOCO_HOME})\r\n-\r\n-enable_language(CUDA)\r\n-\r\n-include_directories(${CMAKE_CURRENT_SOURCE_DIR}/include\r\n-${EIGEN3_INCLUDE_DIRS}\r\n+set(SRC_FILES\r\n+    src/controller.cpp\r\n+    src/cuda.cu\r\n+    src/robotmodel.cpp\r\n+    src/trajectory.cpp\r\n+    src/quadraticprogram.cpp\r\n )\r\n \r\n-#link_directories(${CMAKE_CURRENT_SOURCE_DIR}/lib/)\r\n-link_directories(\r\n-    ${CMAKE_CURRENT_SOURCE_DIR}/lib/\r\n-)\r\n-\r\n-#$ENV{EIGEN3_INCLUDE_DIR}\r\n-\r\n include_directories(\r\n     ${CMAKE_CURRENT_SOURCE_DIR}/include\r\n-    ${CMAKE_CURRENT_SOURCE_DIR}/mujoco-2.3.3/include\r\n-    ${CMAKE_CURRENT_SOURCE_DIR}/mujoco-2.3.3/simulate\r\n-  $ENV{EIGEN3_INCLUDE_DIR}/Eigen/\r\n-  ${GLEW_INCLUDE_DIRS}\r\n-    /usr/local/include/rbdl\r\n+    ${EIGEN3_INCLUDE_DIRS}\r\n+    ${GLEW_INCLUDE_DIRS}\r\n+    # /usr/local/include/qpOASES\r\n+    ${OMPL_INCLUDE_DIRS}\r\n+    /usr/include/python3.8  # for pybind11\r\n     /usr/local/lib\r\n     /usr/local/cuda-11.6\r\n     /usr/local/cuda\r\n     /usr/local/cuda/include\r\n )\r\n \r\n-set(COM_SRC\r\n-    src/main.cc\r\n-    ${MUJOCO_HOME}/simulate/glfw_dispatch.cc\r\n-    ${MUJOCO_HOME}/simulate/glfw_adapter.cc\r\n-    ${MUJOCO_HOME}/simulate/simulate.cc\r\n-    ${MUJOCO_HOME}/simulate/platform_ui_adapter.cc    \r\n-    \r\n-        \r\n-        src/controller.cpp\r\n-        src/cuda.cu\r\n-        src/robotmodel.cpp\r\n-        src/trajectory.cpp\r\n-        src/quadraticprogram.cpp\r\n-        )\r\n+link_directories(\r\n+    ${MUJOCO_PATH}/bin\r\n+    /usr/include/python3.8\r\n+)\r\n \r\n-# set(EXE_SRC\r\n-#     simulate/main.cc    \r\n-#     simulate/simulate.cc\r\n-#     simulate/controller.cpp\r\n-#     simulate/robotmodel.cpp\r\n-#     simulate/trajectory.cpp\r\n-    \r\n-# )\r\n-# add_library(franka_emika_lib\r\n-#     ${COM_SRC}\r\n-# )\r\n \r\n+# for pybind11\r\n+add_library(franka_lib_\r\n+    ${SRC_FILES}\r\n+)\r\n+#message(\"--------------??----------------------\")\r\n+#add_subdirectory(pybind11)\r\n \r\n+pybind11_add_module(controller src/controller.cpp)\r\n \r\n-set(COM_LIB \r\n-${MUJOCO_HOME}/lib/libmujoco.so\r\n-${MUJOCO_HOME}/lib/libmujoco.so.2.3.3\r\n-${MUJOCO_HOME}/bin/mujoco_plugin/libelasticity.so\r\n-${GLFW}\r\n--lqpOASES\r\n+target_link_libraries(controller\r\n+PUBLIC\r\n+    Eigen3::Eigen\r\n+    franka_lib_\r\n+    -lrbdl\r\n+    -lrbdl_urdfreader\r\n+    -lpthread\r\n+    -lqpOASES\r\n+    -lpython3.8\r\n+    pybind11::pybind11\r\n+    ${OMPL_LIBRARIES}\r\n )\r\n \r\n-# set_target_properties( COM_LIB\r\n-#                        PROPERTIES CUDA_SEPARABLE_COMPILATION ON)\r\n-\r\n-add_executable(mppi ${COM_SRC})\r\n-#add_executable(${PROJECT_NAME} simulate/main.cc)\r\n-target_link_libraries(mppi \r\n-\t${COM_LIB} \r\n-\t${CMAKE_DL_LIBS} \r\n-\t${X11_LIBRARIES}\r\n-\t-lrbdl\r\n-    \t-lrbdl_urdfreader\r\n-    \t-lpthread\r\n-    \tOpenGL::OpenGL\r\n-\tOpenGL::EGL\r\n-\tGLEW::GLEW\r\n-    -lcudart\r\n-    -lcurand\r\n-\t${GLEW_LIBRARIES}\r\n-\t${OPENGL_LIBRARIES}\r\n-)\r\n-set_property(TARGET mppi \r\n+set_property(TARGET controller \r\n              PROPERTY CUDA_SEPARABLE_COMPILATION ON)\r\n \r\n+################# For ROS ###########################\r\n+# install(DIRECTORY include/${PROJECT_NAME}/\r\n+#   DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}\r\n+#    FILES_MATCHING PATTERN \"*.h\"\r\n+#    PATTERN \".svn\" EXCLUDE\r\n+#  )\r\n \r\n+ ################# For cmake ###########################\r\n+#install(TARGETS dualarm_exe DESTINATION bin)\r\n+\r\n+#target_include_directories(dualarm_lib\r\n+#PUBLIC\r\n+#    ${CMAKE_SOURCE_DIR}/include\r\n+#)\r\n"
                },
                {
                    "date": 1691470066521,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n \r\n add_compile_options(-fpic -std=c++11 -O)\r\n set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -fpic\")\r\n set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fpic\")\r\n-\r\n+enable_language(CUDA)\r\n # find_package(catkin REQUIRED COMPONENTS\r\n #     #roscpp\r\n #     std_msgs\r\n #     tf\r\n"
                },
                {
                    "date": 1691470657601,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,10 +65,10 @@\n     pybind11::pybind11\r\n     ${OMPL_LIBRARIES}\r\n )\r\n \r\n-set_property(TARGET controller \r\n-             PROPERTY CUDA_SEPARABLE_COMPILATION ON)\r\n+# set_property(TARGET controller \r\n+#              PROPERTY CUDA_SEPARABLE_COMPILATION ON)\r\n \r\n ################# For ROS ###########################\r\n # install(DIRECTORY include/${PROJECT_NAME}/\r\n #   DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}\r\n"
                },
                {
                    "date": 1691470668492,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,8 @@\n     /usr/local/cuda/include\r\n )\r\n \r\n link_directories(\r\n-    ${MUJOCO_PATH}/bin\r\n     /usr/include/python3.8\r\n )\r\n \r\n \r\n@@ -65,10 +64,10 @@\n     pybind11::pybind11\r\n     ${OMPL_LIBRARIES}\r\n )\r\n \r\n-# set_property(TARGET controller \r\n-#              PROPERTY CUDA_SEPARABLE_COMPILATION ON)\r\n+set_property(TARGET controller \r\n+             PROPERTY CUDA_SEPARABLE_COMPILATION ON)\r\n \r\n ################# For ROS ###########################\r\n # install(DIRECTORY include/${PROJECT_NAME}/\r\n #   DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}\r\n"
                },
                {
                    "date": 1691470925808,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,8 +35,9 @@\n     /usr/local/lib\r\n     /usr/local/cuda-11.6\r\n     /usr/local/cuda\r\n     /usr/local/cuda/include\r\n+    /pybind11/include\r\n )\r\n \r\n link_directories(\r\n     /usr/include/python3.8\r\n"
                },
                {
                    "date": 1691470946006,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n     /usr/local/lib\r\n     /usr/local/cuda-11.6\r\n     /usr/local/cuda\r\n     /usr/local/cuda/include\r\n-    /pybind11/include\r\n+    /pybind11/include/detail\r\n )\r\n \r\n link_directories(\r\n     /usr/include/python3.8\r\n"
                },
                {
                    "date": 1691470970406,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n     /usr/local/lib\r\n     /usr/local/cuda-11.6\r\n     /usr/local/cuda\r\n     /usr/local/cuda/include\r\n-    /pybind11/include/detail\r\n+    /pybind11/include\r\n )\r\n \r\n link_directories(\r\n     /usr/include/python3.8\r\n"
                },
                {
                    "date": 1691471004976,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,11 @@\n     /usr/local/cuda\r\n     /usr/local/cuda/include\r\n     /pybind11/include\r\n )\r\n-\r\n+set(pybind11_INCLUDE_DIR\r\n+    \"${CMAKE_CURRENT_LIST_DIR}/include\"\r\n+    CACHE INTERNAL \"Directory where pybind11 headers are located\")\r\n link_directories(\r\n     /usr/include/python3.8\r\n )\r\n \r\n"
                },
                {
                    "date": 1691471044337,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,11 +37,8 @@\n     /usr/local/cuda\r\n     /usr/local/cuda/include\r\n     /pybind11/include\r\n )\r\n-set(pybind11_INCLUDE_DIR\r\n-    \"${CMAKE_CURRENT_LIST_DIR}/include\"\r\n-    CACHE INTERNAL \"Directory where pybind11 headers are located\")\r\n link_directories(\r\n     /usr/include/python3.8\r\n )\r\n \r\n"
                },
                {
                    "date": 1691472064886,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n cmake_minimum_required(VERSION 3.0.2)\r\n \r\n project(franka_panda)\r\n \r\n-add_compile_options(-fpic -std=c++11 -O)\r\n+add_compile_options(-fpic -std=c++14 -O)\r\n set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -fpic\")\r\n set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fpic\")\r\n enable_language(CUDA)\r\n # find_package(catkin REQUIRED COMPONENTS\r\n@@ -37,8 +37,9 @@\n     /usr/local/cuda\r\n     /usr/local/cuda/include\r\n     /pybind11/include\r\n )\r\n+\r\n link_directories(\r\n     /usr/include/python3.8\r\n )\r\n \r\n"
                },
                {
                    "date": 1691472168942,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n cmake_minimum_required(VERSION 3.0.2)\r\n \r\n project(franka_panda)\r\n \r\n-add_compile_options(-fpic -std=c++14 -O)\r\n+add_compile_options(-fpic -std=c++11 -O)\r\n set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -fpic\")\r\n set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fpic\")\r\n enable_language(CUDA)\r\n # find_package(catkin REQUIRED COMPONENTS\r\n"
                },
                {
                    "date": 1691472559685,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,8 +36,10 @@\n     /usr/local/cuda-11.6\r\n     /usr/local/cuda\r\n     /usr/local/cuda/include\r\n     /pybind11/include\r\n+    /home/kist/anaconda3/envs/rl/lib/python3.8/site-packages/pybind11/include\r\n+    /home/kist/anaconda3/envs/rl/lib/python3.8/site-packages/pybind11/\r\n )\r\n \r\n link_directories(\r\n     /usr/include/python3.8\r\n"
                },
                {
                    "date": 1691472639166,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n cmake_minimum_required(VERSION 3.0.2)\r\n \r\n project(franka_panda)\r\n \r\n-add_compile_options(-fpic -std=c++11 -O)\r\n+add_compile_options(-fpic -std=c++17 -O)\r\n set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -fpic\")\r\n set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fpic\")\r\n enable_language(CUDA)\r\n # find_package(catkin REQUIRED COMPONENTS\r\n@@ -35,9 +35,9 @@\n     /usr/local/lib\r\n     /usr/local/cuda-11.6\r\n     /usr/local/cuda\r\n     /usr/local/cuda/include\r\n-    /pybind11/include\r\n+    # /pybind11/include\r\n     /home/kist/anaconda3/envs/rl/lib/python3.8/site-packages/pybind11/include\r\n     /home/kist/anaconda3/envs/rl/lib/python3.8/site-packages/pybind11/\r\n )\r\n \r\n"
                },
                {
                    "date": 1691472751848,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n cmake_minimum_required(VERSION 3.0.2)\r\n \r\n-project(franka_panda)\r\n+project(franka_panda LANGUAGES CXX)\r\n \r\n add_compile_options(-fpic -std=c++17 -O)\r\n set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -fpic\")\r\n set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fpic\")\r\n"
                },
                {
                    "date": 1691472761442,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,11 @@\n cmake_minimum_required(VERSION 3.0.2)\r\n \r\n project(franka_panda LANGUAGES CXX)\r\n \r\n-add_compile_options(-fpic -std=c++17 -O)\r\n-set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -fpic\")\r\n-set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fpic\")\r\n+# add_compile_options(-fpic -std=c++17 -O)\r\n+# set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -fpic\")\r\n+# set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fpic\")\r\n enable_language(CUDA)\r\n # find_package(catkin REQUIRED COMPONENTS\r\n #     #roscpp\r\n #     std_msgs\r\n"
                },
                {
                    "date": 1691472791219,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,14 @@\n \r\n # add_compile_options(-fpic -std=c++17 -O)\r\n # set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -fpic\")\r\n # set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fpic\")\r\n+\r\n+set(CMAKE_CXX_STANDARD 14 CACHE STRING \"C++ version selection\")  # or 11, 14, 17, 20\r\n+set(CMAKE_CXX_STANDARD_REQUIRED ON)  # optional, ensure standard is supported\r\n+set(CMAKE_CXX_EXTENSIONS OFF)  # optional, keep compiler extensions off\r\n+\r\n+\r\n enable_language(CUDA)\r\n # find_package(catkin REQUIRED COMPONENTS\r\n #     #roscpp\r\n #     std_msgs\r\n"
                },
                {
                    "date": 1691472826264,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n #     #roscpp\r\n #     std_msgs\r\n #     tf\r\n # )\r\n-\r\n+find_package(Python 3.8 COMPONENTS Interpreter Development REQUIRED)\r\n find_package(Eigen3 3.3 REQUIRED)\r\n find_package(OpenGL REQUIRED)\r\n find_package(GLEW REQUIRED)\r\n find_package(pybind11 REQUIRED)\r\n"
                },
                {
                    "date": 1691472888900,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n find_package(Python 3.8 COMPONENTS Interpreter Development REQUIRED)\r\n find_package(Eigen3 3.3 REQUIRED)\r\n find_package(OpenGL REQUIRED)\r\n find_package(GLEW REQUIRED)\r\n-find_package(pybind11 REQUIRED)\r\n+find_package(pybind11 CONFIG REQUIRED)\r\n \r\n set(SRC_FILES\r\n     src/controller.cpp\r\n     src/cuda.cu\r\n"
                },
                {
                    "date": 1691472895637,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n #     #roscpp\r\n #     std_msgs\r\n #     tf\r\n # )\r\n-find_package(Python 3.8 COMPONENTS Interpreter Development REQUIRED)\r\n+# find_package(Python 3.8 COMPONENTS Interpreter Development REQUIRED)\r\n find_package(Eigen3 3.3 REQUIRED)\r\n find_package(OpenGL REQUIRED)\r\n find_package(GLEW REQUIRED)\r\n find_package(pybind11 CONFIG REQUIRED)\r\n"
                },
                {
                    "date": 1691473113463,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,11 +5,9 @@\n # add_compile_options(-fpic -std=c++17 -O)\r\n # set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -fpic\")\r\n # set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fpic\")\r\n \r\n-set(CMAKE_CXX_STANDARD 14 CACHE STRING \"C++ version selection\")  # or 11, 14, 17, 20\r\n-set(CMAKE_CXX_STANDARD_REQUIRED ON)  # optional, ensure standard is supported\r\n-set(CMAKE_CXX_EXTENSIONS OFF)  # optional, keep compiler extensions off\r\n+add_compile_options(-std=c++11 -O)\r\n \r\n \r\n enable_language(CUDA)\r\n # find_package(catkin REQUIRED COMPONENTS\r\n"
                },
                {
                    "date": 1691473182580,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,9 +54,9 @@\n add_library(franka_lib_\r\n     ${SRC_FILES}\r\n )\r\n #message(\"--------------??----------------------\")\r\n-#add_subdirectory(pybind11)\r\n+add_subdirectory(pybind11)\r\n \r\n pybind11_add_module(controller src/controller.cpp)\r\n \r\n target_link_libraries(controller\r\n"
                },
                {
                    "date": 1691473213540,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n cmake_minimum_required(VERSION 3.0.2)\r\n \r\n-project(franka_panda LANGUAGES CXX)\r\n+project(franka_panda)\r\n \r\n # add_compile_options(-fpic -std=c++17 -O)\r\n # set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -fpic\")\r\n # set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fpic\")\r\n"
                },
                {
                    "date": 1691473445268,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,91 +1,103 @@\n cmake_minimum_required(VERSION 3.0.2)\r\n \r\n project(franka_panda)\r\n \r\n-# add_compile_options(-fpic -std=c++17 -O)\r\n-# set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -fpic\")\r\n-# set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fpic\")\r\n+add_compile_options(-std=c++11 -O -fpic)\r\n \r\n-add_compile_options(-std=c++11 -O)\r\n \r\n-\r\n-enable_language(CUDA)\r\n-# find_package(catkin REQUIRED COMPONENTS\r\n-#     #roscpp\r\n-#     std_msgs\r\n-#     tf\r\n-# )\r\n-# find_package(Python 3.8 COMPONENTS Interpreter Development REQUIRED)\r\n find_package(Eigen3 3.3 REQUIRED)\r\n find_package(OpenGL REQUIRED)\r\n find_package(GLEW REQUIRED)\r\n-find_package(pybind11 CONFIG REQUIRED)\r\n+find_package(pybind11 REQUIRED)\r\n \r\n set(SRC_FILES\r\n     src/controller.cpp\r\n-    src/cuda.cu\r\n     src/robotmodel.cpp\r\n     src/trajectory.cpp\r\n-    src/quadraticprogram.cpp\r\n )\r\n \r\n+set(MUJOCO_PATH\r\n+    /home/kist-robot2/mujoco200\r\n+)\r\n+\r\n+message(\"------------------------------------\")\r\n+message(\"Mujoco Path : \" ${MUJOCO_PATH})\r\n+\r\n include_directories(\r\n-    ${CMAKE_CURRENT_SOURCE_DIR}/include\r\n+    include\r\n     ${EIGEN3_INCLUDE_DIRS}\r\n     ${GLEW_INCLUDE_DIRS}\r\n-    # /usr/local/include/qpOASES\r\n-    ${OMPL_INCLUDE_DIRS}\r\n+    ${MUJOCO_PATH}/include\r\n     /usr/include/python3.8  # for pybind11\r\n-    /usr/local/lib\r\n-    /usr/local/cuda-11.6\r\n-    /usr/local/cuda\r\n-    /usr/local/cuda/include\r\n-    # /pybind11/include\r\n-    /home/kist/anaconda3/envs/rl/lib/python3.8/site-packages/pybind11/include\r\n-    /home/kist/anaconda3/envs/rl/lib/python3.8/site-packages/pybind11/\r\n )\r\n \r\n link_directories(\r\n-    /usr/include/python3.8\r\n+    ${MUJOCO_PATH}/bin\r\n+    /usr/include/python3.8 \r\n )\r\n \r\n+file(GLOB LIB_MUJOCO ${MUJOCO_PATH}/bin/libmujoco200.so)\r\n \r\n+file(GLOB UI_SRC ${MUJOCO_PATH}/include/uitools.c)\r\n+\r\n+add_library(franka_lib\r\n+    ${UI_SRC}\r\n+    ${SRC_FILES}\r\n+)\r\n+\r\n+\r\n # for pybind11\r\n add_library(franka_lib_\r\n     ${SRC_FILES}\r\n )\r\n-#message(\"--------------??----------------------\")\r\n+\r\n+add_executable(franka_panda\r\n+    src/simulate.cpp\r\n+)\r\n+\r\n+target_link_libraries(franka_panda\r\n+PUBLIC\r\n+    Eigen3::Eigen\r\n+    franka_lib\r\n+    -lrbdl\r\n+    -lrbdl_urdfreader\r\n+    -lpthread\r\n+\r\n+    ${MUJOCO_PATH}/bin/libglew.so\r\n+    ${MUJOCO_PATH}/bin/libglfw.so.3\r\n+    #GL\r\n+    ${LIB_MUJOCO}\r\n+    OpenGL::OpenGL\r\n+    OpenGL::EGL\r\n+    GLEW::GLEW\r\n+    ${GLEW_LIBRARIES}\r\n+    ${OPENGL_LIBRARIES}\r\n+\r\n+    -lpython3.8\r\n+)\r\n+\r\n+\r\n add_subdirectory(pybind11)\r\n-\r\n pybind11_add_module(controller src/controller.cpp)\r\n-\r\n target_link_libraries(controller\r\n PUBLIC\r\n     Eigen3::Eigen\r\n     franka_lib_\r\n     -lrbdl\r\n     -lrbdl_urdfreader\r\n     -lpthread\r\n-    -lqpOASES\r\n     -lpython3.8\r\n     pybind11::pybind11\r\n     ${OMPL_LIBRARIES}\r\n )\r\n \r\n-set_property(TARGET controller \r\n-             PROPERTY CUDA_SEPARABLE_COMPILATION ON)\r\n \r\n ################# For ROS ###########################\r\n-# install(DIRECTORY include/${PROJECT_NAME}/\r\n-#   DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}\r\n-#    FILES_MATCHING PATTERN \"*.h\"\r\n-#    PATTERN \".svn\" EXCLUDE\r\n-#  )\r\n \r\n  ################# For cmake ###########################\r\n #install(TARGETS dualarm_exe DESTINATION bin)\r\n \r\n #target_include_directories(dualarm_lib\r\n #PUBLIC\r\n #    ${CMAKE_SOURCE_DIR}/include\r\n-#)\r\n+#)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691473457156,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,11 @@\n project(franka_panda)\r\n \r\n add_compile_options(-std=c++11 -O -fpic)\r\n \r\n+enable_language(CUDA)\r\n \r\n+\r\n find_package(Eigen3 3.3 REQUIRED)\r\n find_package(OpenGL REQUIRED)\r\n find_package(GLEW REQUIRED)\r\n find_package(pybind11 REQUIRED)\r\n"
                },
                {
                    "date": 1691473471438,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,18 +13,14 @@\n find_package(pybind11 REQUIRED)\r\n \r\n set(SRC_FILES\r\n     src/controller.cpp\r\n+    src/cuda.cu\r\n     src/robotmodel.cpp\r\n     src/trajectory.cpp\r\n )\r\n \r\n-set(MUJOCO_PATH\r\n-    /home/kist-robot2/mujoco200\r\n-)\r\n-\r\n message(\"------------------------------------\")\r\n-message(\"Mujoco Path : \" ${MUJOCO_PATH})\r\n \r\n include_directories(\r\n     include\r\n     ${EIGEN3_INCLUDE_DIRS}\r\n"
                },
                {
                    "date": 1691473502938,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,19 +24,15 @@\n include_directories(\r\n     include\r\n     ${EIGEN3_INCLUDE_DIRS}\r\n     ${GLEW_INCLUDE_DIRS}\r\n-    ${MUJOCO_PATH}/include\r\n     /usr/include/python3.8  # for pybind11\r\n )\r\n \r\n link_directories(\r\n-    ${MUJOCO_PATH}/bin\r\n     /usr/include/python3.8 \r\n )\r\n \r\n-file(GLOB LIB_MUJOCO ${MUJOCO_PATH}/bin/libmujoco200.so)\r\n-\r\n file(GLOB UI_SRC ${MUJOCO_PATH}/include/uitools.c)\r\n \r\n add_library(franka_lib\r\n     ${UI_SRC}\r\n"
                },
                {
                    "date": 1691473526410,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,8 +25,12 @@\n     include\r\n     ${EIGEN3_INCLUDE_DIRS}\r\n     ${GLEW_INCLUDE_DIRS}\r\n     /usr/include/python3.8  # for pybind11\r\n+    /usr/local/lib\r\n+    /usr/local/cuda-11.6\r\n+    /usr/local/cuda\r\n+    /usr/local/cuda/include\r\n )\r\n \r\n link_directories(\r\n     /usr/include/python3.8 \r\n"
                },
                {
                    "date": 1691473532736,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n     include\r\n     ${EIGEN3_INCLUDE_DIRS}\r\n     ${GLEW_INCLUDE_DIRS}\r\n     /usr/include/python3.8  # for pybind11\r\n-    /usr/local/lib\r\n+    # /usr/local/lib\r\n     /usr/local/cuda-11.6\r\n     /usr/local/cuda\r\n     /usr/local/cuda/include\r\n )\r\n"
                },
                {
                    "date": 1691473538527,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,11 +26,11 @@\n     ${EIGEN3_INCLUDE_DIRS}\r\n     ${GLEW_INCLUDE_DIRS}\r\n     /usr/include/python3.8  # for pybind11\r\n     # /usr/local/lib\r\n-    /usr/local/cuda-11.6\r\n-    /usr/local/cuda\r\n-    /usr/local/cuda/include\r\n+    # /usr/local/cuda-11.6\r\n+    # /usr/local/cuda\r\n+    # /usr/local/cuda/include\r\n )\r\n \r\n link_directories(\r\n     /usr/include/python3.8 \r\n"
                },
                {
                    "date": 1691473547048,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n find_package(pybind11 REQUIRED)\r\n \r\n set(SRC_FILES\r\n     src/controller.cpp\r\n-    src/cuda.cu\r\n+    # src/cuda.cu\r\n     src/robotmodel.cpp\r\n     src/trajectory.cpp\r\n )\r\n \r\n"
                },
                {
                    "date": 1691473582942,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n     ${EIGEN3_INCLUDE_DIRS}\r\n     ${GLEW_INCLUDE_DIRS}\r\n     /usr/include/python3.8  # for pybind11\r\n     # /usr/local/lib\r\n-    # /usr/local/cuda-11.6\r\n+    /usr/local/cuda-11.6\r\n     # /usr/local/cuda\r\n     # /usr/local/cuda/include\r\n )\r\n \r\n"
                },
                {
                    "date": 1691473591004,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,11 +26,11 @@\n     ${EIGEN3_INCLUDE_DIRS}\r\n     ${GLEW_INCLUDE_DIRS}\r\n     /usr/include/python3.8  # for pybind11\r\n     # /usr/local/lib\r\n-    /usr/local/cuda-11.6\r\n+    # /usr/local/cuda-11.6\r\n     # /usr/local/cuda\r\n-    # /usr/local/cuda/include\r\n+    /usr/local/cuda/include\r\n )\r\n \r\n link_directories(\r\n     /usr/include/python3.8 \r\n"
                },
                {
                    "date": 1691473608001,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,101 +1,81 @@\n cmake_minimum_required(VERSION 3.0.2)\r\n \r\n project(franka_panda)\r\n \r\n-add_compile_options(-std=c++11 -O -fpic)\r\n+add_compile_options(-fpic -std=c++11 -O)\r\n+set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -fpic\")\r\n+set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fpic\")\r\n \r\n-enable_language(CUDA)\r\n+# find_package(catkin REQUIRED COMPONENTS\r\n+#     #roscpp\r\n+#     std_msgs\r\n+#     tf\r\n+# )\r\n \r\n-\r\n find_package(Eigen3 3.3 REQUIRED)\r\n find_package(OpenGL REQUIRED)\r\n find_package(GLEW REQUIRED)\r\n find_package(pybind11 REQUIRED)\r\n \r\n set(SRC_FILES\r\n     src/controller.cpp\r\n-    # src/cuda.cu\r\n+    src/cuda.cu\r\n     src/robotmodel.cpp\r\n     src/trajectory.cpp\r\n+    src/quadraticprogram.cpp\r\n )\r\n \r\n-message(\"------------------------------------\")\r\n-\r\n include_directories(\r\n-    include\r\n+    ${CMAKE_CURRENT_SOURCE_DIR}/include\r\n     ${EIGEN3_INCLUDE_DIRS}\r\n     ${GLEW_INCLUDE_DIRS}\r\n+    # /usr/local/include/qpOASES\r\n+    ${OMPL_INCLUDE_DIRS}\r\n     /usr/include/python3.8  # for pybind11\r\n-    # /usr/local/lib\r\n-    # /usr/local/cuda-11.6\r\n-    # /usr/local/cuda\r\n-    /usr/local/cuda/include\r\n )\r\n \r\n link_directories(\r\n-    /usr/include/python3.8 \r\n+    ${MUJOCO_PATH}/bin\r\n+    /usr/include/python3.8\r\n )\r\n \r\n-file(GLOB UI_SRC ${MUJOCO_PATH}/include/uitools.c)\r\n \r\n-add_library(franka_lib\r\n-    ${UI_SRC}\r\n-    ${SRC_FILES}\r\n-)\r\n-\r\n-\r\n # for pybind11\r\n add_library(franka_lib_\r\n     ${SRC_FILES}\r\n )\r\n+#message(\"--------------??----------------------\")\r\n+#add_subdirectory(pybind11)\r\n \r\n-add_executable(franka_panda\r\n-    src/simulate.cpp\r\n-)\r\n+pybind11_add_module(controller src/controller.cpp)\r\n \r\n-target_link_libraries(franka_panda\r\n-PUBLIC\r\n-    Eigen3::Eigen\r\n-    franka_lib\r\n-    -lrbdl\r\n-    -lrbdl_urdfreader\r\n-    -lpthread\r\n-\r\n-    ${MUJOCO_PATH}/bin/libglew.so\r\n-    ${MUJOCO_PATH}/bin/libglfw.so.3\r\n-    #GL\r\n-    ${LIB_MUJOCO}\r\n-    OpenGL::OpenGL\r\n-    OpenGL::EGL\r\n-    GLEW::GLEW\r\n-    ${GLEW_LIBRARIES}\r\n-    ${OPENGL_LIBRARIES}\r\n-\r\n-    -lpython3.8\r\n-)\r\n-\r\n-\r\n-add_subdirectory(pybind11)\r\n-pybind11_add_module(controller src/controller.cpp)\r\n target_link_libraries(controller\r\n PUBLIC\r\n     Eigen3::Eigen\r\n     franka_lib_\r\n\\ No newline at end of file\n     -lrbdl\r\n     -lrbdl_urdfreader\r\n     -lpthread\r\n+    -lqpOASES\r\n     -lpython3.8\r\n     pybind11::pybind11\r\n     ${OMPL_LIBRARIES}\r\n )\r\n \r\n+set_property(TARGET controller \r\n+             PROPERTY CUDA_SEPARABLE_COMPILATION ON)\r\n \r\n ################# For ROS ###########################\r\n+# install(DIRECTORY include/${PROJECT_NAME}/\r\n+#   DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}\r\n+#    FILES_MATCHING PATTERN \"*.h\"\r\n+#    PATTERN \".svn\" EXCLUDE\r\n+#  )\r\n \r\n  ################# For cmake ###########################\r\n #install(TARGETS dualarm_exe DESTINATION bin)\r\n \r\n #target_include_directories(dualarm_lib\r\n #PUBLIC\r\n #    ${CMAKE_SOURCE_DIR}/include\r\n-#)\n+#)\r\n"
                },
                {
                    "date": 1691473619980,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n cmake_minimum_required(VERSION 3.0.2)\r\n \r\n project(franka_panda)\r\n-\r\n+enable_language(CUDA)\r\n add_compile_options(-fpic -std=c++11 -O)\r\n set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -fpic\")\r\n set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fpic\")\r\n \r\n@@ -77,5 +77,5 @@\n \r\n #target_include_directories(dualarm_lib\r\n #PUBLIC\r\n #    ${CMAKE_SOURCE_DIR}/include\r\n-#)\n\\ No newline at end of file\n+#)\r\n"
                },
                {
                    "date": 1691473655744,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,8 +31,11 @@\n     ${GLEW_INCLUDE_DIRS}\r\n     # /usr/local/include/qpOASES\r\n     ${OMPL_INCLUDE_DIRS}\r\n     /usr/include/python3.8  # for pybind11\r\n+    /usr/local/cuda-11.6\r\n+    /usr/local/cuda\r\n+    /usr/local/cuda/include\r\n )\r\n \r\n link_directories(\r\n     ${MUJOCO_PATH}/bin\r\n"
                },
                {
                    "date": 1691473663822,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,84 +1,106 @@\n cmake_minimum_required(VERSION 3.0.2)\r\n \r\n project(franka_panda)\r\n-enable_language(CUDA)\r\n-add_compile_options(-fpic -std=c++11 -O)\r\n-set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -fpic\")\r\n-set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fpic\")\r\n \r\n-# find_package(catkin REQUIRED COMPONENTS\r\n-#     #roscpp\r\n-#     std_msgs\r\n-#     tf\r\n-# )\r\n+add_compile_options(-std=c++11 -O -fpic)\r\n \r\n+\r\n find_package(Eigen3 3.3 REQUIRED)\r\n find_package(OpenGL REQUIRED)\r\n find_package(GLEW REQUIRED)\r\n find_package(pybind11 REQUIRED)\r\n \r\n set(SRC_FILES\r\n     src/controller.cpp\r\n-    src/cuda.cu\r\n     src/robotmodel.cpp\r\n     src/trajectory.cpp\r\n-    src/quadraticprogram.cpp\r\n )\r\n \r\n+set(MUJOCO_PATH\r\n+    /home/kist-robot2/mujoco200\r\n+)\r\n+\r\n+message(\"------------------------------------\")\r\n+message(\"Mujoco Path : \" ${MUJOCO_PATH})\r\n+\r\n include_directories(\r\n-    ${CMAKE_CURRENT_SOURCE_DIR}/include\r\n+    include\r\n     ${EIGEN3_INCLUDE_DIRS}\r\n     ${GLEW_INCLUDE_DIRS}\r\n-    # /usr/local/include/qpOASES\r\n-    ${OMPL_INCLUDE_DIRS}\r\n+    ${MUJOCO_PATH}/include\r\n     /usr/include/python3.8  # for pybind11\r\n-    /usr/local/cuda-11.6\r\n+        /usr/local/cuda-11.6\r\n     /usr/local/cuda\r\n     /usr/local/cuda/include\r\n )\r\n \r\n link_directories(\r\n     ${MUJOCO_PATH}/bin\r\n-    /usr/include/python3.8\r\n+    /usr/include/python3.8 \r\n )\r\n \r\n+file(GLOB LIB_MUJOCO ${MUJOCO_PATH}/bin/libmujoco200.so)\r\n \r\n+file(GLOB UI_SRC ${MUJOCO_PATH}/include/uitools.c)\r\n+\r\n+add_library(franka_lib\r\n+    ${UI_SRC}\r\n+    ${SRC_FILES}\r\n+)\r\n+\r\n+\r\n # for pybind11\r\n add_library(franka_lib_\r\n     ${SRC_FILES}\r\n )\r\n-#message(\"--------------??----------------------\")\r\n-#add_subdirectory(pybind11)\r\n \r\n+add_executable(franka_panda\r\n+    src/simulate.cpp\r\n+)\r\n+\r\n+target_link_libraries(franka_panda\r\n+PUBLIC\r\n+    Eigen3::Eigen\r\n+    franka_lib\r\n+    -lrbdl\r\n+    -lrbdl_urdfreader\r\n+    -lpthread\r\n+\r\n+    ${MUJOCO_PATH}/bin/libglew.so\r\n+    ${MUJOCO_PATH}/bin/libglfw.so.3\r\n+    #GL\r\n+    ${LIB_MUJOCO}\r\n+    OpenGL::OpenGL\r\n+    OpenGL::EGL\r\n+    GLEW::GLEW\r\n+    ${GLEW_LIBRARIES}\r\n+    ${OPENGL_LIBRARIES}\r\n+\r\n+    -lpython3.8\r\n+)\r\n+\r\n+\r\n+add_subdirectory(pybind11)\r\n pybind11_add_module(controller src/controller.cpp)\r\n-\r\n target_link_libraries(controller\r\n PUBLIC\r\n     Eigen3::Eigen\r\n     franka_lib_\r\n     -lrbdl\r\n     -lrbdl_urdfreader\r\n     -lpthread\r\n-    -lqpOASES\r\n     -lpython3.8\r\n     pybind11::pybind11\r\n     ${OMPL_LIBRARIES}\r\n )\r\n \r\n-set_property(TARGET controller \r\n-             PROPERTY CUDA_SEPARABLE_COMPILATION ON)\r\n \r\n ################# For ROS ###########################\r\n-# install(DIRECTORY include/${PROJECT_NAME}/\r\n-#   DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}\r\n-#    FILES_MATCHING PATTERN \"*.h\"\r\n-#    PATTERN \".svn\" EXCLUDE\r\n-#  )\r\n \r\n  ################# For cmake ###########################\r\n #install(TARGETS dualarm_exe DESTINATION bin)\r\n \r\n #target_include_directories(dualarm_lib\r\n #PUBLIC\r\n #    ${CMAKE_SOURCE_DIR}/include\r\n-#)\r\n+#)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691474398052,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n     ${EIGEN3_INCLUDE_DIRS}\r\n     ${GLEW_INCLUDE_DIRS}\r\n     ${MUJOCO_PATH}/include\r\n     /usr/include/python3.8  # for pybind11\r\n-        /usr/local/cuda-11.6\r\n+    /usr/local/cuda-11.6\r\n     /usr/local/cuda\r\n     /usr/local/cuda/include\r\n )\r\n \r\n"
                },
                {
                    "date": 1691474530140,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,47 +38,47 @@\n     ${MUJOCO_PATH}/bin\r\n     /usr/include/python3.8 \r\n )\r\n \r\n-file(GLOB LIB_MUJOCO ${MUJOCO_PATH}/bin/libmujoco200.so)\r\n+# file(GLOB LIB_MUJOCO ${MUJOCO_PATH}/bin/libmujoco200.so)\r\n \r\n-file(GLOB UI_SRC ${MUJOCO_PATH}/include/uitools.c)\r\n+# file(GLOB UI_SRC ${MUJOCO_PATH}/include/uitools.c)\r\n \r\n-add_library(franka_lib\r\n-    ${UI_SRC}\r\n-    ${SRC_FILES}\r\n-)\r\n+# add_library(franka_lib\r\n+#     ${UI_SRC}\r\n+#     ${SRC_FILES}\r\n+# )\r\n \r\n \r\n # for pybind11\r\n add_library(franka_lib_\r\n     ${SRC_FILES}\r\n )\r\n \r\n-add_executable(franka_panda\r\n-    src/simulate.cpp\r\n-)\r\n+# add_executable(franka_panda\r\n+#     src/simulate.cpp\r\n+# )\r\n \r\n-target_link_libraries(franka_panda\r\n-PUBLIC\r\n-    Eigen3::Eigen\r\n-    franka_lib\r\n-    -lrbdl\r\n-    -lrbdl_urdfreader\r\n-    -lpthread\r\n+# target_link_libraries(franka_panda\r\n+# PUBLIC\r\n+#     Eigen3::Eigen\r\n+#     franka_lib\r\n+#     -lrbdl\r\n+#     -lrbdl_urdfreader\r\n+#     -lpthread\r\n \r\n-    ${MUJOCO_PATH}/bin/libglew.so\r\n-    ${MUJOCO_PATH}/bin/libglfw.so.3\r\n-    #GL\r\n-    ${LIB_MUJOCO}\r\n-    OpenGL::OpenGL\r\n-    OpenGL::EGL\r\n-    GLEW::GLEW\r\n-    ${GLEW_LIBRARIES}\r\n-    ${OPENGL_LIBRARIES}\r\n+#     ${MUJOCO_PATH}/bin/libglew.so\r\n+#     ${MUJOCO_PATH}/bin/libglfw.so.3\r\n+#     #GL\r\n+#     ${LIB_MUJOCO}\r\n+#     OpenGL::OpenGL\r\n+#     OpenGL::EGL\r\n+#     GLEW::GLEW\r\n+#     ${GLEW_LIBRARIES}\r\n+#     ${OPENGL_LIBRARIES}\r\n \r\n-    -lpython3.8\r\n-)\r\n+#     -lpython3.8\r\n+# )\r\n \r\n \r\n add_subdirectory(pybind11)\r\n pybind11_add_module(controller src/controller.cpp)\r\n"
                },
                {
                    "date": 1691474546080,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,23 +20,23 @@\n     /home/kist-robot2/mujoco200\r\n )\r\n \r\n message(\"------------------------------------\")\r\n-message(\"Mujoco Path : \" ${MUJOCO_PATH})\r\n+# message(\"Mujoco Path : \" ${MUJOCO_PATH})\r\n \r\n include_directories(\r\n     include\r\n     ${EIGEN3_INCLUDE_DIRS}\r\n     ${GLEW_INCLUDE_DIRS}\r\n-    ${MUJOCO_PATH}/include\r\n+    # ${MUJOCO_PATH}/include\r\n     /usr/include/python3.8  # for pybind11\r\n     /usr/local/cuda-11.6\r\n     /usr/local/cuda\r\n     /usr/local/cuda/include\r\n )\r\n \r\n link_directories(\r\n-    ${MUJOCO_PATH}/bin\r\n+    # ${MUJOCO_PATH}/bin\r\n     /usr/include/python3.8 \r\n )\r\n \r\n # file(GLOB LIB_MUJOCO ${MUJOCO_PATH}/bin/libmujoco200.so)\r\n"
                },
                {
                    "date": 1691474558489,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,15 +11,16 @@\n find_package(pybind11 REQUIRED)\r\n \r\n set(SRC_FILES\r\n     src/controller.cpp\r\n+    src/cuda.cu\r\n     src/robotmodel.cpp\r\n-    src/trajectory.cpp\r\n+    src/trajectory.cpp    \r\n )\r\n \r\n-set(MUJOCO_PATH\r\n-    /home/kist-robot2/mujoco200\r\n-)\r\n+# set(MUJOCO_PATH\r\n+#     /home/kist-robot2/mujoco200\r\n+# )\r\n \r\n message(\"------------------------------------\")\r\n # message(\"Mujoco Path : \" ${MUJOCO_PATH})\r\n \r\n"
                },
                {
                    "date": 1691474568306,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n project(franka_panda)\r\n \r\n add_compile_options(-std=c++11 -O -fpic)\r\n \r\n+enable_language(CUDA)\r\n \r\n find_package(Eigen3 3.3 REQUIRED)\r\n find_package(OpenGL REQUIRED)\r\n find_package(GLEW REQUIRED)\r\n"
                },
                {
                    "date": 1691474592455,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n cmake_minimum_required(VERSION 3.0.2)\r\n \r\n project(franka_panda)\r\n \r\n-add_compile_options(-std=c++11 -O -fpic)\r\n+add_compile_options(-std=c++11 -O)\r\n \r\n enable_language(CUDA)\r\n \r\n find_package(Eigen3 3.3 REQUIRED)\r\n"
                },
                {
                    "date": 1691474637042,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,10 @@\n cmake_minimum_required(VERSION 3.0.2)\r\n \r\n project(franka_panda)\r\n \r\n-add_compile_options(-std=c++11 -O)\r\n+add_compile_options(-std=c++11 -O -fpic)\r\n \r\n-enable_language(CUDA)\r\n \r\n find_package(Eigen3 3.3 REQUIRED)\r\n find_package(OpenGL REQUIRED)\r\n find_package(GLEW REQUIRED)\r\n@@ -17,8 +16,9 @@\n     src/robotmodel.cpp\r\n     src/trajectory.cpp    \r\n )\r\n \r\n+enable_language(CUDA)\r\n # set(MUJOCO_PATH\r\n #     /home/kist-robot2/mujoco200\r\n # )\r\n \r\n"
                },
                {
                    "date": 1691474685012,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,8 +8,9 @@\n find_package(Eigen3 3.3 REQUIRED)\r\n find_package(OpenGL REQUIRED)\r\n find_package(GLEW REQUIRED)\r\n find_package(pybind11 REQUIRED)\r\n+find_package (X11)\r\n \r\n set(SRC_FILES\r\n     src/controller.cpp\r\n     src/cuda.cu\r\n"
                },
                {
                    "date": 1691474707298,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,72 +18,28 @@\n     src/trajectory.cpp    \r\n )\r\n \r\n enable_language(CUDA)\r\n-# set(MUJOCO_PATH\r\n-#     /home/kist-robot2/mujoco200\r\n-# )\r\n-\r\n message(\"------------------------------------\")\r\n-# message(\"Mujoco Path : \" ${MUJOCO_PATH})\r\n \r\n include_directories(\r\n     include\r\n     ${EIGEN3_INCLUDE_DIRS}\r\n     ${GLEW_INCLUDE_DIRS}\r\n-    # ${MUJOCO_PATH}/include\r\n     /usr/include/python3.8  # for pybind11\r\n     /usr/local/cuda-11.6\r\n     /usr/local/cuda\r\n     /usr/local/cuda/include\r\n )\r\n \r\n link_directories(\r\n-    # ${MUJOCO_PATH}/bin\r\n     /usr/include/python3.8 \r\n )\r\n-\r\n-# file(GLOB LIB_MUJOCO ${MUJOCO_PATH}/bin/libmujoco200.so)\r\n-\r\n-# file(GLOB UI_SRC ${MUJOCO_PATH}/include/uitools.c)\r\n-\r\n-# add_library(franka_lib\r\n-#     ${UI_SRC}\r\n-#     ${SRC_FILES}\r\n-# )\r\n-\r\n-\r\n # for pybind11\r\n add_library(franka_lib_\r\n     ${SRC_FILES}\r\n )\r\n \r\n-# add_executable(franka_panda\r\n-#     src/simulate.cpp\r\n-# )\r\n-\r\n-# target_link_libraries(franka_panda\r\n-# PUBLIC\r\n-#     Eigen3::Eigen\r\n-#     franka_lib\r\n-#     -lrbdl\r\n-#     -lrbdl_urdfreader\r\n-#     -lpthread\r\n-\r\n-#     ${MUJOCO_PATH}/bin/libglew.so\r\n-#     ${MUJOCO_PATH}/bin/libglfw.so.3\r\n-#     #GL\r\n-#     ${LIB_MUJOCO}\r\n-#     OpenGL::OpenGL\r\n-#     OpenGL::EGL\r\n-#     GLEW::GLEW\r\n-#     ${GLEW_LIBRARIES}\r\n-#     ${OPENGL_LIBRARIES}\r\n-\r\n-#     -lpython3.8\r\n-# )\r\n-\r\n-\r\n add_subdirectory(pybind11)\r\n pybind11_add_module(controller src/controller.cpp)\r\n target_link_libraries(controller\r\n PUBLIC\r\n@@ -94,16 +50,5 @@\n     -lpthread\r\n     -lpython3.8\r\n     pybind11::pybind11\r\n     ${OMPL_LIBRARIES}\r\n-)\r\n-\r\n-\r\n-################# For ROS ###########################\r\n-\r\n- ################# For cmake ###########################\r\n-#install(TARGETS dualarm_exe DESTINATION bin)\r\n-\r\n-#target_include_directories(dualarm_lib\r\n-#PUBLIC\r\n-#    ${CMAKE_SOURCE_DIR}/include\r\n-#)\n\\ No newline at end of file\n+)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691474728759,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n cmake_minimum_required(VERSION 3.0.2)\r\n-\r\n+enable_language(CUDA)\r\n project(franka_panda)\r\n \r\n add_compile_options(-std=c++11 -O -fpic)\r\n \r\n@@ -17,9 +17,9 @@\n     src/robotmodel.cpp\r\n     src/trajectory.cpp    \r\n )\r\n \r\n-enable_language(CUDA)\r\n+\r\n message(\"------------------------------------\")\r\n \r\n include_directories(\r\n     include\r\n"
                },
                {
                    "date": 1691474776941,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,10 @@\n cmake_minimum_required(VERSION 3.0.2)\r\n enable_language(CUDA)\r\n project(franka_panda)\r\n \r\n-add_compile_options(-std=c++11 -O -fpic)\r\n+# add_compile_options(-std=c++11 -O -fpic)\r\n+set(CMAKE_CXX_STANDARD 17)\r\n \r\n \r\n find_package(Eigen3 3.3 REQUIRED)\r\n find_package(OpenGL REQUIRED)\r\n"
                },
                {
                    "date": 1691474783805,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,12 @@\n cmake_minimum_required(VERSION 3.0.2)\r\n-enable_language(CUDA)\r\n+\r\n project(franka_panda)\r\n \r\n # add_compile_options(-std=c++11 -O -fpic)\r\n set(CMAKE_CXX_STANDARD 17)\r\n \r\n+enable_language(CUDA)\r\n \r\n find_package(Eigen3 3.3 REQUIRED)\r\n find_package(OpenGL REQUIRED)\r\n find_package(GLEW REQUIRED)\r\n"
                },
                {
                    "date": 1691474808589,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,5 +52,8 @@\n     -lpthread\r\n     -lpython3.8\r\n     pybind11::pybind11\r\n     ${OMPL_LIBRARIES}\r\n-)\n\\ No newline at end of file\n+)\r\n+\r\n+set_property(TARGET controller \r\n+             PROPERTY CUDA_SEPARABLE_COMPILATION ON)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691474878296,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n \r\n project(franka_panda)\r\n \r\n # add_compile_options(-std=c++11 -O -fpic)\r\n-set(CMAKE_CXX_STANDARD 17)\r\n+set(CMAKE_CXX_STANDARD 17 - fpic)\r\n \r\n enable_language(CUDA)\r\n \r\n find_package(Eigen3 3.3 REQUIRED)\r\n"
                },
                {
                    "date": 1691474961959,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n \r\n project(franka_panda)\r\n \r\n # add_compile_options(-std=c++11 -O -fpic)\r\n-set(CMAKE_CXX_STANDARD 17 - fpic)\r\n+set(CMAKE_CXX_STANDARD 17 - -O fpic)\r\n \r\n enable_language(CUDA)\r\n \r\n find_package(Eigen3 3.3 REQUIRED)\r\n"
                },
                {
                    "date": 1691475063211,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,11 @@\n \r\n project(franka_panda)\r\n \r\n # add_compile_options(-std=c++11 -O -fpic)\r\n-set(CMAKE_CXX_STANDARD 17 - -O fpic)\r\n+set(CMAKE_CXX_STANDARD 17)\r\n+set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -fpic\")\r\n+set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fpic\")\r\n \r\n enable_language(CUDA)\r\n \r\n find_package(Eigen3 3.3 REQUIRED)\r\n"
                },
                {
                    "date": 1691475086552,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n cmake_minimum_required(VERSION 3.0.2)\r\n \r\n project(franka_panda)\r\n \r\n-# add_compile_options(-std=c++11 -O -fpic)\r\n+add_compile_options(-fpic)\r\n set(CMAKE_CXX_STANDARD 17)\r\n set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -fpic\")\r\n set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fpic\")\r\n \r\n"
                },
                {
                    "date": 1691475178307,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,14 @@\n cmake_minimum_required(VERSION 3.0.2)\r\n \r\n-project(franka_panda)\r\n+project(franka_panda LANGUAGES CXX CUDA)\r\n \r\n add_compile_options(-fpic)\r\n set(CMAKE_CXX_STANDARD 17)\r\n set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -fpic\")\r\n set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fpic\")\r\n \r\n-enable_language(CUDA)\r\n+# enable_language(CUDA)\r\n \r\n find_package(Eigen3 3.3 REQUIRED)\r\n find_package(OpenGL REQUIRED)\r\n find_package(GLEW REQUIRED)\r\n"
                },
                {
                    "date": 1691475186507,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,9 @@\n cmake_minimum_required(VERSION 3.0.2)\r\n \r\n project(franka_panda LANGUAGES CXX CUDA)\r\n \r\n-add_compile_options(-fpic)\r\n-set(CMAKE_CXX_STANDARD 17)\r\n-set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -fpic\")\r\n-set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fpic\")\r\n+set(PYBIND11_CPP_STANDARD -std=c++11)\r\n \r\n # enable_language(CUDA)\r\n \r\n find_package(Eigen3 3.3 REQUIRED)\r\n"
                },
                {
                    "date": 1691475304417,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,8 +39,14 @@\n add_library(franka_lib_\r\n     ${SRC_FILES}\r\n )\r\n \r\n+set_target_properties(franka_lib_ PROPERTIES \r\n+    POSITION_INDEPENDENT_CODE ON\r\n+    CUDA_VISIBILITY_PRESET \"hidden\"\r\n+    # CUDA_SEPARABLE_COMPILATION ON\r\n+)\r\n+\r\n add_subdirectory(pybind11)\r\n pybind11_add_module(controller src/controller.cpp)\r\n target_link_libraries(controller\r\n PUBLIC\r\n"
                },
                {
                    "date": 1691475327479,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n link_directories(\r\n     /usr/include/python3.8 \r\n )\r\n # for pybind11\r\n-add_library(franka_lib_\r\n+add_library(franka_lib_ STATIC\r\n     ${SRC_FILES}\r\n )\r\n \r\n set_target_properties(franka_lib_ PROPERTIES \r\n@@ -59,6 +59,6 @@\n     pybind11::pybind11\r\n     ${OMPL_LIBRARIES}\r\n )\r\n \r\n-set_property(TARGET controller \r\n-             PROPERTY CUDA_SEPARABLE_COMPILATION ON)\n\\ No newline at end of file\n+# set_property(TARGET controller \r\n+#              PROPERTY CUDA_SEPARABLE_COMPILATION ON)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691475355674,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,10 +12,9 @@\n find_package(pybind11 REQUIRED)\r\n find_package (X11)\r\n \r\n set(SRC_FILES\r\n-    src/controller.cpp\r\n-    src/cuda.cu\r\n+    src/controller.cpp    \r\n     src/robotmodel.cpp\r\n     src/trajectory.cpp    \r\n )\r\n \r\n@@ -36,9 +35,9 @@\n     /usr/include/python3.8 \r\n )\r\n # for pybind11\r\n add_library(franka_lib_ STATIC\r\n-    ${SRC_FILES}\r\n+src/cuda.cu\r\n )\r\n \r\n set_target_properties(franka_lib_ PROPERTIES \r\n     POSITION_INDEPENDENT_CODE ON\r\n"
                },
                {
                    "date": 1691475362058,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,13 +34,13 @@\n link_directories(\r\n     /usr/include/python3.8 \r\n )\r\n # for pybind11\r\n-add_library(franka_lib_ STATIC\r\n-src/cuda.cu\r\n+add_library(franka_lib_cu STATIC\r\n+    src/cuda.cu\r\n )\r\n \r\n-set_target_properties(franka_lib_ PROPERTIES \r\n+set_target_properties(franka_lib_cu PROPERTIES \r\n     POSITION_INDEPENDENT_CODE ON\r\n     CUDA_VISIBILITY_PRESET \"hidden\"\r\n     # CUDA_SEPARABLE_COMPILATION ON\r\n )\r\n"
                },
                {
                    "date": 1691475386647,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,8 +44,14 @@\n     CUDA_VISIBILITY_PRESET \"hidden\"\r\n     # CUDA_SEPARABLE_COMPILATION ON\r\n )\r\n \r\n+add_library(dummy MODULE\r\n+    ${SRC_FILES}\r\n+)\r\n+\r\n+\r\n+\r\n add_subdirectory(pybind11)\r\n pybind11_add_module(controller src/controller.cpp)\r\n target_link_libraries(controller\r\n PUBLIC\r\n"
                },
                {
                    "date": 1691475399557,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,14 +44,21 @@\n     CUDA_VISIBILITY_PRESET \"hidden\"\r\n     # CUDA_SEPARABLE_COMPILATION ON\r\n )\r\n \r\n-add_library(dummy MODULE\r\n+add_library(franka_lib_ MODULE\r\n     ${SRC_FILES}\r\n )\r\n \r\n+set_target_properties(franka_lib_ PROPERTIES \r\n+    CXX_VISIBILITY_PRESET \"hidden\"\r\n+    INTERPROCEDURAL_OPTIMIZATION TRUE\r\n+    PREFIX \"${PYTHON_MODULE_PREFIX}\"\r\n+    SUFFIX \"${PYTHON_MODULE_EXTENSION}\"\r\n+)\r\n \r\n \r\n+\r\n add_subdirectory(pybind11)\r\n pybind11_add_module(controller src/controller.cpp)\r\n target_link_libraries(controller\r\n PUBLIC\r\n"
                },
                {
                    "date": 1691475423957,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,22 +55,25 @@\n     PREFIX \"${PYTHON_MODULE_PREFIX}\"\r\n     SUFFIX \"${PYTHON_MODULE_EXTENSION}\"\r\n )\r\n \r\n+target_link_libraries(dummy PRIVATE dummycu)\r\n+target_link_libraries(dummy PRIVATE pybind11::module)\r\n \r\n \r\n-add_subdirectory(pybind11)\r\n-pybind11_add_module(controller src/controller.cpp)\r\n-target_link_libraries(controller\r\n-PUBLIC\r\n-    Eigen3::Eigen\r\n-    franka_lib_\r\n-    -lrbdl\r\n-    -lrbdl_urdfreader\r\n-    -lpthread\r\n-    -lpython3.8\r\n-    pybind11::pybind11\r\n-    ${OMPL_LIBRARIES}\r\n-)\r\n \r\n+# add_subdirectory(pybind11)\r\n+# pybind11_add_module(controller src/controller.cpp)\r\n+# target_link_libraries(controller\r\n+# PUBLIC\r\n+#     Eigen3::Eigen\r\n+#     franka_lib_\r\n+#     -lrbdl\r\n+#     -lrbdl_urdfreader\r\n+#     -lpthread\r\n+#     -lpython3.8\r\n+#     pybind11::pybind11\r\n+#     ${OMPL_LIBRARIES}\r\n+# )\r\n+\r\n # set_property(TARGET controller \r\n #              PROPERTY CUDA_SEPARABLE_COMPILATION ON)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691475438109,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,10 +55,10 @@\n     PREFIX \"${PYTHON_MODULE_PREFIX}\"\r\n     SUFFIX \"${PYTHON_MODULE_EXTENSION}\"\r\n )\r\n \r\n-target_link_libraries(dummy PRIVATE dummycu)\r\n-target_link_libraries(dummy PRIVATE pybind11::module)\r\n+target_link_libraries(franka_lib_ PRIVATE franka_lib_cu)\r\n+target_link_libraries(franka_lib_ PRIVATE pybind11::module)\r\n \r\n \r\n \r\n # add_subdirectory(pybind11)\r\n"
                },
                {
                    "date": 1691475522007,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,14 @@\n     SUFFIX \"${PYTHON_MODULE_EXTENSION}\"\r\n )\r\n \r\n target_link_libraries(franka_lib_ PRIVATE franka_lib_cu)\r\n-target_link_libraries(franka_lib_ PRIVATE pybind11::module)\r\n+target_link_libraries(franka_lib_ PRIVATE pybind11::module\r\n+    -lrbdl\r\n+    -lrbdl_urdfreader\r\n+        -lpython3.8\r\n+        Eigen3::Eigen\r\n+    )\r\n \r\n \r\n \r\n # add_subdirectory(pybind11)\r\n"
                },
                {
                    "date": 1691475537830,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,11 +30,11 @@\n     /usr/local/cuda\r\n     /usr/local/cuda/include\r\n )\r\n \r\n-link_directories(\r\n-    /usr/include/python3.8 \r\n-)\r\n+# link_directories(\r\n+#     /usr/include/python3.8 \r\n+# )\r\n # for pybind11\r\n add_library(franka_lib_cu STATIC\r\n     src/cuda.cu\r\n )\r\n"
                },
                {
                    "date": 1691475750761,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,12 +56,12 @@\n     SUFFIX \"${PYTHON_MODULE_EXTENSION}\"\r\n )\r\n \r\n target_link_libraries(franka_lib_ PRIVATE franka_lib_cu)\r\n-target_link_libraries(franka_lib_ PRIVATE pybind11::module\r\n+target_link_libraries(franka_lib_ -lpython3.8 PRIVATE pybind11::module\r\n     -lrbdl\r\n     -lrbdl_urdfreader\r\n-        -lpython3.8\r\n+        # -lpython3.8\r\n         Eigen3::Eigen\r\n     )\r\n \r\n \r\n"
                },
                {
                    "date": 1691475762273,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,10 @@\n     SUFFIX \"${PYTHON_MODULE_EXTENSION}\"\r\n )\r\n \r\n target_link_libraries(franka_lib_ PRIVATE franka_lib_cu)\r\n-target_link_libraries(franka_lib_ -lpython3.8 PRIVATE pybind11::module\r\n+target_link_libraries(franka_lib_ PRIVATE -lpython3.8\r\n+pybind11::module\r\n     -lrbdl\r\n     -lrbdl_urdfreader\r\n         # -lpython3.8\r\n         Eigen3::Eigen\r\n"
                },
                {
                    "date": 1691475770909,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,13 +56,12 @@\n     SUFFIX \"${PYTHON_MODULE_EXTENSION}\"\r\n )\r\n \r\n target_link_libraries(franka_lib_ PRIVATE franka_lib_cu)\r\n-target_link_libraries(franka_lib_ PRIVATE -lpython3.8\r\n-pybind11::module\r\n+target_link_libraries(franka_lib_ PRIVATE pybind11::module\r\n     -lrbdl\r\n     -lrbdl_urdfreader\r\n-        # -lpython3.8\r\n+        -lpython3.8\r\n         Eigen3::Eigen\r\n     )\r\n \r\n \r\n"
                },
                {
                    "date": 1691475831094,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n \r\n project(franka_panda LANGUAGES CXX CUDA)\r\n \r\n set(PYBIND11_CPP_STANDARD -std=c++11)\r\n-\r\n+set (PYBIND11_PYTHON_VERSION \"3.8\")\r\n # enable_language(CUDA)\r\n \r\n find_package(Eigen3 3.3 REQUIRED)\r\n find_package(OpenGL REQUIRED)\r\n"
                },
                {
                    "date": 1691475851952,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n \r\n project(franka_panda LANGUAGES CXX CUDA)\r\n \r\n set(PYBIND11_CPP_STANDARD -std=c++11)\r\n-set (PYBIND11_PYTHON_VERSION \"3.8\")\r\n+\r\n # enable_language(CUDA)\r\n \r\n find_package(Eigen3 3.3 REQUIRED)\r\n find_package(OpenGL REQUIRED)\r\n"
                },
                {
                    "date": 1691475860755,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n \r\n project(franka_panda LANGUAGES CXX CUDA)\r\n \r\n set(PYBIND11_CPP_STANDARD -std=c++11)\r\n-\r\n+set (PYTHONVERSION \"3.8\")\r\n # enable_language(CUDA)\r\n \r\n find_package(Eigen3 3.3 REQUIRED)\r\n find_package(OpenGL REQUIRED)\r\n"
                },
                {
                    "date": 1691475871113,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n \r\n project(franka_panda LANGUAGES CXX CUDA)\r\n \r\n set(PYBIND11_CPP_STANDARD -std=c++11)\r\n-set (PYTHONVERSION \"3.8\")\r\n+# set (PYTHONVERSION \"3.8\")\r\n # enable_language(CUDA)\r\n \r\n find_package(Eigen3 3.3 REQUIRED)\r\n find_package(OpenGL REQUIRED)\r\n"
                },
                {
                    "date": 1691475983503,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,10 @@\n include_directories(\r\n     include\r\n     ${EIGEN3_INCLUDE_DIRS}\r\n     ${GLEW_INCLUDE_DIRS}\r\n-    /usr/include/python3.8  # for pybind11\r\n+    # /usr/include/python3.8  # for pybind11\r\n+    /home/kist/anaconda3/envs/rl/bin/python\r\n     /usr/local/cuda-11.6\r\n     /usr/local/cuda\r\n     /usr/local/cuda/include\r\n )\r\n"
                },
                {
                    "date": 1691476005995,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n     include\r\n     ${EIGEN3_INCLUDE_DIRS}\r\n     ${GLEW_INCLUDE_DIRS}\r\n     # /usr/include/python3.8  # for pybind11\r\n-    /home/kist/anaconda3/envs/rl/bin/python\r\n+    /home/kist/anaconda3/envs/rl/bin\r\n     /usr/local/cuda-11.6\r\n     /usr/local/cuda\r\n     /usr/local/cuda/include\r\n )\r\n"
                },
                {
                    "date": 1691476111434,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n     include\r\n     ${EIGEN3_INCLUDE_DIRS}\r\n     ${GLEW_INCLUDE_DIRS}\r\n     # /usr/include/python3.8  # for pybind11\r\n-    /home/kist/anaconda3/envs/rl/bin\r\n+    /home/kist/anaconda3/envs/rl/include/python3.8\r\n     /usr/local/cuda-11.6\r\n     /usr/local/cuda\r\n     /usr/local/cuda/include\r\n )\r\n"
                },
                {
                    "date": 1691476213073,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,31 +35,31 @@\n # link_directories(\r\n #     /usr/include/python3.8 \r\n # )\r\n # for pybind11\r\n-add_library(franka_lib_cu STATIC\r\n+add_library(controller_cu STATIC\r\n     src/cuda.cu\r\n )\r\n \r\n-set_target_properties(franka_lib_cu PROPERTIES \r\n+set_target_properties(controller_cu PROPERTIES \r\n     POSITION_INDEPENDENT_CODE ON\r\n     CUDA_VISIBILITY_PRESET \"hidden\"\r\n     # CUDA_SEPARABLE_COMPILATION ON\r\n )\r\n \r\n-add_library(franka_lib_ MODULE\r\n+add_library(controller MODULE\r\n     ${SRC_FILES}\r\n )\r\n \r\n-set_target_properties(franka_lib_ PROPERTIES \r\n+set_target_properties(controller PROPERTIES \r\n     CXX_VISIBILITY_PRESET \"hidden\"\r\n     INTERPROCEDURAL_OPTIMIZATION TRUE\r\n     PREFIX \"${PYTHON_MODULE_PREFIX}\"\r\n     SUFFIX \"${PYTHON_MODULE_EXTENSION}\"\r\n )\r\n \r\n-target_link_libraries(franka_lib_ PRIVATE franka_lib_cu)\r\n-target_link_libraries(franka_lib_ PRIVATE pybind11::module\r\n+target_link_libraries(controller PRIVATE controller_cu)\r\n+target_link_libraries(controller PRIVATE pybind11::module\r\n     -lrbdl\r\n     -lrbdl_urdfreader\r\n         -lpython3.8\r\n         Eigen3::Eigen\r\n"
                },
                {
                    "date": 1691476375943,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,8 +9,9 @@\n find_package(Eigen3 3.3 REQUIRED)\r\n find_package(OpenGL REQUIRED)\r\n find_package(GLEW REQUIRED)\r\n find_package(pybind11 REQUIRED)\r\n+find_package(python3.8 REQUIRED)\r\n find_package (X11)\r\n \r\n set(SRC_FILES\r\n     src/controller.cpp    \r\n"
                },
                {
                    "date": 1691476391887,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n find_package(Eigen3 3.3 REQUIRED)\r\n find_package(OpenGL REQUIRED)\r\n find_package(GLEW REQUIRED)\r\n find_package(pybind11 REQUIRED)\r\n-find_package(python3.8 REQUIRED)\r\n+find_package(python 3.8 REQUIRED)\r\n find_package (X11)\r\n \r\n set(SRC_FILES\r\n     src/controller.cpp    \r\n"
                },
                {
                    "date": 1691476436755,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n find_package(Eigen3 3.3 REQUIRED)\r\n find_package(OpenGL REQUIRED)\r\n find_package(GLEW REQUIRED)\r\n find_package(pybind11 REQUIRED)\r\n-find_package(python 3.8 REQUIRED)\r\n+find_package(python 3.8.15)\r\n find_package (X11)\r\n \r\n set(SRC_FILES\r\n     src/controller.cpp    \r\n"
                },
                {
                    "date": 1691476460121,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n find_package(Eigen3 3.3 REQUIRED)\r\n find_package(OpenGL REQUIRED)\r\n find_package(GLEW REQUIRED)\r\n find_package(pybind11 REQUIRED)\r\n-find_package(python 3.8.15)\r\n+\r\n find_package (X11)\r\n \r\n set(SRC_FILES\r\n     src/controller.cpp    \r\n@@ -31,9 +31,9 @@\n     /usr/local/cuda-11.6\r\n     /usr/local/cuda\r\n     /usr/local/cuda/include\r\n )\r\n-\r\n+find_package(python 3.8.15)\r\n # link_directories(\r\n #     /usr/include/python3.8 \r\n # )\r\n # for pybind11\r\n"
                },
                {
                    "date": 1691476469330,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n find_package(Eigen3 3.3 REQUIRED)\r\n find_package(OpenGL REQUIRED)\r\n find_package(GLEW REQUIRED)\r\n find_package(pybind11 REQUIRED)\r\n-\r\n+find_package(python 3.8.15)\r\n find_package (X11)\r\n \r\n set(SRC_FILES\r\n     src/controller.cpp    \r\n@@ -31,9 +31,9 @@\n     /usr/local/cuda-11.6\r\n     /usr/local/cuda\r\n     /usr/local/cuda/include\r\n )\r\n-find_package(python 3.8.15)\r\n+\r\n # link_directories(\r\n #     /usr/include/python3.8 \r\n # )\r\n # for pybind11\r\n"
                },
                {
                    "date": 1691476520768,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-cmake_minimum_required(VERSION 3.0.2)\r\n+cmake_minimum_required(VERSION 3.12.4)\r\n \r\n project(franka_panda LANGUAGES CXX CUDA)\r\n \r\n set(PYBIND11_CPP_STANDARD -std=c++11)\r\n"
                },
                {
                    "date": 1691476623384,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,8 @@\n find_package(Eigen3 3.3 REQUIRED)\r\n find_package(OpenGL REQUIRED)\r\n find_package(GLEW REQUIRED)\r\n find_package(pybind11 REQUIRED)\r\n-find_package(python 3.8.15)\r\n find_package (X11)\r\n \r\n set(SRC_FILES\r\n     src/controller.cpp    \r\n"
                },
                {
                    "date": 1691476631320,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-cmake_minimum_required(VERSION 3.12.4)\r\n+cmake_minimum_required(VERSION 3.0.2)\r\n \r\n project(franka_panda LANGUAGES CXX CUDA)\r\n \r\n set(PYBIND11_CPP_STANDARD -std=c++11)\r\n"
                },
                {
                    "date": 1691477604287,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n )\r\n \r\n \r\n message(\"------------------------------------\")\r\n-\r\n+include(\"${CMAKE_CURRENT_SOURCE_DIR}/tools/pybind11Common.cmake\")\r\n include_directories(\r\n     include\r\n     ${EIGEN3_INCLUDE_DIRS}\r\n     ${GLEW_INCLUDE_DIRS}\r\n"
                },
                {
                    "date": 1691477626800,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n )\r\n \r\n \r\n message(\"------------------------------------\")\r\n-include(\"${CMAKE_CURRENT_SOURCE_DIR}/tools/pybind11Common.cmake\")\r\n+include(\"${CMAKE_CURRENT_SOURCE_DIR}/../pybind11/tools/pybind11Common.cmake\")\r\n include_directories(\r\n     include\r\n     ${EIGEN3_INCLUDE_DIRS}\r\n     ${GLEW_INCLUDE_DIRS}\r\n"
                },
                {
                    "date": 1691477657306,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n cmake_minimum_required(VERSION 3.0.2)\r\n \r\n project(franka_panda LANGUAGES CXX CUDA)\r\n \r\n-set(PYBIND11_CPP_STANDARD -std=c++11)\r\n+set(-std=c++11)\r\n # set (PYTHONVERSION \"3.8\")\r\n # enable_language(CUDA)\r\n \r\n find_package(Eigen3 3.3 REQUIRED)\r\n"
                },
                {
                    "date": 1691477669359,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n cmake_minimum_required(VERSION 3.0.2)\r\n \r\n project(franka_panda LANGUAGES CXX CUDA)\r\n \r\n-set(-std=c++11)\r\n+set(PYBIND11_CPP_STANDARD -std=c++11)\r\n # set (PYTHONVERSION \"3.8\")\r\n # enable_language(CUDA)\r\n \r\n find_package(Eigen3 3.3 REQUIRED)\r\n@@ -19,9 +19,9 @@\n )\r\n \r\n \r\n message(\"------------------------------------\")\r\n-include(\"${CMAKE_CURRENT_SOURCE_DIR}/../pybind11/tools/pybind11Common.cmake\")\r\n+# include(\"${CMAKE_CURRENT_SOURCE_DIR}/../pybind11/tools/pybind11Common.cmake\")\r\n include_directories(\r\n     include\r\n     ${EIGEN3_INCLUDE_DIRS}\r\n     ${GLEW_INCLUDE_DIRS}\r\n"
                },
                {
                    "date": 1691477882775,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,8 +11,34 @@\n find_package(GLEW REQUIRED)\r\n find_package(pybind11 REQUIRED)\r\n find_package (X11)\r\n \r\n+if(NOT DEFINED PYBIND11_PYTHON_VERSION AND DEFINED PYTHON_VERSION)\r\n+  message(WARNING \"Set PYBIND11_PYTHON_VERSION to search for a specific version, not \"\r\n+                  \"PYTHON_VERSION (which is an output). Assuming that is what you \"\r\n+                  \"meant to do and continuing anyway.\")\r\n+  set(PYBIND11_PYTHON_VERSION\r\n+      \"${PYTHON_VERSION}\"\r\n+      CACHE STRING \"Python version to use for compiling modules\")\r\n+  unset(PYTHON_VERSION)\r\n+  unset(PYTHON_VERSION CACHE)\r\n+elseif(DEFINED PYBIND11_PYTHON_VERSION)\r\n+  # If this is set as a normal variable, promote it\r\n+  set(PYBIND11_PYTHON_VERSION\r\n+      \"${PYBIND11_PYTHON_VERSION}\"\r\n+      CACHE STRING \"Python version to use for compiling modules\")\r\n+else()\r\n+  # Make an empty cache variable.\r\n+  set(PYBIND11_PYTHON_VERSION\r\n+      \"\"\r\n+      CACHE STRING \"Python version to use for compiling modules\")\r\n+endif()\r\n+\r\n+# A user can set versions manually too\r\n+set(Python_ADDITIONAL_VERSIONS\r\n+    \"3.11;3.10;3.9;3.8;3.7;3.6\"\r\n+    CACHE INTERNAL \"\")\r\n+\r\n set(SRC_FILES\r\n     src/controller.cpp    \r\n     src/robotmodel.cpp\r\n     src/trajectory.cpp    \r\n"
                },
                {
                    "date": 1691477942053,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n cmake_minimum_required(VERSION 3.0.2)\r\n \r\n project(franka_panda LANGUAGES CXX CUDA)\r\n \r\n-set(PYBIND11_CPP_STANDARD -std=c++11)\r\n+set(PYBIND11_CPP_STANDARD -std=c++14)\r\n # set (PYTHONVERSION \"3.8\")\r\n # enable_language(CUDA)\r\n \r\n find_package(Eigen3 3.3 REQUIRED)\r\n"
                },
                {
                    "date": 1691477964907,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n cmake_minimum_required(VERSION 3.0.2)\r\n \r\n project(franka_panda LANGUAGES CXX CUDA)\r\n \r\n-set(PYBIND11_CPP_STANDARD -std=c++14)\r\n+set(PYBIND11_CPP_STANDARD -std=c++11)\r\n # set (PYTHONVERSION \"3.8\")\r\n # enable_language(CUDA)\r\n \r\n find_package(Eigen3 3.3 REQUIRED)\r\n@@ -11,34 +11,9 @@\n find_package(GLEW REQUIRED)\r\n find_package(pybind11 REQUIRED)\r\n find_package (X11)\r\n \r\n-if(NOT DEFINED PYBIND11_PYTHON_VERSION AND DEFINED PYTHON_VERSION)\r\n-  message(WARNING \"Set PYBIND11_PYTHON_VERSION to search for a specific version, not \"\r\n-                  \"PYTHON_VERSION (which is an output). Assuming that is what you \"\r\n-                  \"meant to do and continuing anyway.\")\r\n-  set(PYBIND11_PYTHON_VERSION\r\n-      \"${PYTHON_VERSION}\"\r\n-      CACHE STRING \"Python version to use for compiling modules\")\r\n-  unset(PYTHON_VERSION)\r\n-  unset(PYTHON_VERSION CACHE)\r\n-elseif(DEFINED PYBIND11_PYTHON_VERSION)\r\n-  # If this is set as a normal variable, promote it\r\n-  set(PYBIND11_PYTHON_VERSION\r\n-      \"${PYBIND11_PYTHON_VERSION}\"\r\n-      CACHE STRING \"Python version to use for compiling modules\")\r\n-else()\r\n-  # Make an empty cache variable.\r\n-  set(PYBIND11_PYTHON_VERSION\r\n-      \"\"\r\n-      CACHE STRING \"Python version to use for compiling modules\")\r\n-endif()\r\n \r\n-# A user can set versions manually too\r\n-set(Python_ADDITIONAL_VERSIONS\r\n-    \"3.11;3.10;3.9;3.8;3.7;3.6\"\r\n-    CACHE INTERNAL \"\")\r\n-\r\n set(SRC_FILES\r\n     src/controller.cpp    \r\n     src/robotmodel.cpp\r\n     src/trajectory.cpp    \r\n"
                },
                {
                    "date": 1691477982935,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,33 @@\n     src/robotmodel.cpp\r\n     src/trajectory.cpp    \r\n )\r\n \r\n+if(NOT DEFINED PYBIND11_PYTHON_VERSION AND DEFINED PYTHON_VERSION)\r\n+  message(WARNING \"Set PYBIND11_PYTHON_VERSION to search for a specific version, not \"\r\n+                  \"PYTHON_VERSION (which is an output). Assuming that is what you \"\r\n+                  \"meant to do and continuing anyway.\")\r\n+  set(PYBIND11_PYTHON_VERSION\r\n+      \"${PYTHON_VERSION}\"\r\n+      CACHE STRING \"Python version to use for compiling modules\")\r\n+  unset(PYTHON_VERSION)\r\n+  unset(PYTHON_VERSION CACHE)\r\n+elseif(DEFINED PYBIND11_PYTHON_VERSION)\r\n+  # If this is set as a normal variable, promote it\r\n+  set(PYBIND11_PYTHON_VERSION\r\n+      \"${PYBIND11_PYTHON_VERSION}\"\r\n+      CACHE STRING \"Python version to use for compiling modules\")\r\n+else()\r\n+  # Make an empty cache variable.\r\n+  set(PYBIND11_PYTHON_VERSION\r\n+      \"\"\r\n+      CACHE STRING \"Python version to use for compiling modules\")\r\n+endif()\r\n \r\n+# A user can set versions manually too\r\n+set(Python_ADDITIONAL_VERSIONS\r\n+    \"3.11;3.10;3.9;3.8;3.7;3.6\"\r\n+    CACHE INTERNAL \"\")\r\n message(\"------------------------------------\")\r\n # include(\"${CMAKE_CURRENT_SOURCE_DIR}/../pybind11/tools/pybind11Common.cmake\")\r\n include_directories(\r\n     include\r\n"
                },
                {
                    "date": 1691478038170,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,33 +18,8 @@\n     src/robotmodel.cpp\r\n     src/trajectory.cpp    \r\n )\r\n \r\n-if(NOT DEFINED PYBIND11_PYTHON_VERSION AND DEFINED PYTHON_VERSION)\r\n-  message(WARNING \"Set PYBIND11_PYTHON_VERSION to search for a specific version, not \"\r\n-                  \"PYTHON_VERSION (which is an output). Assuming that is what you \"\r\n-                  \"meant to do and continuing anyway.\")\r\n-  set(PYBIND11_PYTHON_VERSION\r\n-      \"${PYTHON_VERSION}\"\r\n-      CACHE STRING \"Python version to use for compiling modules\")\r\n-  unset(PYTHON_VERSION)\r\n-  unset(PYTHON_VERSION CACHE)\r\n-elseif(DEFINED PYBIND11_PYTHON_VERSION)\r\n-  # If this is set as a normal variable, promote it\r\n-  set(PYBIND11_PYTHON_VERSION\r\n-      \"${PYBIND11_PYTHON_VERSION}\"\r\n-      CACHE STRING \"Python version to use for compiling modules\")\r\n-else()\r\n-  # Make an empty cache variable.\r\n-  set(PYBIND11_PYTHON_VERSION\r\n-      \"\"\r\n-      CACHE STRING \"Python version to use for compiling modules\")\r\n-endif()\r\n-\r\n-# A user can set versions manually too\r\n-set(Python_ADDITIONAL_VERSIONS\r\n-    \"3.11;3.10;3.9;3.8;3.7;3.6\"\r\n-    CACHE INTERNAL \"\")\r\n message(\"------------------------------------\")\r\n # include(\"${CMAKE_CURRENT_SOURCE_DIR}/../pybind11/tools/pybind11Common.cmake\")\r\n include_directories(\r\n     include\r\n"
                },
                {
                    "date": 1691478098184,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n     src/controller.cpp    \r\n     src/robotmodel.cpp\r\n     src/trajectory.cpp    \r\n )\r\n-\r\n+# message(STATUS \"PYTHON ${PYTHON_VERSION}\")\r\n message(\"------------------------------------\")\r\n # include(\"${CMAKE_CURRENT_SOURCE_DIR}/../pybind11/tools/pybind11Common.cmake\")\r\n include_directories(\r\n     include\r\n"
                },
                {
                    "date": 1691478149120,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,30 @@\n     src/controller.cpp    \r\n     src/robotmodel.cpp\r\n     src/trajectory.cpp    \r\n )\r\n-# message(STATUS \"PYTHON ${PYTHON_VERSION}\")\r\n+\r\n+if(NOT DEFINED PYBIND11_PYTHON_VERSION AND DEFINED PYTHON_VERSION)\r\n+  message(WARNING \"Set PYBIND11_PYTHON_VERSION to search for a specific version, not \"\r\n+                  \"PYTHON_VERSION (which is an output). Assuming that is what you \"\r\n+                  \"meant to do and continuing anyway.\")\r\n+  set(PYBIND11_PYTHON_VERSION\r\n+      \"${PYTHON_VERSION}\"\r\n+      CACHE STRING \"Python version to use for compiling modules\")\r\n+  unset(PYTHON_VERSION)\r\n+  unset(PYTHON_VERSION CACHE)\r\n+elseif(DEFINED PYBIND11_PYTHON_VERSION)\r\n+  # If this is set as a normal variable, promote it\r\n+  set(PYBIND11_PYTHON_VERSION\r\n+      \"${PYBIND11_PYTHON_VERSION}\"\r\n+      CACHE STRING \"Python version to use for compiling modules\")\r\n+else()\r\n+  # Make an empty cache variable.\r\n+  set(PYBIND11_PYTHON_VERSION\r\n+      \"\"\r\n+      CACHE STRING \"Python version to use for compiling modules\")\r\n+endif()\r\n+message(STATUS \"PYTHON ${PYTHON_VERSION}\")\r\n message(\"------------------------------------\")\r\n # include(\"${CMAKE_CURRENT_SOURCE_DIR}/../pybind11/tools/pybind11Common.cmake\")\r\n include_directories(\r\n     include\r\n"
                },
                {
                    "date": 1691478160072,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,28 +18,9 @@\n     src/robotmodel.cpp\r\n     src/trajectory.cpp    \r\n )\r\n \r\n-if(NOT DEFINED PYBIND11_PYTHON_VERSION AND DEFINED PYTHON_VERSION)\r\n-  message(WARNING \"Set PYBIND11_PYTHON_VERSION to search for a specific version, not \"\r\n-                  \"PYTHON_VERSION (which is an output). Assuming that is what you \"\r\n-                  \"meant to do and continuing anyway.\")\r\n-  set(PYBIND11_PYTHON_VERSION\r\n-      \"${PYTHON_VERSION}\"\r\n-      CACHE STRING \"Python version to use for compiling modules\")\r\n-  unset(PYTHON_VERSION)\r\n-  unset(PYTHON_VERSION CACHE)\r\n-elseif(DEFINED PYBIND11_PYTHON_VERSION)\r\n-  # If this is set as a normal variable, promote it\r\n-  set(PYBIND11_PYTHON_VERSION\r\n-      \"${PYBIND11_PYTHON_VERSION}\"\r\n-      CACHE STRING \"Python version to use for compiling modules\")\r\n-else()\r\n-  # Make an empty cache variable.\r\n-  set(PYBIND11_PYTHON_VERSION\r\n-      \"\"\r\n-      CACHE STRING \"Python version to use for compiling modules\")\r\n-endif()\r\n+\r\n message(STATUS \"PYTHON ${PYTHON_VERSION}\")\r\n message(\"------------------------------------\")\r\n # include(\"${CMAKE_CURRENT_SOURCE_DIR}/../pybind11/tools/pybind11Common.cmake\")\r\n include_directories(\r\n"
                },
                {
                    "date": 1691478167178,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,11 @@\n     src/robotmodel.cpp\r\n     src/trajectory.cpp    \r\n )\r\n \r\n-\r\n+set(Python_ADDITIONAL_VERSIONS\r\n+    \"3.11;3.10;3.9;3.8;3.7;3.6\"\r\n+    CACHE INTERNAL \"\")\r\n message(STATUS \"PYTHON ${PYTHON_VERSION}\")\r\n message(\"------------------------------------\")\r\n # include(\"${CMAKE_CURRENT_SOURCE_DIR}/../pybind11/tools/pybind11Common.cmake\")\r\n include_directories(\r\n"
                },
                {
                    "date": 1691478174304,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,11 +18,9 @@\n     src/robotmodel.cpp\r\n     src/trajectory.cpp    \r\n )\r\n \r\n-set(Python_ADDITIONAL_VERSIONS\r\n-    \"3.11;3.10;3.9;3.8;3.7;3.6\"\r\n-    CACHE INTERNAL \"\")\r\n+\r\n message(STATUS \"PYTHON ${PYTHON_VERSION}\")\r\n message(\"------------------------------------\")\r\n # include(\"${CMAKE_CURRENT_SOURCE_DIR}/../pybind11/tools/pybind11Common.cmake\")\r\n include_directories(\r\n"
                },
                {
                    "date": 1691478185604,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n     src/robotmodel.cpp\r\n     src/trajectory.cpp    \r\n )\r\n \r\n-\r\n+find_package(PythonLibsNew ${PYBIND11_PYTHON_VERSION} MODULE REQUIRED ${_pybind11_quiet})\r\n message(STATUS \"PYTHON ${PYTHON_VERSION}\")\r\n message(\"------------------------------------\")\r\n # include(\"${CMAKE_CURRENT_SOURCE_DIR}/../pybind11/tools/pybind11Common.cmake\")\r\n include_directories(\r\n"
                },
                {
                    "date": 1691478193011,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n     src/robotmodel.cpp\r\n     src/trajectory.cpp    \r\n )\r\n \r\n-find_package(PythonLibsNew ${PYBIND11_PYTHON_VERSION} MODULE REQUIRED ${_pybind11_quiet})\r\n+\r\n message(STATUS \"PYTHON ${PYTHON_VERSION}\")\r\n message(\"------------------------------------\")\r\n # include(\"${CMAKE_CURRENT_SOURCE_DIR}/../pybind11/tools/pybind11Common.cmake\")\r\n include_directories(\r\n"
                },
                {
                    "date": 1691478282164,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,12 @@\n find_package(GLEW REQUIRED)\r\n find_package(pybind11 REQUIRED)\r\n find_package (X11)\r\n \r\n+find_package(PythonInterp 3.8 REQUIRED)\r\n+find_package(PythonLibs 3.8 REQUIRED)\r\n \r\n+\r\n set(SRC_FILES\r\n     src/controller.cpp    \r\n     src/robotmodel.cpp\r\n     src/trajectory.cpp    \r\n"
                },
                {
                    "date": 1691478322097,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,12 +11,11 @@\n find_package(GLEW REQUIRED)\r\n find_package(pybind11 REQUIRED)\r\n find_package (X11)\r\n \r\n-find_package(PythonInterp 3.8 REQUIRED)\r\n-find_package(PythonLibs 3.8 REQUIRED)\r\n \r\n \r\n+\r\n set(SRC_FILES\r\n     src/controller.cpp    \r\n     src/robotmodel.cpp\r\n     src/trajectory.cpp    \r\n@@ -35,9 +34,10 @@\n     /usr/local/cuda-11.6\r\n     /usr/local/cuda\r\n     /usr/local/cuda/include\r\n )\r\n-\r\n+find_package(PythonInterp 3.8 REQUIRED)\r\n+find_package(PythonLibs 3.8 REQUIRED)\r\n # link_directories(\r\n #     /usr/include/python3.8 \r\n # )\r\n # for pybind11\r\n"
                },
                {
                    "date": 1691478656863,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,11 +11,11 @@\n find_package(GLEW REQUIRED)\r\n find_package(pybind11 REQUIRED)\r\n find_package (X11)\r\n \r\n+-DPYTHON_LIBRARY=$ANACONDA_HOME/lib/libpython2.7.so \\\r\n \r\n \r\n-\r\n set(SRC_FILES\r\n     src/controller.cpp    \r\n     src/robotmodel.cpp\r\n     src/trajectory.cpp    \r\n"
                },
                {
                    "date": 1691478686728,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n find_package(GLEW REQUIRED)\r\n find_package(pybind11 REQUIRED)\r\n find_package (X11)\r\n \r\n--DPYTHON_LIBRARY=$ANACONDA_HOME/lib/libpython2.7.so \\\r\n+-DPYTHON_LIBRARY= /home/kist/anaconda3/envs/rl/lib/python3.8.so\r\n \r\n \r\n set(SRC_FILES\r\n     src/controller.cpp    \r\n"
                },
                {
                    "date": 1691478693966,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n find_package(GLEW REQUIRED)\r\n find_package(pybind11 REQUIRED)\r\n find_package (X11)\r\n \r\n--DPYTHON_LIBRARY= /home/kist/anaconda3/envs/rl/lib/python3.8.so\r\n+-DPYTHON_LIBRARY= /home/kist/anaconda3/envs/rl/lib\r\n \r\n \r\n set(SRC_FILES\r\n     src/controller.cpp    \r\n"
                },
                {
                    "date": 1691478708871,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n find_package(GLEW REQUIRED)\r\n find_package(pybind11 REQUIRED)\r\n find_package (X11)\r\n \r\n--DPYTHON_LIBRARY= /home/kist/anaconda3/envs/rl/lib\r\n+-DPYTHON_LIBRARY= /home/kist/anaconda3/envs/rl/lib/libpython3.8.so\r\n \r\n \r\n set(SRC_FILES\r\n     src/controller.cpp    \r\n"
                },
                {
                    "date": 1691478717990,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,10 +10,11 @@\n find_package(OpenGL REQUIRED)\r\n find_package(GLEW REQUIRED)\r\n find_package(pybind11 REQUIRED)\r\n find_package (X11)\r\n+find_package (libpython3.8.so)\r\n \r\n--DPYTHON_LIBRARY= /home/kist/anaconda3/envs/rl/lib/libpython3.8.so\r\n+# -DPYTHON_LIBRARY= /home/kist/anaconda3/envs/rl/lib/libpython3.8.so\r\n \r\n \r\n set(SRC_FILES\r\n     src/controller.cpp    \r\n"
                },
                {
                    "date": 1691478731779,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n find_package(OpenGL REQUIRED)\r\n find_package(GLEW REQUIRED)\r\n find_package(pybind11 REQUIRED)\r\n find_package (X11)\r\n-find_package (libpython3.8.so)\r\n+# find_package (libpython3.8.so)\r\n \r\n # -DPYTHON_LIBRARY= /home/kist/anaconda3/envs/rl/lib/libpython3.8.so\r\n \r\n \r\n"
                },
                {
                    "date": 1691478744022,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,8 +67,9 @@\n target_link_libraries(controller PRIVATE pybind11::module\r\n     -lrbdl\r\n     -lrbdl_urdfreader\r\n         -lpython3.8\r\n+        libpython3.8.so\r\n         Eigen3::Eigen\r\n     )\r\n \r\n \r\n"
                },
                {
                    "date": 1691478797198,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,9 +67,9 @@\n target_link_libraries(controller PRIVATE pybind11::module\r\n     -lrbdl\r\n     -lrbdl_urdfreader\r\n         -lpython3.8\r\n-        libpython3.8.so\r\n+        # libpython3.8.so\r\n         Eigen3::Eigen\r\n     )\r\n \r\n \r\n"
                },
                {
                    "date": 1691478882649,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,13 +35,12 @@\n     /usr/local/cuda-11.6\r\n     /usr/local/cuda\r\n     /usr/local/cuda/include\r\n )\r\n-find_package(PythonInterp 3.8 REQUIRED)\r\n-find_package(PythonLibs 3.8 REQUIRED)\r\n-# link_directories(\r\n-#     /usr/include/python3.8 \r\n-# )\r\n+\r\n+link_directories(\r\n+    /usr/include/python3.8 \r\n+)\r\n # for pybind11\r\n add_library(controller_cu STATIC\r\n     src/cuda.cu\r\n )\r\n"
                },
                {
                    "date": 1691478892240,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n     src/trajectory.cpp    \r\n )\r\n \r\n \r\n-message(STATUS \"PYTHON ${PYTHON_VERSION}\")\r\n+\r\n message(\"------------------------------------\")\r\n # include(\"${CMAKE_CURRENT_SOURCE_DIR}/../pybind11/tools/pybind11Common.cmake\")\r\n include_directories(\r\n     include\r\n@@ -39,8 +39,9 @@\n \r\n link_directories(\r\n     /usr/include/python3.8 \r\n )\r\n+message(STATUS \"PYTHON ${PYTHON_VERSION}\")\r\n # for pybind11\r\n add_library(controller_cu STATIC\r\n     src/cuda.cu\r\n )\r\n"
                },
                {
                    "date": 1691478901683,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,8 +40,9 @@\n link_directories(\r\n     /usr/include/python3.8 \r\n )\r\n message(STATUS \"PYTHON ${PYTHON_VERSION}\")\r\n+message(\"------------------------------------\")\r\n # for pybind11\r\n add_library(controller_cu STATIC\r\n     src/cuda.cu\r\n )\r\n"
                },
                {
                    "date": 1691478913758,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,21 +2,17 @@\n \r\n project(franka_panda LANGUAGES CXX CUDA)\r\n \r\n set(PYBIND11_CPP_STANDARD -std=c++11)\r\n-# set (PYTHONVERSION \"3.8\")\r\n+set (PYTHONVERSION \"3.8\")\r\n # enable_language(CUDA)\r\n \r\n find_package(Eigen3 3.3 REQUIRED)\r\n find_package(OpenGL REQUIRED)\r\n find_package(GLEW REQUIRED)\r\n find_package(pybind11 REQUIRED)\r\n find_package (X11)\r\n-# find_package (libpython3.8.so)\r\n \r\n-# -DPYTHON_LIBRARY= /home/kist/anaconda3/envs/rl/lib/libpython3.8.so\r\n-\r\n-\r\n set(SRC_FILES\r\n     src/controller.cpp    \r\n     src/robotmodel.cpp\r\n     src/trajectory.cpp    \r\n"
                },
                {
                    "date": 1691478922379,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n \r\n project(franka_panda LANGUAGES CXX CUDA)\r\n \r\n set(PYBIND11_CPP_STANDARD -std=c++11)\r\n-set (PYTHONVERSION \"3.8\")\r\n+set (PYTHON_VERSION \"3.8\")\r\n # enable_language(CUDA)\r\n \r\n find_package(Eigen3 3.3 REQUIRED)\r\n find_package(OpenGL REQUIRED)\r\n"
                },
                {
                    "date": 1691478958172,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,8 @@\n \r\n project(franka_panda LANGUAGES CXX CUDA)\r\n \r\n set(PYBIND11_CPP_STANDARD -std=c++11)\r\n-set (PYTHON_VERSION \"3.8\")\r\n # enable_language(CUDA)\r\n \r\n find_package(Eigen3 3.3 REQUIRED)\r\n find_package(OpenGL REQUIRED)\r\n@@ -64,26 +63,6 @@\n target_link_libraries(controller PRIVATE pybind11::module\r\n     -lrbdl\r\n     -lrbdl_urdfreader\r\n         -lpython3.8\r\n-        # libpython3.8.so\r\n         Eigen3::Eigen\r\n-    )\r\n-\r\n-\r\n-\r\n-# add_subdirectory(pybind11)\r\n-# pybind11_add_module(controller src/controller.cpp)\r\n-# target_link_libraries(controller\r\n-# PUBLIC\r\n-#     Eigen3::Eigen\r\n-#     franka_lib_\r\n-#     -lrbdl\r\n-#     -lrbdl_urdfreader\r\n-#     -lpthread\r\n-#     -lpython3.8\r\n-#     pybind11::pybind11\r\n-#     ${OMPL_LIBRARIES}\r\n-# )\r\n-\r\n-# set_property(TARGET controller \r\n-#              PROPERTY CUDA_SEPARABLE_COMPILATION ON)\n\\ No newline at end of file\n+    )\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691478964136,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,10 +24,10 @@\n include_directories(\r\n     include\r\n     ${EIGEN3_INCLUDE_DIRS}\r\n     ${GLEW_INCLUDE_DIRS}\r\n-    # /usr/include/python3.8  # for pybind11\r\n-    /home/kist/anaconda3/envs/rl/include/python3.8\r\n+    /usr/include/python3.8  # for pybind11\r\n+    # /home/kist/anaconda3/envs/rl/include/python3.8\r\n     /usr/local/cuda-11.6\r\n     /usr/local/cuda\r\n     /usr/local/cuda/include\r\n )\r\n"
                },
                {
                    "date": 1691478972799,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n find_package(Eigen3 3.3 REQUIRED)\r\n find_package(OpenGL REQUIRED)\r\n find_package(GLEW REQUIRED)\r\n find_package(pybind11 REQUIRED)\r\n-find_package (X11)\r\n+# find_package (X11)\r\n \r\n set(SRC_FILES\r\n     src/controller.cpp    \r\n     src/robotmodel.cpp\r\n"
                },
                {
                    "date": 1691479696346,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n \r\n project(franka_panda LANGUAGES CXX CUDA)\r\n \r\n set(PYBIND11_CPP_STANDARD -std=c++11)\r\n+set (PYBIND11_PYTHON_VERSION \"3.8\")\r\n # enable_language(CUDA)\r\n \r\n find_package(Eigen3 3.3 REQUIRED)\r\n find_package(OpenGL REQUIRED)\r\n"
                },
                {
                    "date": 1691479734002,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n cmake_minimum_required(VERSION 3.0.2)\r\n \r\n project(franka_panda LANGUAGES CXX CUDA)\r\n \r\n-set(PYBIND11_CPP_STANDARD -std=c++11)\r\n+set(PYBIND11_CPP_STANDARD -std=c++14)\r\n set (PYBIND11_PYTHON_VERSION \"3.8\")\r\n # enable_language(CUDA)\r\n \r\n find_package(Eigen3 3.3 REQUIRED)\r\n"
                },
                {
                    "date": 1691481342186,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n cmake_minimum_required(VERSION 3.0.2)\r\n \r\n project(franka_panda LANGUAGES CXX CUDA)\r\n \r\n-set(PYBIND11_CPP_STANDARD -std=c++14)\r\n+set(PYBIND11_CPP_STANDARD -std=c++11)\r\n set (PYBIND11_PYTHON_VERSION \"3.8\")\r\n # enable_language(CUDA)\r\n \r\n find_package(Eigen3 3.3 REQUIRED)\r\n"
                },
                {
                    "date": 1691481371944,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n \r\n project(franka_panda LANGUAGES CXX CUDA)\r\n \r\n set(PYBIND11_CPP_STANDARD -std=c++11)\r\n-set (PYBIND11_PYTHON_VERSION \"3.8\")\r\n+# set (PYBIND11_PYTHON_VERSION \"3.8\")\r\n # enable_language(CUDA)\r\n \r\n find_package(Eigen3 3.3 REQUIRED)\r\n find_package(OpenGL REQUIRED)\r\n"
                },
                {
                    "date": 1691481387357,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n \r\n find_package(Eigen3 3.3 REQUIRED)\r\n find_package(OpenGL REQUIRED)\r\n find_package(GLEW REQUIRED)\r\n-find_package(pybind11 REQUIRED)\r\n+#find_package(pybind11 REQUIRED)\r\n # find_package (X11)\r\n \r\n set(SRC_FILES\r\n     src/controller.cpp    \r\n"
                },
                {
                    "date": 1691481463206,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n \r\n find_package(Eigen3 3.3 REQUIRED)\r\n find_package(OpenGL REQUIRED)\r\n find_package(GLEW REQUIRED)\r\n-#find_package(pybind11 REQUIRED)\r\n+find_package(pybind11 REQUIRED)\r\n # find_package (X11)\r\n \r\n set(SRC_FILES\r\n     src/controller.cpp    \r\n"
                },
                {
                    "date": 1691481493391,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n cmake_minimum_required(VERSION 3.0.2)\r\n \r\n project(franka_panda LANGUAGES CXX CUDA)\r\n \r\n-set(PYBIND11_CPP_STANDARD -std=c++11)\r\n+set(PYBIND11_CPP_STANDARD -std=c++17)\r\n # set (PYBIND11_PYTHON_VERSION \"3.8\")\r\n # enable_language(CUDA)\r\n \r\n find_package(Eigen3 3.3 REQUIRED)\r\n"
                },
                {
                    "date": 1691481571712,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n cmake_minimum_required(VERSION 3.0.2)\r\n \r\n project(franka_panda LANGUAGES CXX CUDA)\r\n \r\n-set(PYBIND11_CPP_STANDARD -std=c++17)\r\n+set(PYBIND11_CPP_STANDARD)\r\n # set (PYBIND11_PYTHON_VERSION \"3.8\")\r\n # enable_language(CUDA)\r\n \r\n find_package(Eigen3 3.3 REQUIRED)\r\n"
                },
                {
                    "date": 1691484542785,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n project(franka_panda LANGUAGES CXX CUDA)\r\n \r\n set(PYBIND11_CPP_STANDARD)\r\n # set (PYBIND11_PYTHON_VERSION \"3.8\")\r\n-# enable_language(CUDA)\r\n+enable_language(CUDA)\r\n \r\n find_package(Eigen3 3.3 REQUIRED)\r\n find_package(OpenGL REQUIRED)\r\n find_package(GLEW REQUIRED)\r\n"
                },
                {
                    "date": 1691484599987,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,8 +60,12 @@\n     SUFFIX \"${PYTHON_MODULE_EXTENSION}\"\r\n )\r\n \r\n target_link_libraries(controller PRIVATE controller_cu)\r\n+\r\n+set_property(TARGET controller_cu \r\n+             PROPERTY CUDA_SEPARABLE_COMPILATION ON)\r\n+\r\n target_link_libraries(controller PRIVATE pybind11::module\r\n     -lrbdl\r\n     -lrbdl_urdfreader\r\n         -lpython3.8\r\n"
                },
                {
                    "date": 1691484632298,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,8 +48,11 @@\n     CUDA_VISIBILITY_PRESET \"hidden\"\r\n     # CUDA_SEPARABLE_COMPILATION ON\r\n )\r\n \r\n+set_property(TARGET controller_cu \r\n+             PROPERTY CUDA_SEPARABLE_COMPILATION ON)\r\n+\r\n add_library(controller MODULE\r\n     ${SRC_FILES}\r\n )\r\n \r\n@@ -61,11 +64,8 @@\n )\r\n \r\n target_link_libraries(controller PRIVATE controller_cu)\r\n \r\n-set_property(TARGET controller_cu \r\n-             PROPERTY CUDA_SEPARABLE_COMPILATION ON)\r\n-\r\n target_link_libraries(controller PRIVATE pybind11::module\r\n     -lrbdl\r\n     -lrbdl_urdfreader\r\n         -lpython3.8\r\n"
                },
                {
                    "date": 1691485333464,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,12 @@\n-cmake_minimum_required(VERSION 3.0.2)\r\n+cmake_minimum_required(VERSION 3.15)\r\n \r\n project(franka_panda LANGUAGES CXX CUDA)\r\n \r\n-set(PYBIND11_CPP_STANDARD)\r\n+set(CMAKE_CXX_STANDARD 17)\r\n+\r\n+\r\n+# set(PYBIND11_CPP_STANDARD)\r\n # set (PYBIND11_PYTHON_VERSION \"3.8\")\r\n enable_language(CUDA)\r\n \r\n find_package(Eigen3 3.3 REQUIRED)\r\n"
                },
                {
                    "date": 1691485488024,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,9 +47,9 @@\n )\r\n \r\n set_target_properties(controller_cu PROPERTIES \r\n     POSITION_INDEPENDENT_CODE ON\r\n-    CUDA_VISIBILITY_PRESET \"hidden\"\r\n+    # CUDA_VISIBILITY_PRESET \"hidden\"\r\n     # CUDA_SEPARABLE_COMPILATION ON\r\n )\r\n \r\n set_property(TARGET controller_cu \r\n"
                },
                {
                    "date": 1691485522646,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,14 +47,14 @@\n )\r\n \r\n set_target_properties(controller_cu PROPERTIES \r\n     POSITION_INDEPENDENT_CODE ON\r\n-    # CUDA_VISIBILITY_PRESET \"hidden\"\r\n-    # CUDA_SEPARABLE_COMPILATION ON\r\n+    CUDA_VISIBILITY_PRESET \"hidden\"\r\n+    CUDA_SEPARABLE_COMPILATION ON\r\n )\r\n \r\n-set_property(TARGET controller_cu \r\n-             PROPERTY CUDA_SEPARABLE_COMPILATION ON)\r\n+# set_property(TARGET controller_cu \r\n+            #  PROPERTY CUDA_SEPARABLE_COMPILATION ON)\r\n \r\n add_library(controller MODULE\r\n     ${SRC_FILES}\r\n )\r\n"
                },
                {
                    "date": 1691485617228,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,10 +46,10 @@\n     src/cuda.cu\r\n )\r\n \r\n set_target_properties(controller_cu PROPERTIES \r\n-    POSITION_INDEPENDENT_CODE ON\r\n-    CUDA_VISIBILITY_PRESET \"hidden\"\r\n+    # POSITION_INDEPENDENT_CODE ON\r\n+    # CUDA_VISIBILITY_PRESET \"hidden\"\r\n     CUDA_SEPARABLE_COMPILATION ON\r\n )\r\n \r\n # set_property(TARGET controller_cu \r\n"
                },
                {
                    "date": 1691485667101,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n cmake_minimum_required(VERSION 3.15)\r\n \r\n project(franka_panda LANGUAGES CXX CUDA)\r\n \r\n-set(CMAKE_CXX_STANDARD 17)\r\n+set(CMAKE_CXX_STANDARD 17 -fPIC)\r\n \r\n \r\n # set(PYBIND11_CPP_STANDARD)\r\n # set (PYBIND11_PYTHON_VERSION \"3.8\")\r\n"
                },
                {
                    "date": 1691485676160,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n cmake_minimum_required(VERSION 3.15)\r\n \r\n project(franka_panda LANGUAGES CXX CUDA)\r\n \r\n-set(CMAKE_CXX_STANDARD 17 -fPIC)\r\n+set(CMAKE_CXX_STANDARD 17)\r\n \r\n \r\n # set(PYBIND11_CPP_STANDARD)\r\n # set (PYBIND11_PYTHON_VERSION \"3.8\")\r\n"
                },
                {
                    "date": 1691485690587,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n cmake_minimum_required(VERSION 3.15)\r\n \r\n-project(franka_panda LANGUAGES CXX CUDA)\r\n+project(franka_panda)\r\n \r\n set(CMAKE_CXX_STANDARD 17)\r\n \r\n \r\n"
                },
                {
                    "date": 1691485705381,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n cmake_minimum_required(VERSION 3.15)\r\n \r\n-project(franka_panda)\r\n+project(franka_panda LANGUAGES CXX CUDA)\r\n \r\n set(CMAKE_CXX_STANDARD 17)\r\n \r\n \r\n"
                },
                {
                    "date": 1691485710972,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,9 @@\n     src/cuda.cu\r\n )\r\n \r\n set_target_properties(controller_cu PROPERTIES \r\n-    # POSITION_INDEPENDENT_CODE ON\r\n+    POSITION_INDEPENDENT_CODE ON\r\n     # CUDA_VISIBILITY_PRESET \"hidden\"\r\n     CUDA_SEPARABLE_COMPILATION ON\r\n )\r\n \r\n"
                },
                {
                    "date": 1691485790501,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,9 @@\n     src/cuda.cu\r\n )\r\n \r\n set_target_properties(controller_cu PROPERTIES \r\n-    POSITION_INDEPENDENT_CODE ON\r\n+    # POSITION_INDEPENDENT_CODE ON\r\n     # CUDA_VISIBILITY_PRESET \"hidden\"\r\n     CUDA_SEPARABLE_COMPILATION ON\r\n )\r\n \r\n"
                },
                {
                    "date": 1691485798693,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,9 +58,10 @@\n add_library(controller MODULE\r\n     ${SRC_FILES}\r\n )\r\n \r\n-set_target_properties(controller PROPERTIES \r\n+set_target_properties(controller PROPERTIES\r\n+    POSITION_INDEPENDENT_CODE ON\r\n     CXX_VISIBILITY_PRESET \"hidden\"\r\n     INTERPROCEDURAL_OPTIMIZATION TRUE\r\n     PREFIX \"${PYTHON_MODULE_PREFIX}\"\r\n     SUFFIX \"${PYTHON_MODULE_EXTENSION}\"\r\n"
                },
                {
                    "date": 1691485824038,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,9 @@\n     src/cuda.cu\r\n )\r\n \r\n set_target_properties(controller_cu PROPERTIES \r\n-    # POSITION_INDEPENDENT_CODE ON\r\n+    POSITION_INDEPENDENT_CODE ON\r\n     # CUDA_VISIBILITY_PRESET \"hidden\"\r\n     CUDA_SEPARABLE_COMPILATION ON\r\n )\r\n \r\n@@ -58,10 +58,9 @@\n add_library(controller MODULE\r\n     ${SRC_FILES}\r\n )\r\n \r\n-set_target_properties(controller PROPERTIES\r\n-    POSITION_INDEPENDENT_CODE ON\r\n+set_target_properties(controller PROPERTIES \r\n     CXX_VISIBILITY_PRESET \"hidden\"\r\n     INTERPROCEDURAL_OPTIMIZATION TRUE\r\n     PREFIX \"${PYTHON_MODULE_PREFIX}\"\r\n     SUFFIX \"${PYTHON_MODULE_EXTENSION}\"\r\n"
                },
                {
                    "date": 1691486016523,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n cmake_minimum_required(VERSION 3.15)\r\n \r\n project(franka_panda LANGUAGES CXX CUDA)\r\n \r\n+set(POSITION_INDEPENDENT_CODE ON)\r\n set(CMAKE_CXX_STANDARD 17)\r\n \r\n \r\n # set(PYBIND11_CPP_STANDARD)\r\n@@ -46,9 +47,9 @@\n     src/cuda.cu\r\n )\r\n \r\n set_target_properties(controller_cu PROPERTIES \r\n-    POSITION_INDEPENDENT_CODE ON\r\n+    # POSITION_INDEPENDENT_CODE ON\r\n     # CUDA_VISIBILITY_PRESET \"hidden\"\r\n     CUDA_SEPARABLE_COMPILATION ON\r\n )\r\n \r\n"
                },
                {
                    "date": 1691486042335,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n cmake_minimum_required(VERSION 3.15)\r\n \r\n project(franka_panda LANGUAGES CXX CUDA)\r\n \r\n-set(POSITION_INDEPENDENT_CODE ON)\r\n+# set(POSITION_INDEPENDENT_CODE ON)\r\n set(CMAKE_CXX_STANDARD 17)\r\n \r\n \r\n # set(PYBIND11_CPP_STANDARD)\r\n"
                },
                {
                    "date": 1691486152745,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,8 +10,9 @@\n # set (PYBIND11_PYTHON_VERSION \"3.8\")\r\n enable_language(CUDA)\r\n \r\n find_package(Eigen3 3.3 REQUIRED)\r\n+find_package(CUDA REQUIRED)\r\n find_package(OpenGL REQUIRED)\r\n find_package(GLEW REQUIRED)\r\n find_package(pybind11 REQUIRED)\r\n # find_package (X11)\r\n@@ -47,9 +48,9 @@\n     src/cuda.cu\r\n )\r\n \r\n set_target_properties(controller_cu PROPERTIES \r\n-    # POSITION_INDEPENDENT_CODE ON\r\n+    POSITION_INDEPENDENT_CODE ON\r\n     # CUDA_VISIBILITY_PRESET \"hidden\"\r\n     CUDA_SEPARABLE_COMPILATION ON\r\n )\r\n \r\n"
                },
                {
                    "date": 1691486172543,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,10 @@\n     /usr/local/cuda/include\r\n )\r\n \r\n link_directories(\r\n-    /usr/include/python3.8 \r\n+    /usr/include/python3.8\r\n+    /usr/local/cuda/lib64\r\n )\r\n message(STATUS \"PYTHON ${PYTHON_VERSION}\")\r\n message(\"------------------------------------\")\r\n # for pybind11\r\n"
                },
                {
                    "date": 1691545599494,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,8 +59,9 @@\n             #  PROPERTY CUDA_SEPARABLE_COMPILATION ON)\r\n \r\n add_library(controller MODULE\r\n     ${SRC_FILES}\r\n+    src/cuda.cu\r\n )\r\n \r\n set_target_properties(controller PROPERTIES \r\n     CXX_VISIBILITY_PRESET \"hidden\"\r\n"
                },
                {
                    "date": 1691545749541,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,80 +1,20 @@\n-cmake_minimum_required(VERSION 3.15)\r\n+cmake_minimum_required(VERSION 2.8)\r\n+find_package(CUDA)\r\n+find_package(PythonLibs 3.8 REQUIRED)\r\n \r\n-project(franka_panda LANGUAGES CXX CUDA)\r\n+include_directories(${PYTHON_INCLUDE_DIRS})\r\n \r\n-# set(POSITION_INDEPENDENT_CODE ON)\r\n-set(CMAKE_CXX_STANDARD 17)\r\n+set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -std=c++11\")\r\n \r\n-\r\n-# set(PYBIND11_CPP_STANDARD)\r\n-# set (PYBIND11_PYTHON_VERSION \"3.8\")\r\n-enable_language(CUDA)\r\n-\r\n-find_package(Eigen3 3.3 REQUIRED)\r\n-find_package(CUDA REQUIRED)\r\n-find_package(OpenGL REQUIRED)\r\n-find_package(GLEW REQUIRED)\r\n-find_package(pybind11 REQUIRED)\r\n-# find_package (X11)\r\n-\r\n-set(SRC_FILES\r\n+cuda_add_library(gpu_library SHARED\r\n     src/controller.cpp    \r\n     src/robotmodel.cpp\r\n-    src/trajectory.cpp    \r\n-)\r\n-\r\n-\r\n-\r\n-message(\"------------------------------------\")\r\n-# include(\"${CMAKE_CURRENT_SOURCE_DIR}/../pybind11/tools/pybind11Common.cmake\")\r\n-include_directories(\r\n-    include\r\n-    ${EIGEN3_INCLUDE_DIRS}\r\n-    ${GLEW_INCLUDE_DIRS}\r\n-    /usr/include/python3.8  # for pybind11\r\n-    # /home/kist/anaconda3/envs/rl/include/python3.8\r\n-    /usr/local/cuda-11.6\r\n-    /usr/local/cuda\r\n-    /usr/local/cuda/include\r\n-)\r\n-\r\n-link_directories(\r\n-    /usr/include/python3.8\r\n-    /usr/local/cuda/lib64\r\n-)\r\n-message(STATUS \"PYTHON ${PYTHON_VERSION}\")\r\n-message(\"------------------------------------\")\r\n-# for pybind11\r\n-add_library(controller_cu STATIC\r\n+    src/trajectory.cpp\r\n     src/cuda.cu\r\n-)\r\n+  )\r\n \r\n-set_target_properties(controller_cu PROPERTIES \r\n-    POSITION_INDEPENDENT_CODE ON\r\n-    # CUDA_VISIBILITY_PRESET \"hidden\"\r\n-    CUDA_SEPARABLE_COMPILATION ON\r\n-)\r\n+target_link_libraries(gpu_library\r\n+  ${PYTHON_LIBRARIES}\r\n+  cudart)\r\n \r\n-# set_property(TARGET controller_cu \r\n-            #  PROPERTY CUDA_SEPARABLE_COMPILATION ON)\r\n-\r\n-add_library(controller MODULE\r\n-    ${SRC_FILES}\r\n-    src/cuda.cu\r\n-)\r\n-\r\n-set_target_properties(controller PROPERTIES \r\n-    CXX_VISIBILITY_PRESET \"hidden\"\r\n-    INTERPROCEDURAL_OPTIMIZATION TRUE\r\n-    PREFIX \"${PYTHON_MODULE_PREFIX}\"\r\n\\ No newline at end of file\n-    SUFFIX \"${PYTHON_MODULE_EXTENSION}\"\r\n-)\r\n-\r\n-target_link_libraries(controller PRIVATE controller_cu)\r\n-\r\n-target_link_libraries(controller PRIVATE pybind11::module\r\n-    -lrbdl\r\n-    -lrbdl_urdfreader\r\n-        -lpython3.8\r\n-        Eigen3::Eigen\r\n-    )\n+set_target_properties(gpu_library PROPERTIES PREFIX \"\")\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691545782523,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,20 @@\n include_directories(${PYTHON_INCLUDE_DIRS})\r\n \r\n set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -std=c++11\")\r\n \r\n+include_directories(\r\n+    include\r\n+    ${EIGEN3_INCLUDE_DIRS}\r\n+    ${GLEW_INCLUDE_DIRS}\r\n+    /usr/include/python3.8  # for pybind11\r\n+    # /home/kist/anaconda3/envs/rl/include/python3.8\r\n+    /usr/local/cuda-11.6\r\n+    /usr/local/cuda\r\n+    /usr/local/cuda/include\r\n+    /usr/local/cuda/lib64\r\n+)\r\n+\r\n cuda_add_library(gpu_library SHARED\r\n     src/controller.cpp    \r\n     src/robotmodel.cpp\r\n     src/trajectory.cpp\r\n"
                },
                {
                    "date": 1691545863781,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,5 +28,16 @@\n target_link_libraries(gpu_library\r\n   ${PYTHON_LIBRARIES}\r\n   cudart)\r\n \r\n-set_target_properties(gpu_library PROPERTIES PREFIX \"\")\n\\ No newline at end of file\n+set_target_properties(gpu_library PROPERTIES PREFIX \"\"\r\n+-lrbdl\r\n+    -lrbdl_urdfreader\r\n+        -lpython3.8\r\n+        Eigen3::Eigen)\r\n+\r\n+# target_link_libraries(controller PRIVATE pybind11::module\r\n+#     -lrbdl\r\n+#     -lrbdl_urdfreader\r\n+#         -lpython3.8\r\n+#         Eigen3::Eigen\r\n+#     )\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691546033928,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,16 +26,16 @@\n   )\r\n \r\n target_link_libraries(gpu_library\r\n   ${PYTHON_LIBRARIES}\r\n-  cudart)\r\n-\r\n-set_target_properties(gpu_library PROPERTIES PREFIX \"\"\r\n--lrbdl\r\n+  -lcudart\r\n+  -lrbdl\r\n     -lrbdl_urdfreader\r\n         -lpython3.8\r\n         Eigen3::Eigen)\r\n \r\n+set_target_properties(gpu_library PROPERTIES PREFIX \"\")\r\n+\r\n # target_link_libraries(controller PRIVATE pybind11::module\r\n #     -lrbdl\r\n #     -lrbdl_urdfreader\r\n #         -lpython3.8\r\n"
                },
                {
                    "date": 1691546059240,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,12 @@\n \r\n include_directories(${PYTHON_INCLUDE_DIRS})\r\n \r\n set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -std=c++11\")\r\n+enable_language(CUDA)\r\n \r\n+find_package(Eigen3 3.3 REQUIRED)\r\n+find_package(CUDA REQUIRED)\r\n include_directories(\r\n     include\r\n     ${EIGEN3_INCLUDE_DIRS}\r\n     ${GLEW_INCLUDE_DIRS}\r\n"
                },
                {
                    "date": 1691546111662,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,5 +42,29 @@\n #     -lrbdl\r\n #     -lrbdl_urdfreader\r\n #         -lpython3.8\r\n #         Eigen3::Eigen\r\n-#     )\n\\ No newline at end of file\n+#     )\r\n+\r\n+#-------------------------------------------------------------------#\r\n+# Configuration summary\r\n+#-------------------------------------------------------------------#\r\n+message(\"//===================================================\")\r\n+message(\"  ${PROJECT_NAME} build configuration:\")\r\n+message(\"//===================================================\")\r\n+message(\"  CUDA compiler ID      : ${CMAKE_CUDA_COMPILER_ID}\")\r\n+message(\"  CUDA compiler Version : ${CMAKE_CUDA_COMPILER_VERSION}\")\r\n+message(\"  C++ Compiler : ${CMAKE_CXX_COMPILER_ID} \"\r\n+  \"${CMAKE_CXX_COMPILER_VERSION} \"\r\n+  \"${CMAKE_CXX_COMPILER_WRAPPER}\")\r\n+message(\"    ${CMAKE_CXX_COMPILER}\")\r\n+message(\"  CUDA Compiler      : ${CMAKE_CUDA_COMPILER}\")\r\n+message(\"  CUDA Compiler exec : ${CUDA_NVCC_EXECUTABLE}\")\r\n+message(\"  CUDA Compile flags : ${CMAKE_CUDA_FLAGS}\")\r\n+message(\"  CUDA toolkit inc   : ${CMAKE_CUDA_TOOLKIT_INCLUDE_DIRECTORIES}\")\r\n+message(\"\")\r\n+message(\"  Python3_found       : ${Python3_FOUND}\")\r\n+message(\"  Python3 version     : ${Python3_VERSION}\")\r\n+message(\"  Python3 interpreter : ${Python3_EXECUTABLE}\")\r\n+message(\"  Python3 interp. Id  : ${Python3_INTERPRETER_ID}\")\r\n+message(\"  Python3_INCLUDE_DIRS: ${Python3_INCLUDE_DIRS}\")\r\n+message(\"  Python3_LIBRARY_DIRS: ${Python3_LIBRARY_DIRS}\")\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691546263604,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,15 +1,33 @@\n-cmake_minimum_required(VERSION 2.8)\r\n-find_package(CUDA)\r\n-find_package(PythonLibs 3.8 REQUIRED)\r\n+cmake_minimum_required(VERSION 3.15)\r\n \r\n-include_directories(${PYTHON_INCLUDE_DIRS})\r\n+project(franka_panda LANGUAGES CXX CUDA)\r\n \r\n-set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -std=c++11\")\r\n+# set(POSITION_INDEPENDENT_CODE ON)\r\n+set(CMAKE_CXX_STANDARD 17)\r\n+\r\n+\r\n+# set(PYBIND11_CPP_STANDARD)\r\n+# set (PYBIND11_PYTHON_VERSION \"3.8\")\r\n enable_language(CUDA)\r\n \r\n find_package(Eigen3 3.3 REQUIRED)\r\n find_package(CUDA REQUIRED)\r\n+find_package(OpenGL REQUIRED)\r\n+find_package(GLEW REQUIRED)\r\n+find_package(pybind11 REQUIRED)\r\n+# find_package (X11)\r\n+\r\n+set(SRC_FILES\r\n+    src/controller.cpp    \r\n+    src/robotmodel.cpp\r\n+    src/trajectory.cpp    \r\n+)\r\n+\r\n+\r\n+\r\n+message(\"------------------------------------\")\r\n+# include(\"${CMAKE_CURRENT_SOURCE_DIR}/../pybind11/tools/pybind11Common.cmake\")\r\n include_directories(\r\n     include\r\n     ${EIGEN3_INCLUDE_DIRS}\r\n     ${GLEW_INCLUDE_DIRS}\r\n@@ -17,54 +35,45 @@\n     # /home/kist/anaconda3/envs/rl/include/python3.8\r\n     /usr/local/cuda-11.6\r\n     /usr/local/cuda\r\n     /usr/local/cuda/include\r\n+)\r\n+\r\n+link_directories(\r\n+    /usr/include/python3.8\r\n     /usr/local/cuda/lib64\r\n )\r\n-\r\n-cuda_add_library(gpu_library SHARED\r\n-    src/controller.cpp    \r\n-    src/robotmodel.cpp\r\n-    src/trajectory.cpp\r\n+message(STATUS \"PYTHON ${PYTHON_VERSION}\")\r\n+message(\"------------------------------------\")\r\n+# for pybind11\r\n+add_library(controller_cu STATIC\r\n     src/cuda.cu\r\n-  )\r\n+)\r\n \r\n-target_link_libraries(gpu_library\r\n-  ${PYTHON_LIBRARIES}\r\n-  -lcudart\r\n-  -lrbdl\r\n-    -lrbdl_urdfreader\r\n-        -lpython3.8\r\n-        Eigen3::Eigen)\r\n+set_target_properties(controller_cu PROPERTIES \r\n+    POSITION_INDEPENDENT_CODE ON\r\n+    # CUDA_VISIBILITY_PRESET \"hidden\"\r\n+    CUDA_SEPARABLE_COMPILATION ON\r\n+)\r\n \r\n-set_target_properties(gpu_library PROPERTIES PREFIX \"\")\r\n+# set_property(TARGET controller_cu \r\n+            #  PROPERTY CUDA_SEPARABLE_COMPILATION ON)\r\n \r\n-# target_link_libraries(controller PRIVATE pybind11::module\r\n-#     -lrbdl\r\n-#     -lrbdl_urdfreader\r\n-#         -lpython3.8\r\n-#         Eigen3::Eigen\r\n-#     )\r\n+add_library(controller MODULE\r\n+    ${SRC_FILES}\r\n+)\r\n \r\n-#-------------------------------------------------------------------#\r\n-# Configuration summary\r\n-#-------------------------------------------------------------------#\r\n-message(\"//===================================================\")\r\n\\ No newline at end of file\n-message(\"  ${PROJECT_NAME} build configuration:\")\r\n-message(\"//===================================================\")\r\n-message(\"  CUDA compiler ID      : ${CMAKE_CUDA_COMPILER_ID}\")\r\n-message(\"  CUDA compiler Version : ${CMAKE_CUDA_COMPILER_VERSION}\")\r\n-message(\"  C++ Compiler : ${CMAKE_CXX_COMPILER_ID} \"\r\n-  \"${CMAKE_CXX_COMPILER_VERSION} \"\r\n-  \"${CMAKE_CXX_COMPILER_WRAPPER}\")\r\n-message(\"    ${CMAKE_CXX_COMPILER}\")\r\n-message(\"  CUDA Compiler      : ${CMAKE_CUDA_COMPILER}\")\r\n-message(\"  CUDA Compiler exec : ${CUDA_NVCC_EXECUTABLE}\")\r\n-message(\"  CUDA Compile flags : ${CMAKE_CUDA_FLAGS}\")\r\n-message(\"  CUDA toolkit inc   : ${CMAKE_CUDA_TOOLKIT_INCLUDE_DIRECTORIES}\")\r\n-message(\"\")\r\n-message(\"  Python3_found       : ${Python3_FOUND}\")\r\n-message(\"  Python3 version     : ${Python3_VERSION}\")\r\n-message(\"  Python3 interpreter : ${Python3_EXECUTABLE}\")\r\n-message(\"  Python3 interp. Id  : ${Python3_INTERPRETER_ID}\")\r\n-message(\"  Python3_INCLUDE_DIRS: ${Python3_INCLUDE_DIRS}\")\r\n-message(\"  Python3_LIBRARY_DIRS: ${Python3_LIBRARY_DIRS}\")\n+set_target_properties(controller PROPERTIES \r\n+    CXX_VISIBILITY_PRESET \"hidden\"\r\n+    INTERPROCEDURAL_OPTIMIZATION TRUE\r\n+    PREFIX \"${PYTHON_MODULE_PREFIX}\"\r\n+    SUFFIX \"${PYTHON_MODULE_EXTENSION}\"\r\n+)\r\n+\r\n+target_link_libraries(controller PRIVATE controller_cu)\r\n+\r\n+target_link_libraries(controller PRIVATE pybind11::module\r\n+    -lrbdl\r\n+    -lrbdl_urdfreader\r\n+        -lpython3.8\r\n+        Eigen3::Eigen\r\n+    )\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691562085694,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,9 +44,9 @@\n )\r\n message(STATUS \"PYTHON ${PYTHON_VERSION}\")\r\n message(\"------------------------------------\")\r\n # for pybind11\r\n-add_library(controller_cu STATIC\r\n+cuda_add_library(controller_cu STATIC\r\n     src/cuda.cu\r\n )\r\n \r\n set_target_properties(controller_cu PROPERTIES \r\n"
                },
                {
                    "date": 1691562197620,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,8 +44,12 @@\n )\r\n message(STATUS \"PYTHON ${PYTHON_VERSION}\")\r\n message(\"------------------------------------\")\r\n # for pybind11\r\n+# add_library(controller_cu STATIC\r\n+#     src/cuda.cu\r\n+# )\r\n+\r\n cuda_add_library(controller_cu STATIC\r\n     src/cuda.cu\r\n )\r\n \r\n"
                },
                {
                    "date": 1691562217111,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,9 +47,9 @@\n # for pybind11\r\n # add_library(controller_cu STATIC\r\n #     src/cuda.cu\r\n # )\r\n-\r\n+set(CMAKE_CXX_STANDARD 17 -fPIC)\r\n cuda_add_library(controller_cu STATIC\r\n     src/cuda.cu\r\n )\r\n \r\n@@ -60,9 +60,9 @@\n )\r\n \r\n # set_property(TARGET controller_cu \r\n             #  PROPERTY CUDA_SEPARABLE_COMPILATION ON)\r\n-\r\n+            set(CMAKE_CXX_STANDARD 17)\r\n add_library(controller MODULE\r\n     ${SRC_FILES}\r\n )\r\n \r\n"
                },
                {
                    "date": 1691562239549,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,9 +47,9 @@\n # for pybind11\r\n # add_library(controller_cu STATIC\r\n #     src/cuda.cu\r\n # )\r\n-set(CMAKE_CXX_STANDARD 17 -fPIC)\r\n+\r\n cuda_add_library(controller_cu STATIC\r\n     src/cuda.cu\r\n )\r\n \r\n@@ -60,9 +60,9 @@\n )\r\n \r\n # set_property(TARGET controller_cu \r\n             #  PROPERTY CUDA_SEPARABLE_COMPILATION ON)\r\n-            set(CMAKE_CXX_STANDARD 17)\r\n+\r\n add_library(controller MODULE\r\n     ${SRC_FILES}\r\n )\r\n \r\n"
                },
                {
                    "date": 1691562312114,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,12 +48,15 @@\n # add_library(controller_cu STATIC\r\n #     src/cuda.cu\r\n # )\r\n \r\n-cuda_add_library(controller_cu STATIC\r\n-    src/cuda.cu\r\n-)\r\n+cuda_compile( DENSE_TRACKING_O src/cuda.cu ) \r\n+cuda_add_library(controller_cu  ${DENSE_TRACKING_O})\r\n \r\n+# cuda_add_library(controller_cu STATIC\r\n+#     src/cuda.cu\r\n+# )\r\n+\r\n set_target_properties(controller_cu PROPERTIES \r\n     POSITION_INDEPENDENT_CODE ON\r\n     # CUDA_VISIBILITY_PRESET \"hidden\"\r\n     CUDA_SEPARABLE_COMPILATION ON\r\n"
                },
                {
                    "date": 1691562400094,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,14 +48,14 @@\n # add_library(controller_cu STATIC\r\n #     src/cuda.cu\r\n # )\r\n \r\n-cuda_compile( DENSE_TRACKING_O src/cuda.cu ) \r\n-cuda_add_library(controller_cu  ${DENSE_TRACKING_O})\r\n+# cuda_compile( DENSE_TRACKING_O src/cuda.cu ) \r\n+# cuda_add_library(controller_cu  ${DENSE_TRACKING_O})\r\n \r\n-# cuda_add_library(controller_cu STATIC\r\n-#     src/cuda.cu\r\n-# )\r\n+cuda_add_library(controller_cu STATIC\r\n+    src/cuda.cu\r\n+)\r\n \r\n set_target_properties(controller_cu PROPERTIES \r\n     POSITION_INDEPENDENT_CODE ON\r\n     # CUDA_VISIBILITY_PRESET \"hidden\"\r\n"
                },
                {
                    "date": 1691562442633,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,10 @@\n project(franka_panda LANGUAGES CXX CUDA)\r\n \r\n # set(POSITION_INDEPENDENT_CODE ON)\r\n set(CMAKE_CXX_STANDARD 17)\r\n+set( CMAKE_CXX_FLAGS  \"${CMAKE_CXX_FLAGS} --std=c++11 -O3 -fPIC\" )\r\n+set( CMAKE_C_FLAGS  \"${CMAKE_C_FLAGS} -O3 -fPIC\" )\r\n \r\n \r\n # set(PYBIND11_CPP_STANDARD)\r\n # set (PYBIND11_PYTHON_VERSION \"3.8\")\r\n"
                },
                {
                    "date": 1691562730744,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,34 +1,15 @@\n-cmake_minimum_required(VERSION 3.15)\r\n+cmake_minimum_required(VERSION 3.18)\r\n+project(MyLibrary)\r\n \r\n-project(franka_panda LANGUAGES CXX CUDA)\r\n-\r\n-# set(POSITION_INDEPENDENT_CODE ON)\r\n-set(CMAKE_CXX_STANDARD 17)\r\n-set( CMAKE_CXX_FLAGS  \"${CMAKE_CXX_FLAGS} --std=c++11 -O3 -fPIC\" )\r\n-set( CMAKE_C_FLAGS  \"${CMAKE_C_FLAGS} -O3 -fPIC\" )\r\n-\r\n-\r\n-# set(PYBIND11_CPP_STANDARD)\r\n-# set (PYBIND11_PYTHON_VERSION \"3.8\")\r\n-enable_language(CUDA)\r\n-\r\n-find_package(Eigen3 3.3 REQUIRED)\r\n+# Find CUDA package\r\n find_package(CUDA REQUIRED)\r\n-find_package(OpenGL REQUIRED)\r\n-find_package(GLEW REQUIRED)\r\n-find_package(pybind11 REQUIRED)\r\n-# find_package (X11)\r\n \r\n-set(SRC_FILES\r\n-    src/controller.cpp    \r\n-    src/robotmodel.cpp\r\n-    src/trajectory.cpp    \r\n-)\r\n+# Set C++ standard to C++11 or higher\r\n+set(CMAKE_CXX_STANDARD 11)\r\n \r\n-\r\n-\r\n-message(\"------------------------------------\")\r\n+# Add the directory containing the header files\r\n+# include_directories(include)\r\n # include(\"${CMAKE_CURRENT_SOURCE_DIR}/../pybind11/tools/pybind11Common.cmake\")\r\n include_directories(\r\n     include\r\n     ${EIGEN3_INCLUDE_DIRS}\r\n@@ -39,50 +20,27 @@\n     /usr/local/cuda\r\n     /usr/local/cuda/include\r\n )\r\n \r\n+# Add the directory containing CUDA header files\r\n+include_directories(${CUDA_INCLUDE_DIRS})\r\n link_directories(\r\n     /usr/include/python3.8\r\n     /usr/local/cuda/lib64\r\n )\r\n-message(STATUS \"PYTHON ${PYTHON_VERSION}\")\r\n-message(\"------------------------------------\")\r\n-# for pybind11\r\n-# add_library(controller_cu STATIC\r\n-#     src/cuda.cu\r\n-# )\r\n \r\n-# cuda_compile( DENSE_TRACKING_O src/cuda.cu ) \r\n-# cuda_add_library(controller_cu  ${DENSE_TRACKING_O})\r\n-\r\n-cuda_add_library(controller_cu STATIC\r\n-    src/cuda.cu\r\n+# Add source files\r\n+set(SOURCES\r\n+    src/main.cpp\r\n+    src/pybind_module.cpp\r\n+    src/cuda_code.cu\r\n )\r\n \r\n-set_target_properties(controller_cu PROPERTIES \r\n-    POSITION_INDEPENDENT_CODE ON\r\n-    # CUDA_VISIBILITY_PRESET \"hidden\"\r\n-    CUDA_SEPARABLE_COMPILATION ON\r\n-)\r\n+# Create a library from the sources\r\n+add_library(MyLibrary ${SOURCES})\r\n \r\n-# set_property(TARGET controller_cu \r\n-            #  PROPERTY CUDA_SEPARABLE_COMPILATION ON)\r\n+# Link CUDA libraries\r\n+target_link_libraries(MyLibrary PRIVATE ${CUDA_LIBRARIES})\r\n \r\n-add_library(controller MODULE\r\n-    ${SRC_FILES}\r\n-)\r\n-\r\n-set_target_properties(controller PROPERTIES \r\n-    CXX_VISIBILITY_PRESET \"hidden\"\r\n-    INTERPROCEDURAL_OPTIMIZATION TRUE\r\n-    PREFIX \"${PYTHON_MODULE_PREFIX}\"\r\n\\ No newline at end of file\n-    SUFFIX \"${PYTHON_MODULE_EXTENSION}\"\r\n-)\r\n-\r\n-target_link_libraries(controller PRIVATE controller_cu)\r\n-\r\n-target_link_libraries(controller PRIVATE pybind11::module\r\n-    -lrbdl\r\n-    -lrbdl_urdfreader\r\n-        -lpython3.8\r\n-        Eigen3::Eigen\r\n-    )\n+# Add PyBind11 dependency\r\n+add_subdirectory(pybind11)\r\n+target_link_libraries(MyLibrary PRIVATE pybind11::module)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691562832968,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,12 +28,18 @@\n     /usr/local/cuda/lib64\r\n )\r\n \r\n # Add source files\r\n+# set(SOURCES\r\n+#     src/main.cpp\r\n+#     src/pybind_module.cpp\r\n+#     src/cuda_code.cu\r\n+# )\r\n+\r\n set(SOURCES\r\n-    src/main.cpp\r\n-    src/pybind_module.cpp\r\n-    src/cuda_code.cu\r\n+    src/controller.cpp    \r\n+    src/robotmodel.cpp\r\n+    src/trajectory.cpp    \r\n )\r\n \r\n # Create a library from the sources\r\n add_library(MyLibrary ${SOURCES})\r\n"
                },
                {
                    "date": 1691562875304,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-cmake_minimum_required(VERSION 3.18)\r\n+cmake_minimum_required(VERSION 3.11)\r\n project(MyLibrary)\r\n \r\n # Find CUDA package\r\n find_package(CUDA REQUIRED)\r\n"
                },
                {
                    "date": 1691563139579,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,14 +3,15 @@\n \r\n # Find CUDA package\r\n find_package(CUDA REQUIRED)\r\n \r\n+# Find PyBind11 package\r\n+find_package(pybind11 REQUIRED)\r\n+\r\n # Set C++ standard to C++11 or higher\r\n set(CMAKE_CXX_STANDARD 11)\r\n \r\n # Add the directory containing the header files\r\n-# include_directories(include)\r\n-# include(\"${CMAKE_CURRENT_SOURCE_DIR}/../pybind11/tools/pybind11Common.cmake\")\r\n include_directories(\r\n     include\r\n     ${EIGEN3_INCLUDE_DIRS}\r\n     ${GLEW_INCLUDE_DIRS}\r\n@@ -20,22 +21,17 @@\n     /usr/local/cuda\r\n     /usr/local/cuda/include\r\n )\r\n \r\n+\r\n # Add the directory containing CUDA header files\r\n include_directories(${CUDA_INCLUDE_DIRS})\r\n link_directories(\r\n     /usr/include/python3.8\r\n     /usr/local/cuda/lib64\r\n )\r\n \r\n # Add source files\r\n-# set(SOURCES\r\n-#     src/main.cpp\r\n-#     src/pybind_module.cpp\r\n-#     src/cuda_code.cu\r\n-# )\r\n-\r\n set(SOURCES\r\n     src/controller.cpp    \r\n     src/robotmodel.cpp\r\n     src/trajectory.cpp    \r\n@@ -46,7 +42,9 @@\n \r\n # Link CUDA libraries\r\n target_link_libraries(MyLibrary PRIVATE ${CUDA_LIBRARIES})\r\n \r\n-# Add PyBind11 dependency\r\n-add_subdirectory(pybind11)\r\n-target_link_libraries(MyLibrary PRIVATE pybind11::module)\n\\ No newline at end of file\n+# Create Python module using PyBind11\r\n+pybind11_add_module(pybind_module src/pybind_module.cpp)\r\n+\r\n+# Link the MyLibrary library and the PyBind11 module\r\n+target_link_libraries(pybind_module PRIVATE MyLibrary)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691563162005,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,8 +43,8 @@\n # Link CUDA libraries\r\n target_link_libraries(MyLibrary PRIVATE ${CUDA_LIBRARIES})\r\n \r\n # Create Python module using PyBind11\r\n-pybind11_add_module(pybind_module src/pybind_module.cpp)\r\n+pybind11_add_module(pybind_module src/controller.cpp)\r\n \r\n # Link the MyLibrary library and the PyBind11 module\r\n target_link_libraries(pybind_module PRIVATE MyLibrary)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691563304588,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,11 @@\n     src/trajectory.cpp    \r\n )\r\n \r\n # Create a library from the sources\r\n-add_library(MyLibrary ${SOURCES})\r\n+# add_library(MyLibrary ${SOURCES})\r\n+add_library(MyLibrary SHARED ${SOURCES})\r\n+set_target_properties(MyLibrary PROPERTIES POSITION_INDEPENDENT_CODE ON)\r\n \r\n # Link CUDA libraries\r\n target_link_libraries(MyLibrary PRIVATE ${CUDA_LIBRARIES})\r\n \r\n"
                },
                {
                    "date": 1691563619840,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,8 +8,9 @@\n find_package(pybind11 REQUIRED)\r\n \r\n # Set C++ standard to C++11 or higher\r\n set(CMAKE_CXX_STANDARD 11)\r\n+set(CUDA_NVCC_FLAGS ${CUDA_NVCC_FLAGS};-Xcompiler -fPIC)\r\n \r\n # Add the directory containing the header files\r\n include_directories(\r\n     include\r\n@@ -27,8 +28,9 @@\n include_directories(${CUDA_INCLUDE_DIRS})\r\n link_directories(\r\n     /usr/include/python3.8\r\n     /usr/local/cuda/lib64\r\n+    /usr/lib/x86_64-linux-gnu\r\n )\r\n \r\n # Add source files\r\n set(SOURCES\r\n"
                },
                {
                    "date": 1691563814944,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,10 @@\n # Add source files\r\n set(SOURCES\r\n     src/controller.cpp    \r\n     src/robotmodel.cpp\r\n-    src/trajectory.cpp    \r\n+    src/trajectory.cpp\r\n+    src/cuda.cu\r\n )\r\n \r\n # Create a library from the sources\r\n # add_library(MyLibrary ${SOURCES})\r\n"
                },
                {
                    "date": 1691564082054,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,17 +22,8 @@\n     /usr/local/cuda\r\n     /usr/local/cuda/include\r\n )\r\n \r\n-\r\n-# Add the directory containing CUDA header files\r\n-include_directories(${CUDA_INCLUDE_DIRS})\r\n-link_directories(\r\n-    /usr/include/python3.8\r\n-    /usr/local/cuda/lib64\r\n-    /usr/lib/x86_64-linux-gnu\r\n-)\r\n-\r\n # Add source files\r\n set(SOURCES\r\n     src/controller.cpp    \r\n     src/robotmodel.cpp\r\n@@ -40,16 +31,15 @@\n     src/cuda.cu\r\n )\r\n \r\n # Create a library from the sources\r\n-# add_library(MyLibrary ${SOURCES})\r\n add_library(MyLibrary SHARED ${SOURCES})\r\n set_target_properties(MyLibrary PROPERTIES POSITION_INDEPENDENT_CODE ON)\r\n \r\n-# Link CUDA libraries\r\n-target_link_libraries(MyLibrary PRIVATE ${CUDA_LIBRARIES})\r\n-\r\n # Create Python module using PyBind11\r\n pybind11_add_module(pybind_module src/controller.cpp)\r\n \r\n # Link the MyLibrary library and the PyBind11 module\r\n-target_link_libraries(pybind_module PRIVATE MyLibrary)\n\\ No newline at end of file\n+target_link_libraries(pybind_module PRIVATE MyLibrary ${CUDA_LIBRARIES})\r\n+\r\n+# Link CUDA libraries\r\n+target_link_libraries(MyLibrary PRIVATE pybind11::module ${CUDA_LIBRARIES})\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691564212974,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,11 +25,11 @@\n \r\n # Add source files\r\n set(SOURCES\r\n     src/controller.cpp    \r\n+    src/cuda.cu\r\n     src/robotmodel.cpp\r\n     src/trajectory.cpp\r\n-    src/cuda.cu\r\n )\r\n \r\n # Create a library from the sources\r\n add_library(MyLibrary SHARED ${SOURCES})\r\n"
                },
                {
                    "date": 1691564300557,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n find_package(pybind11 REQUIRED)\r\n \r\n # Set C++ standard to C++11 or higher\r\n set(CMAKE_CXX_STANDARD 11)\r\n-set(CUDA_NVCC_FLAGS ${CUDA_NVCC_FLAGS};-Xcompiler -fPIC)\r\n+# set(CUDA_NVCC_FLAGS ${CUDA_NVCC_FLAGS};-Xcompiler -fPIC)\r\n \r\n # Add the directory containing the header files\r\n include_directories(\r\n     include\r\n@@ -31,9 +31,9 @@\n     src/trajectory.cpp\r\n )\r\n \r\n # Create a library from the sources\r\n-add_library(MyLibrary SHARED ${SOURCES})\r\n+cuda_add_library(MyLibrary SHARED ${SOURCES})\r\n set_target_properties(MyLibrary PROPERTIES POSITION_INDEPENDENT_CODE ON)\r\n \r\n # Create Python module using PyBind11\r\n pybind11_add_module(pybind_module src/controller.cpp)\r\n"
                },
                {
                    "date": 1691564335205,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,8 @@\n find_package(pybind11 REQUIRED)\r\n \r\n # Set C++ standard to C++11 or higher\r\n set(CMAKE_CXX_STANDARD 11)\r\n-# set(CUDA_NVCC_FLAGS ${CUDA_NVCC_FLAGS};-Xcompiler -fPIC)\r\n \r\n # Add the directory containing the header files\r\n include_directories(\r\n     include\r\n@@ -25,21 +24,17 @@\n \r\n # Add source files\r\n set(SOURCES\r\n     src/controller.cpp    \r\n-    src/cuda.cu\r\n     src/robotmodel.cpp\r\n     src/trajectory.cpp\r\n+    src/cuda.cu\r\n )\r\n \r\n-# Create a library from the sources\r\n+# Create a CUDA library from the sources\r\n cuda_add_library(MyLibrary SHARED ${SOURCES})\r\n-set_target_properties(MyLibrary PROPERTIES POSITION_INDEPENDENT_CODE ON)\r\n \r\n # Create Python module using PyBind11\r\n pybind11_add_module(pybind_module src/controller.cpp)\r\n \r\n # Link the MyLibrary library and the PyBind11 module\r\n-target_link_libraries(pybind_module PRIVATE MyLibrary ${CUDA_LIBRARIES})\r\n-\r\n\\ No newline at end of file\n-# Link CUDA libraries\r\n-target_link_libraries(MyLibrary PRIVATE pybind11::module ${CUDA_LIBRARIES})\n+target_link_libraries(pybind_module PRIVATE MyLibrary ${CUDA_LIBRARIES})\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691564470494,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,5 +36,16 @@\n # Create Python module using PyBind11\r\n pybind11_add_module(pybind_module src/controller.cpp)\r\n \r\n # Link the MyLibrary library and the PyBind11 module\r\n-target_link_libraries(pybind_module PRIVATE MyLibrary ${CUDA_LIBRARIES})\n\\ No newline at end of file\n+target_link_libraries(pybind_module PRIVATE MyLibrary ${CUDA_LIBRARIES}\r\n+-lrbdl\r\n+    -lrbdl_urdfreader\r\n+        -lpython3.8\r\n+        Eigen3::Eigen)\r\n+\r\n+# target_link_libraries(controller PRIVATE pybind11::module\r\n+#     -lrbdl\r\n+#     -lrbdl_urdfreader\r\n+#         -lpython3.8\r\n+#         Eigen3::Eigen\r\n+#     )\n\\ No newline at end of file\n"
                },
                {
                    "date": 1691564499416,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,8 +6,14 @@\n \r\n # Find PyBind11 package\r\n find_package(pybind11 REQUIRED)\r\n \r\n+find_package(Eigen3 3.3 REQUIRED)\r\n+# find_package(CUDA REQUIRED)\r\n+find_package(OpenGL REQUIRED)\r\n+find_package(GLEW REQUIRED)\r\n+# find_package(pybind11 REQUIRED)\r\n+\r\n # Set C++ standard to C++11 or higher\r\n set(CMAKE_CXX_STANDARD 11)\r\n \r\n # Add the directory containing the header files\r\n"
                },
                {
                    "date": 1691564681056,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,12 +39,12 @@\n # Create a CUDA library from the sources\r\n cuda_add_library(MyLibrary SHARED ${SOURCES})\r\n \r\n # Create Python module using PyBind11\r\n-pybind11_add_module(pybind_module src/controller.cpp)\r\n+pybind11_add_module(controller src/controller.cpp)\r\n \r\n # Link the MyLibrary library and the PyBind11 module\r\n-target_link_libraries(pybind_module PRIVATE MyLibrary ${CUDA_LIBRARIES}\r\n+target_link_libraries(controller PRIVATE MyLibrary ${CUDA_LIBRARIES}\r\n -lrbdl\r\n     -lrbdl_urdfreader\r\n         -lpython3.8\r\n         Eigen3::Eigen)\r\n"
                },
                {
                    "date": 1691565374911,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,16 +39,19 @@\n # Create a CUDA library from the sources\r\n cuda_add_library(MyLibrary SHARED ${SOURCES})\r\n \r\n # Create Python module using PyBind11\r\n-pybind11_add_module(controller src/controller.cpp)\r\n+# pybind11_add_module(controller src/controller.cpp)\r\n \r\n+add_library(controller MODULE src/controller.cpp)\r\n+target_link_libraries(controller PRIVATE MyLibrary ${CUDA_LIBRARIES} -lrbdl -lrbdl_urdfreader -lpython3.8 Eigen3::Eigen)\r\n+\r\n # Link the MyLibrary library and the PyBind11 module\r\n-target_link_libraries(controller PRIVATE MyLibrary ${CUDA_LIBRARIES}\r\n--lrbdl\r\n-    -lrbdl_urdfreader\r\n-        -lpython3.8\r\n-        Eigen3::Eigen)\r\n+# target_link_libraries(controller PRIVATE MyLibrary ${CUDA_LIBRARIES}\r\n+# -lrbdl\r\n+#     -lrbdl_urdfreader\r\n+#         -lpython3.8\r\n+#         Eigen3::Eigen)\r\n \r\n # target_link_libraries(controller PRIVATE pybind11::module\r\n #     -lrbdl\r\n #     -lrbdl_urdfreader\r\n"
                },
                {
                    "date": 1691565389303,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,11 @@\n     src/cuda.cu\r\n )\r\n \r\n # Create a CUDA library from the sources\r\n-cuda_add_library(MyLibrary SHARED ${SOURCES})\r\n+# cuda_add_library(MyLibrary SHARED ${SOURCES})\r\n+add_library(MyLibrary SHARED ${SOURCES})\r\n+target_link_libraries(MyLibrary PRIVATE ${CUDA_LIBRARIES} -lrbdl -lrbdl_urdfreader -lpython3.8 Eigen3::Eigen)\r\n \r\n # Create Python module using PyBind11\r\n # pybind11_add_module(controller src/controller.cpp)\r\n \r\n"
                },
                {
                    "date": 1691565483795,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,11 +36,11 @@\n     src/cuda.cu\r\n )\r\n \r\n # Create a CUDA library from the sources\r\n-# cuda_add_library(MyLibrary SHARED ${SOURCES})\r\n-add_library(MyLibrary SHARED ${SOURCES})\r\n-target_link_libraries(MyLibrary PRIVATE ${CUDA_LIBRARIES} -lrbdl -lrbdl_urdfreader -lpython3.8 Eigen3::Eigen)\r\n+cuda_add_library(MyLibrary SHARED ${SOURCES})\r\n+# add_library(MyLibrary SHARED ${SOURCES})\r\n+# target_link_libraries(MyLibrary PRIVATE ${CUDA_LIBRARIES} -lrbdl -lrbdl_urdfreader -lpython3.8 Eigen3::Eigen)\r\n \r\n # Create Python module using PyBind11\r\n # pybind11_add_module(controller src/controller.cpp)\r\n \r\n"
                },
                {
                    "date": 1692684369198,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,62 +1,117 @@\n-cmake_minimum_required(VERSION 3.11)\r\n-project(MyLibrary)\r\n+cmake_minimum_required(VERSION 3.0.0)\r\n+project(dual_arm_4 VERSION 0.1.0)\r\n+#cd build\r\n+#cmake -D CMAKE_BUILD_TYPE=release ..\r\n+#make\r\n \r\n-# Find CUDA package\r\n-find_package(CUDA REQUIRED)\r\n \r\n-# Find PyBind11 package\r\n-find_package(pybind11 REQUIRED)\r\n+set(CPACK_PROJECT_NAME ${PROJECT_NAME})\r\n+set(CPACK_PROJECT_VERSION ${PROJECT_VERSION})\r\n \r\n-find_package(Eigen3 3.3 REQUIRED)\r\n-# find_package(CUDA REQUIRED)\r\n-find_package(OpenGL REQUIRED)\r\n-find_package(GLEW REQUIRED)\r\n-# find_package(pybind11 REQUIRED)\r\n+#===========================================\r\n+find_package (Eigen3 3.3 REQUIRED)\r\n+message(STATUS \"Eigen3 : \" ${EIGEN3_INCLUDE_DIR})\r\n+message(STATUS \"current : \" ${CMAKE_CURRENT_SOURCE_DIR})\r\n \r\n-# Set C++ standard to C++11 or higher\r\n-set(CMAKE_CXX_STANDARD 11)\r\n+set(USE_GL 1) #USE_GL==0 does not work for 131 version since there is no 'nogl' file\r\n+set(BIN_NAME ${PROJECT_NAME})\r\n \r\n-# Add the directory containing the header files\r\n+link_directories(${CMAKE_SOURCE_DIR}/mujoco200/)\r\n+find_library(GLFW libglfw.so.3 HINTS ${CMAKE_SOURCE_DIR}/mujoco200/bin)\r\n+message(STATUS \"GLFW lib found at: \" ${GLFW})\r\n+\r\n+#Show path to MuJoCo \r\n+message(STATUS \"MuJoCo path: \" ${CMAKE_SOURCE_DIR}/mujoco200/)\r\n+#Finding main mujoco library\r\n+if(${USE_GL})\r\n+file(GLOB LIB_MUJOCO mujoco200/bin/libmujoco[0-9][0-9][0-9].so)\r\n+else()\r\n+file(GLOB LIB_MUJOCO mujoco200/bin/libmujoco[0-9][0-9][0-9]nogl.so)\r\n+endif()\r\n+#Show mujoco library found\r\n+message(STATUS \"MuJoCo lib found at: \" ${LIB_MUJOCO})\r\n+enable_language(CUDA)\r\n+#============================\r\n+\r\n include_directories(\r\n-    include\r\n-    ${EIGEN3_INCLUDE_DIRS}\r\n-    ${GLEW_INCLUDE_DIRS}\r\n-    /usr/include/python3.8  # for pybind11\r\n-    # /home/kist/anaconda3/envs/rl/include/python3.8\r\n+    ${CMAKE_CURRENT_SOURCE_DIR}/include\r\n+    ${CMAKE_CURRENT_SOURCE_DIR}/mujoco200/include\r\n+    /usr/local/include/rbdl\r\n+    /usr/local/lib\r\n     /usr/local/cuda-11.6\r\n     /usr/local/cuda\r\n     /usr/local/cuda/include\r\n\\ No newline at end of file\n+    #$ENV{EIGEN3_INCLUDE_DIR}\r\n+    \r\n )\r\n \r\n-# Add source files\r\n-set(SOURCES\r\n-    src/controller.cpp    \r\n+add_library(mppi_lib\r\n+    src/controller.cpp \r\n+    src/cuda.cu\r\n     src/robotmodel.cpp\r\n     src/trajectory.cpp\r\n-    src/cuda.cu\r\n+    src/quadraticprogram.cpp\r\n+    # src/mppi.cpp\r\n+    mujoco200/include/uitools.c    \r\n )\r\n \r\n-# Create a CUDA library from the sources\r\n-cuda_add_library(MyLibrary SHARED ${SOURCES})\r\n-# add_library(MyLibrary SHARED ${SOURCES})\r\n-# target_link_libraries(MyLibrary PRIVATE ${CUDA_LIBRARIES} -lrbdl -lrbdl_urdfreader -lpython3.8 Eigen3::Eigen)\r\n+# add_executable(mppi ${COM_SRC})\r\n+# add_executable(simulation\r\n+#     src/simulate.cpp\r\n+#     mujoco200/include/mjxmacro.h\r\n+#     mujoco200/include/uitools.h\r\n+# )\r\n+#add_executable(${PROJECT_NAME} simulate/main.cc)\r\n+target_link_libraries(mppi_lib\r\n+-lrbdl\r\n+-lrbdl_urdfreader\r\n+-lpthread\r\n+-lqpOASES\r\n+${LIB_MUJOCO}\r\n+${GLFW}\r\n+libglew.so\r\n+libGL.so\r\n+-lcudart\r\n+-lcurand\r\n+# libcurand.so\r\n+# libcurand.so.10\r\n+)\r\n+set_target_properties( mppi_lib\r\n+                       PROPERTIES CUDA_SEPARABLE_COMPILATION ON)\r\n \r\n-# Create Python module using PyBind11\r\n-# pybind11_add_module(controller src/controller.cpp)\r\n+add_executable(mppi\r\n+    src/simulate.cpp\r\n+    mujoco200/include/mjxmacro.h\r\n+    mujoco200/include/uitools.h\r\n+)\r\n \r\n-add_library(controller MODULE src/controller.cpp)\r\n-target_link_libraries(controller PRIVATE MyLibrary ${CUDA_LIBRARIES} -lrbdl -lrbdl_urdfreader -lpython3.8 Eigen3::Eigen)\r\n+target_link_libraries(mppi\r\n+mppi_lib\r\n+)\r\n \r\n-# Link the MyLibrary library and the PyBind11 module\r\n-# target_link_libraries(controller PRIVATE MyLibrary ${CUDA_LIBRARIES}\r\n-# -lrbdl\r\n-#     -lrbdl_urdfreader\r\n-#         -lpython3.8\r\n-#         Eigen3::Eigen)\r\n+set_property(TARGET mppi \r\n+             PROPERTY CUDA_SEPARABLE_COMPILATION ON)\r\n \r\n-# target_link_libraries(controller PRIVATE pybind11::module\r\n-#     -lrbdl\r\n-#     -lrbdl_urdfreader\r\n-#         -lpython3.8\r\n-#         Eigen3::Eigen\r\n-#     )\n+\r\n+\r\n+# add_library(particles \r\n+#             src/cuda.cu\r\n+#             )\r\n+\r\n+# target_compile_features(particles PUBLIC cxx_std_11)\r\n+# set_target_properties( particles\r\n+#                        PROPERTIES CUDA_SEPARABLE_COMPILATION ON)\r\n+\r\n+# add_executable(particle_test src/cuda.cpp)\r\n+ \r\n+# set_property(TARGET particle_test \r\n+#              PROPERTY CUDA_SEPARABLE_COMPILATION ON)\r\n+# target_link_libraries(particle_test PRIVATE particles)\r\n+\r\n+\r\n+# target_compile_features(particle_test2 PUBLIC cxx_std_11)\r\n+\r\n+# add_executable(particle_test2 src/cuda2.cu)\r\n+ \r\n+# set_property(TARGET particle_test2 \r\n+#              PROPERTY CUDA_SEPARABLE_COMPILATION ON)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1692684518255,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,117 +1,112 @@\n-cmake_minimum_required(VERSION 3.0.0)\r\n-project(dual_arm_4 VERSION 0.1.0)\r\n-#cd build\r\n-#cmake -D CMAKE_BUILD_TYPE=release ..\r\n-#make\r\n+cmake_minimum_required(VERSION 3.15)\r\n+project(simulation)\r\n \r\n \r\n-set(CPACK_PROJECT_NAME ${PROJECT_NAME})\r\n-set(CPACK_PROJECT_VERSION ${PROJECT_VERSION})\r\n+set(CMAKE_CXX_STANDARD 17)\r\n \r\n-#===========================================\r\n+\r\n+set(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_CXX_FLAGS} -Wl,-no-as-needed\")\r\n+#fing eigen library\r\n find_package (Eigen3 3.3 REQUIRED)\r\n-message(STATUS \"Eigen3 : \" ${EIGEN3_INCLUDE_DIR})\r\n+find_package(OpenGL REQUIRED)\r\n+find_package(GLEW REQUIRED)\r\n+\r\n+message(STATUS \"Eigen3 : \" ${EIGEN3_INCLUDE_DIR}/Eigen)\r\n message(STATUS \"current : \" ${CMAKE_CURRENT_SOURCE_DIR})\r\n \r\n-set(USE_GL 1) #USE_GL==0 does not work for 131 version since there is no 'nogl' file\r\n-set(BIN_NAME ${PROJECT_NAME})\r\n \r\n-link_directories(${CMAKE_SOURCE_DIR}/mujoco200/)\r\n+add_definitions(-DMJSIMULATE_STATIC) # use static =,solve the \"error LNK2001/LNK2019\" in windows\r\n+\r\n+find_package (X11)\r\n find_library(GLFW libglfw.so.3 HINTS ${CMAKE_SOURCE_DIR}/mujoco200/bin)\r\n-message(STATUS \"GLFW lib found at: \" ${GLFW})\r\n+# set MUJOCO root\r\n+set(MUJOCO_HOME ${CMAKE_SOURCE_DIR}/mujoco-2.3.3/)\r\n+message(STATUS \"MUJOCO_HOME: \" ${MUJOCO_HOME})\r\n \r\n-#Show path to MuJoCo \r\n-message(STATUS \"MuJoCo path: \" ${CMAKE_SOURCE_DIR}/mujoco200/)\r\n-#Finding main mujoco library\r\n-if(${USE_GL})\r\n-file(GLOB LIB_MUJOCO mujoco200/bin/libmujoco[0-9][0-9][0-9].so)\r\n-else()\r\n-file(GLOB LIB_MUJOCO mujoco200/bin/libmujoco[0-9][0-9][0-9]nogl.so)\r\n-endif()\r\n-#Show mujoco library found\r\n-message(STATUS \"MuJoCo lib found at: \" ${LIB_MUJOCO})\r\n enable_language(CUDA)\r\n-#============================\r\n \r\n+include_directories(${CMAKE_CURRENT_SOURCE_DIR}/include\r\n+${EIGEN3_INCLUDE_DIRS}\r\n+)\r\n+\r\n+#link_directories(${CMAKE_CURRENT_SOURCE_DIR}/lib/)\r\n+link_directories(\r\n+    ${CMAKE_CURRENT_SOURCE_DIR}/lib/\r\n+)\r\n+\r\n+#$ENV{EIGEN3_INCLUDE_DIR}\r\n+\r\n include_directories(\r\n     ${CMAKE_CURRENT_SOURCE_DIR}/include\r\n-    ${CMAKE_CURRENT_SOURCE_DIR}/mujoco200/include\r\n+    ${CMAKE_CURRENT_SOURCE_DIR}/mujoco-2.3.3/include\r\n+    ${CMAKE_CURRENT_SOURCE_DIR}/mujoco-2.3.3/simulate\r\n+  $ENV{EIGEN3_INCLUDE_DIR}/Eigen/\r\n+  ${GLEW_INCLUDE_DIRS}\r\n     /usr/local/include/rbdl\r\n     /usr/local/lib\r\n     /usr/local/cuda-11.6\r\n     /usr/local/cuda\r\n     /usr/local/cuda/include\r\n-    #$ENV{EIGEN3_INCLUDE_DIR}\r\n-    \r\n )\r\n \r\n-add_library(mppi_lib\r\n-    src/controller.cpp \r\n-    src/cuda.cu\r\n-    src/robotmodel.cpp\r\n-    src/trajectory.cpp\r\n-    src/quadraticprogram.cpp\r\n-    # src/mppi.cpp\r\n-    mujoco200/include/uitools.c    \r\n-)\r\n+set(COM_SRC\r\n+    src/main.cc\r\n+    ${MUJOCO_HOME}/simulate/glfw_dispatch.cc\r\n+    ${MUJOCO_HOME}/simulate/glfw_adapter.cc\r\n+    ${MUJOCO_HOME}/simulate/simulate.cc\r\n+    ${MUJOCO_HOME}/simulate/platform_ui_adapter.cc    \r\n+    \r\n+        \r\n+        src/controller.cpp\r\n+        src/cuda.cu\r\n+        src/robotmodel.cpp\r\n+        src/trajectory.cpp\r\n+        src/quadraticprogram.cpp\r\n+        )\r\n \r\n-# add_executable(mppi ${COM_SRC})\r\n-# add_executable(simulation\r\n-#     src/simulate.cpp\r\n-#     mujoco200/include/mjxmacro.h\r\n-#     mujoco200/include/uitools.h\r\n+# set(EXE_SRC\r\n+#     simulate/main.cc    \r\n+#     simulate/simulate.cc\r\n+#     simulate/controller.cpp\r\n+#     simulate/robotmodel.cpp\r\n+#     simulate/trajectory.cpp\r\n+    \r\n # )\r\n-#add_executable(${PROJECT_NAME} simulate/main.cc)\r\n-target_link_libraries(mppi_lib\r\n\\ No newline at end of file\n--lrbdl\r\n--lrbdl_urdfreader\r\n--lpthread\r\n+# add_library(franka_emika_lib\r\n+#     ${COM_SRC}\r\n+# )\r\n+\r\n+\r\n+\r\n+set(COM_LIB \r\n+${MUJOCO_HOME}/lib/libmujoco.so\r\n+${MUJOCO_HOME}/lib/libmujoco.so.2.3.3\r\n+${MUJOCO_HOME}/bin/mujoco_plugin/libelasticity.so\r\n+${GLFW}\r\n -lqpOASES\r\n-${LIB_MUJOCO}\r\n-${GLFW}\r\n-libglew.so\r\n-libGL.so\r\n--lcudart\r\n--lcurand\r\n-# libcurand.so\r\n-# libcurand.so.10\r\n )\r\n-set_target_properties( mppi_lib\r\n-                       PROPERTIES CUDA_SEPARABLE_COMPILATION ON)\r\n \r\n-add_executable(mppi\r\n-    src/simulate.cpp\r\n-    mujoco200/include/mjxmacro.h\r\n-    mujoco200/include/uitools.h\r\n-)\r\n+# set_target_properties( COM_LIB\r\n+#                        PROPERTIES CUDA_SEPARABLE_COMPILATION ON)\r\n \r\n-target_link_libraries(mppi\r\n-mppi_lib\r\n+add_executable(mppi ${COM_SRC})\r\n+#add_executable(${PROJECT_NAME} simulate/main.cc)\r\n+target_link_libraries(mppi \r\n+\t${COM_LIB} \r\n+\t${CMAKE_DL_LIBS} \r\n+\t${X11_LIBRARIES}\r\n+\t-lrbdl\r\n+    \t-lrbdl_urdfreader\r\n+    \t-lpthread\r\n+    \tOpenGL::OpenGL\r\n+\tOpenGL::EGL\r\n+\tGLEW::GLEW\r\n+    -lcudart\r\n+    -lcurand\r\n+\t${GLEW_LIBRARIES}\r\n+\t${OPENGL_LIBRARIES}\r\n )\r\n-\r\n set_property(TARGET mppi \r\n              PROPERTY CUDA_SEPARABLE_COMPILATION ON)\r\n \r\n \r\n-\r\n-# add_library(particles \r\n-#             src/cuda.cu\r\n-#             )\r\n-\r\n-# target_compile_features(particles PUBLIC cxx_std_11)\r\n-# set_target_properties( particles\r\n-#                        PROPERTIES CUDA_SEPARABLE_COMPILATION ON)\r\n-\r\n-# add_executable(particle_test src/cuda.cpp)\r\n- \r\n-# set_property(TARGET particle_test \r\n-#              PROPERTY CUDA_SEPARABLE_COMPILATION ON)\r\n-# target_link_libraries(particle_test PRIVATE particles)\r\n-\r\n-\r\n-# target_compile_features(particle_test2 PUBLIC cxx_std_11)\r\n-\r\n-# add_executable(particle_test2 src/cuda2.cu)\r\n- \r\n-# set_property(TARGET particle_test2 \r\n-#              PROPERTY CUDA_SEPARABLE_COMPILATION ON)\n"
                },
                {
                    "date": 1693557622283,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,8 @@\n # set MUJOCO root\r\n set(MUJOCO_HOME ${CMAKE_SOURCE_DIR}/mujoco-2.3.3/)\r\n message(STATUS \"MUJOCO_HOME: \" ${MUJOCO_HOME})\r\n \r\n-enable_language(CUDA)\r\n \r\n include_directories(${CMAKE_CURRENT_SOURCE_DIR}/include\r\n ${EIGEN3_INCLUDE_DIRS}\r\n )\r\n@@ -43,11 +42,8 @@\n   $ENV{EIGEN3_INCLUDE_DIR}/Eigen/\r\n   ${GLEW_INCLUDE_DIRS}\r\n     /usr/local/include/rbdl\r\n     /usr/local/lib\r\n-    /usr/local/cuda-11.6\r\n-    /usr/local/cuda\r\n-    /usr/local/cuda/include\r\n )\r\n \r\n set(COM_SRC\r\n     src/main.cc\r\n@@ -57,39 +53,20 @@\n     ${MUJOCO_HOME}/simulate/platform_ui_adapter.cc    \r\n     \r\n         \r\n         src/controller.cpp\r\n-        src/cuda.cu\r\n         src/robotmodel.cpp\r\n         src/trajectory.cpp\r\n         src/quadraticprogram.cpp\r\n         )\r\n \r\n-# set(EXE_SRC\r\n-#     simulate/main.cc    \r\n-#     simulate/simulate.cc\r\n-#     simulate/controller.cpp\r\n-#     simulate/robotmodel.cpp\r\n-#     simulate/trajectory.cpp\r\n-    \r\n-# )\r\n-# add_library(franka_emika_lib\r\n-#     ${COM_SRC}\r\n-# )\r\n-\r\n-\r\n-\r\n set(COM_LIB \r\n ${MUJOCO_HOME}/lib/libmujoco.so\r\n ${MUJOCO_HOME}/lib/libmujoco.so.2.3.3\r\n ${MUJOCO_HOME}/bin/mujoco_plugin/libelasticity.so\r\n ${GLFW}\r\n -lqpOASES\r\n )\r\n-\r\n-# set_target_properties( COM_LIB\r\n-#                        PROPERTIES CUDA_SEPARABLE_COMPILATION ON)\r\n-\r\n add_executable(mppi ${COM_SRC})\r\n #add_executable(${PROJECT_NAME} simulate/main.cc)\r\n target_link_libraries(mppi \r\n \t${COM_LIB} \r\n@@ -100,13 +77,7 @@\n     \t-lpthread\r\n     \tOpenGL::OpenGL\r\n \tOpenGL::EGL\r\n \tGLEW::GLEW\r\n-    -lcudart\r\n-    -lcurand\r\n \t${GLEW_LIBRARIES}\r\n \t${OPENGL_LIBRARIES}\r\n-)\r\n-set_property(TARGET mppi \r\n-             PROPERTY CUDA_SEPARABLE_COMPILATION ON)\r\n-\r\n-\r\n+)\n\\ No newline at end of file\n"
                }
            ],
            "date": 1691458998054,
            "name": "Commit-0",
            "content": "cmake_minimum_required(VERSION 3.15)\r\nproject(simulation)\r\n\r\n\r\nset(CMAKE_CXX_STANDARD 17)\r\n\r\n\r\nset(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_CXX_FLAGS} -Wl,-no-as-needed\")\r\n#fing eigen library\r\nfind_package (Eigen3 3.3 REQUIRED)\r\nfind_package(OpenGL REQUIRED)\r\nfind_package(GLEW REQUIRED)\r\n\r\nmessage(STATUS \"Eigen3 : \" ${EIGEN3_INCLUDE_DIR}/Eigen)\r\nmessage(STATUS \"current : \" ${CMAKE_CURRENT_SOURCE_DIR})\r\n\r\n\r\nadd_definitions(-DMJSIMULATE_STATIC) # use static =,solve the \"error LNK2001/LNK2019\" in windows\r\n\r\nfind_package (X11)\r\nfind_library(GLFW libglfw.so.3 HINTS ${CMAKE_SOURCE_DIR}/mujoco200/bin)\r\n# set MUJOCO root\r\nset(MUJOCO_HOME ${CMAKE_SOURCE_DIR}/mujoco-2.3.3/)\r\nmessage(STATUS \"MUJOCO_HOME: \" ${MUJOCO_HOME})\r\n\r\nenable_language(CUDA)\r\n\r\ninclude_directories(${CMAKE_CURRENT_SOURCE_DIR}/include\r\n${EIGEN3_INCLUDE_DIRS}\r\n)\r\n\r\n#link_directories(${CMAKE_CURRENT_SOURCE_DIR}/lib/)\r\nlink_directories(\r\n    ${CMAKE_CURRENT_SOURCE_DIR}/lib/\r\n)\r\n\r\n#$ENV{EIGEN3_INCLUDE_DIR}\r\n\r\ninclude_directories(\r\n    ${CMAKE_CURRENT_SOURCE_DIR}/include\r\n    ${CMAKE_CURRENT_SOURCE_DIR}/mujoco-2.3.3/include\r\n    ${CMAKE_CURRENT_SOURCE_DIR}/mujoco-2.3.3/simulate\r\n  $ENV{EIGEN3_INCLUDE_DIR}/Eigen/\r\n  ${GLEW_INCLUDE_DIRS}\r\n    /usr/local/include/rbdl\r\n    /usr/local/lib\r\n    /usr/local/cuda-11.6\r\n    /usr/local/cuda\r\n    /usr/local/cuda/include\r\n)\r\n\r\nset(COM_SRC\r\n    src/main.cc\r\n    ${MUJOCO_HOME}/simulate/glfw_dispatch.cc\r\n    ${MUJOCO_HOME}/simulate/glfw_adapter.cc\r\n    ${MUJOCO_HOME}/simulate/simulate.cc\r\n    ${MUJOCO_HOME}/simulate/platform_ui_adapter.cc    \r\n    \r\n        \r\n        src/controller.cpp\r\n        src/cuda.cu\r\n        src/robotmodel.cpp\r\n        src/trajectory.cpp\r\n        src/quadraticprogram.cpp\r\n        )\r\n\r\n# set(EXE_SRC\r\n#     simulate/main.cc    \r\n#     simulate/simulate.cc\r\n#     simulate/controller.cpp\r\n#     simulate/robotmodel.cpp\r\n#     simulate/trajectory.cpp\r\n    \r\n# )\r\n# add_library(franka_emika_lib\r\n#     ${COM_SRC}\r\n# )\r\n\r\n\r\n\r\nset(COM_LIB \r\n${MUJOCO_HOME}/lib/libmujoco.so\r\n${MUJOCO_HOME}/lib/libmujoco.so.2.3.3\r\n${MUJOCO_HOME}/bin/mujoco_plugin/libelasticity.so\r\n${GLFW}\r\n-lqpOASES\r\n)\r\n\r\n# set_target_properties( COM_LIB\r\n#                        PROPERTIES CUDA_SEPARABLE_COMPILATION ON)\r\n\r\nadd_executable(mppi ${COM_SRC})\r\n#add_executable(${PROJECT_NAME} simulate/main.cc)\r\ntarget_link_libraries(mppi \r\n\t${COM_LIB} \r\n\t${CMAKE_DL_LIBS} \r\n\t${X11_LIBRARIES}\r\n\t-lrbdl\r\n    \t-lrbdl_urdfreader\r\n    \t-lpthread\r\n    \tOpenGL::OpenGL\r\n\tOpenGL::EGL\r\n\tGLEW::GLEW\r\n    -lcudart\r\n    -lcurand\r\n\t${GLEW_LIBRARIES}\r\n\t${OPENGL_LIBRARIES}\r\n)\r\nset_property(TARGET mppi \r\n             PROPERTY CUDA_SEPARABLE_COMPILATION ON)\r\n\r\npybind11_add_module(controller simulate/controller.cpp)\r\ntarget_link_libraries(controller\r\nPUBLIC\r\n    ${catkin_LIBRARIES}\r\n    Eigen3::Eigen\r\n    franka_emika_lib_py\r\n    -lrbdl\r\n      -lrbdl_urdfreader\r\n      -lpthread\r\n      OpenGL::OpenGL\r\n    OpenGL::EGL\r\n    -lpython3.8\r\n    ${COM_LIB} \r\n    ${X11_LIBRARIES} \r\n    GLEW::GLEW\r\n    pybind11::pybind11\r\n    ${OMPL_LIBRARIES}\r\n    ${GLEW_LIBRARIES}\r\n\t  ${OPENGL_LIBRARIES}\r\n)"
        }
    ]
}